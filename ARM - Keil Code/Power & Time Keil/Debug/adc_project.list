
adc_project.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000086a0  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000378  080087b0  080087b0  000187b0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008b28  08008b28  000201e4  2**0
                  CONTENTS
  4 .ARM          00000000  08008b28  08008b28  000201e4  2**0
                  CONTENTS
  5 .preinit_array 00000000  08008b28  08008b28  000201e4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008b28  08008b28  00018b28  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008b2c  08008b2c  00018b2c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e4  20000000  08008b30  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000ec  200001e4  08008d14  000201e4  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200002d0  08008d14  000202d0  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000201e4  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000cb14  00000000  00000000  0002020d  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000022ba  00000000  00000000  0002cd21  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000d78  00000000  00000000  0002efe0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000c40  00000000  00000000  0002fd58  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00015f47  00000000  00000000  00030998  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000abea  00000000  00000000  000468df  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000780c2  00000000  00000000  000514c9  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000c958b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004a7c  00000000  00000000  000c9608  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200001e4 	.word	0x200001e4
 800012c:	00000000 	.word	0x00000000
 8000130:	08008798 	.word	0x08008798

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200001e8 	.word	0x200001e8
 800014c:	08008798 	.word	0x08008798

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	; 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800029e:	f1a4 0401 	sub.w	r4, r4, #1
 80002a2:	d1e9      	bne.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <__aeabi_d2uiz>:
 8000a88:	004a      	lsls	r2, r1, #1
 8000a8a:	d211      	bcs.n	8000ab0 <__aeabi_d2uiz+0x28>
 8000a8c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a90:	d211      	bcs.n	8000ab6 <__aeabi_d2uiz+0x2e>
 8000a92:	d50d      	bpl.n	8000ab0 <__aeabi_d2uiz+0x28>
 8000a94:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a9c:	d40e      	bmi.n	8000abc <__aeabi_d2uiz+0x34>
 8000a9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aa2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000aa6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000aaa:	fa23 f002 	lsr.w	r0, r3, r2
 8000aae:	4770      	bx	lr
 8000ab0:	f04f 0000 	mov.w	r0, #0
 8000ab4:	4770      	bx	lr
 8000ab6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000aba:	d102      	bne.n	8000ac2 <__aeabi_d2uiz+0x3a>
 8000abc:	f04f 30ff 	mov.w	r0, #4294967295
 8000ac0:	4770      	bx	lr
 8000ac2:	f04f 0000 	mov.w	r0, #0
 8000ac6:	4770      	bx	lr

08000ac8 <__aeabi_d2f>:
 8000ac8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000acc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000ad0:	bf24      	itt	cs
 8000ad2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000ad6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000ada:	d90d      	bls.n	8000af8 <__aeabi_d2f+0x30>
 8000adc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000ae0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000ae4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000ae8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000aec:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000af0:	bf08      	it	eq
 8000af2:	f020 0001 	biceq.w	r0, r0, #1
 8000af6:	4770      	bx	lr
 8000af8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000afc:	d121      	bne.n	8000b42 <__aeabi_d2f+0x7a>
 8000afe:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b02:	bfbc      	itt	lt
 8000b04:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b08:	4770      	bxlt	lr
 8000b0a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b0e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b12:	f1c2 0218 	rsb	r2, r2, #24
 8000b16:	f1c2 0c20 	rsb	ip, r2, #32
 8000b1a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b1e:	fa20 f002 	lsr.w	r0, r0, r2
 8000b22:	bf18      	it	ne
 8000b24:	f040 0001 	orrne.w	r0, r0, #1
 8000b28:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b2c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b30:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b34:	ea40 000c 	orr.w	r0, r0, ip
 8000b38:	fa23 f302 	lsr.w	r3, r3, r2
 8000b3c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b40:	e7cc      	b.n	8000adc <__aeabi_d2f+0x14>
 8000b42:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b46:	d107      	bne.n	8000b58 <__aeabi_d2f+0x90>
 8000b48:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b4c:	bf1e      	ittt	ne
 8000b4e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b52:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b56:	4770      	bxne	lr
 8000b58:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b5c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b60:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b64:	4770      	bx	lr
 8000b66:	bf00      	nop

08000b68 <__aeabi_frsub>:
 8000b68:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000b6c:	e002      	b.n	8000b74 <__addsf3>
 8000b6e:	bf00      	nop

08000b70 <__aeabi_fsub>:
 8000b70:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000b74 <__addsf3>:
 8000b74:	0042      	lsls	r2, r0, #1
 8000b76:	bf1f      	itttt	ne
 8000b78:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000b7c:	ea92 0f03 	teqne	r2, r3
 8000b80:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000b84:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b88:	d06a      	beq.n	8000c60 <__addsf3+0xec>
 8000b8a:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000b8e:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000b92:	bfc1      	itttt	gt
 8000b94:	18d2      	addgt	r2, r2, r3
 8000b96:	4041      	eorgt	r1, r0
 8000b98:	4048      	eorgt	r0, r1
 8000b9a:	4041      	eorgt	r1, r0
 8000b9c:	bfb8      	it	lt
 8000b9e:	425b      	neglt	r3, r3
 8000ba0:	2b19      	cmp	r3, #25
 8000ba2:	bf88      	it	hi
 8000ba4:	4770      	bxhi	lr
 8000ba6:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000baa:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000bae:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000bb2:	bf18      	it	ne
 8000bb4:	4240      	negne	r0, r0
 8000bb6:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bba:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000bbe:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000bc2:	bf18      	it	ne
 8000bc4:	4249      	negne	r1, r1
 8000bc6:	ea92 0f03 	teq	r2, r3
 8000bca:	d03f      	beq.n	8000c4c <__addsf3+0xd8>
 8000bcc:	f1a2 0201 	sub.w	r2, r2, #1
 8000bd0:	fa41 fc03 	asr.w	ip, r1, r3
 8000bd4:	eb10 000c 	adds.w	r0, r0, ip
 8000bd8:	f1c3 0320 	rsb	r3, r3, #32
 8000bdc:	fa01 f103 	lsl.w	r1, r1, r3
 8000be0:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000be4:	d502      	bpl.n	8000bec <__addsf3+0x78>
 8000be6:	4249      	negs	r1, r1
 8000be8:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000bec:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000bf0:	d313      	bcc.n	8000c1a <__addsf3+0xa6>
 8000bf2:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000bf6:	d306      	bcc.n	8000c06 <__addsf3+0x92>
 8000bf8:	0840      	lsrs	r0, r0, #1
 8000bfa:	ea4f 0131 	mov.w	r1, r1, rrx
 8000bfe:	f102 0201 	add.w	r2, r2, #1
 8000c02:	2afe      	cmp	r2, #254	; 0xfe
 8000c04:	d251      	bcs.n	8000caa <__addsf3+0x136>
 8000c06:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000c0a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000c0e:	bf08      	it	eq
 8000c10:	f020 0001 	biceq.w	r0, r0, #1
 8000c14:	ea40 0003 	orr.w	r0, r0, r3
 8000c18:	4770      	bx	lr
 8000c1a:	0049      	lsls	r1, r1, #1
 8000c1c:	eb40 0000 	adc.w	r0, r0, r0
 8000c20:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
 8000c24:	f1a2 0201 	sub.w	r2, r2, #1
 8000c28:	d1ed      	bne.n	8000c06 <__addsf3+0x92>
 8000c2a:	fab0 fc80 	clz	ip, r0
 8000c2e:	f1ac 0c08 	sub.w	ip, ip, #8
 8000c32:	ebb2 020c 	subs.w	r2, r2, ip
 8000c36:	fa00 f00c 	lsl.w	r0, r0, ip
 8000c3a:	bfaa      	itet	ge
 8000c3c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000c40:	4252      	neglt	r2, r2
 8000c42:	4318      	orrge	r0, r3
 8000c44:	bfbc      	itt	lt
 8000c46:	40d0      	lsrlt	r0, r2
 8000c48:	4318      	orrlt	r0, r3
 8000c4a:	4770      	bx	lr
 8000c4c:	f092 0f00 	teq	r2, #0
 8000c50:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000c54:	bf06      	itte	eq
 8000c56:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000c5a:	3201      	addeq	r2, #1
 8000c5c:	3b01      	subne	r3, #1
 8000c5e:	e7b5      	b.n	8000bcc <__addsf3+0x58>
 8000c60:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c64:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c68:	bf18      	it	ne
 8000c6a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c6e:	d021      	beq.n	8000cb4 <__addsf3+0x140>
 8000c70:	ea92 0f03 	teq	r2, r3
 8000c74:	d004      	beq.n	8000c80 <__addsf3+0x10c>
 8000c76:	f092 0f00 	teq	r2, #0
 8000c7a:	bf08      	it	eq
 8000c7c:	4608      	moveq	r0, r1
 8000c7e:	4770      	bx	lr
 8000c80:	ea90 0f01 	teq	r0, r1
 8000c84:	bf1c      	itt	ne
 8000c86:	2000      	movne	r0, #0
 8000c88:	4770      	bxne	lr
 8000c8a:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000c8e:	d104      	bne.n	8000c9a <__addsf3+0x126>
 8000c90:	0040      	lsls	r0, r0, #1
 8000c92:	bf28      	it	cs
 8000c94:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000c98:	4770      	bx	lr
 8000c9a:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000c9e:	bf3c      	itt	cc
 8000ca0:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000ca4:	4770      	bxcc	lr
 8000ca6:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000caa:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000cae:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cb2:	4770      	bx	lr
 8000cb4:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000cb8:	bf16      	itet	ne
 8000cba:	4608      	movne	r0, r1
 8000cbc:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000cc0:	4601      	movne	r1, r0
 8000cc2:	0242      	lsls	r2, r0, #9
 8000cc4:	bf06      	itte	eq
 8000cc6:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000cca:	ea90 0f01 	teqeq	r0, r1
 8000cce:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000cd2:	4770      	bx	lr

08000cd4 <__aeabi_ui2f>:
 8000cd4:	f04f 0300 	mov.w	r3, #0
 8000cd8:	e004      	b.n	8000ce4 <__aeabi_i2f+0x8>
 8000cda:	bf00      	nop

08000cdc <__aeabi_i2f>:
 8000cdc:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000ce0:	bf48      	it	mi
 8000ce2:	4240      	negmi	r0, r0
 8000ce4:	ea5f 0c00 	movs.w	ip, r0
 8000ce8:	bf08      	it	eq
 8000cea:	4770      	bxeq	lr
 8000cec:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000cf0:	4601      	mov	r1, r0
 8000cf2:	f04f 0000 	mov.w	r0, #0
 8000cf6:	e01c      	b.n	8000d32 <__aeabi_l2f+0x2a>

08000cf8 <__aeabi_ul2f>:
 8000cf8:	ea50 0201 	orrs.w	r2, r0, r1
 8000cfc:	bf08      	it	eq
 8000cfe:	4770      	bxeq	lr
 8000d00:	f04f 0300 	mov.w	r3, #0
 8000d04:	e00a      	b.n	8000d1c <__aeabi_l2f+0x14>
 8000d06:	bf00      	nop

08000d08 <__aeabi_l2f>:
 8000d08:	ea50 0201 	orrs.w	r2, r0, r1
 8000d0c:	bf08      	it	eq
 8000d0e:	4770      	bxeq	lr
 8000d10:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000d14:	d502      	bpl.n	8000d1c <__aeabi_l2f+0x14>
 8000d16:	4240      	negs	r0, r0
 8000d18:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d1c:	ea5f 0c01 	movs.w	ip, r1
 8000d20:	bf02      	ittt	eq
 8000d22:	4684      	moveq	ip, r0
 8000d24:	4601      	moveq	r1, r0
 8000d26:	2000      	moveq	r0, #0
 8000d28:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000d2c:	bf08      	it	eq
 8000d2e:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000d32:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000d36:	fabc f28c 	clz	r2, ip
 8000d3a:	3a08      	subs	r2, #8
 8000d3c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000d40:	db10      	blt.n	8000d64 <__aeabi_l2f+0x5c>
 8000d42:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d46:	4463      	add	r3, ip
 8000d48:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d4c:	f1c2 0220 	rsb	r2, r2, #32
 8000d50:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000d54:	fa20 f202 	lsr.w	r2, r0, r2
 8000d58:	eb43 0002 	adc.w	r0, r3, r2
 8000d5c:	bf08      	it	eq
 8000d5e:	f020 0001 	biceq.w	r0, r0, #1
 8000d62:	4770      	bx	lr
 8000d64:	f102 0220 	add.w	r2, r2, #32
 8000d68:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d6c:	f1c2 0220 	rsb	r2, r2, #32
 8000d70:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000d74:	fa21 f202 	lsr.w	r2, r1, r2
 8000d78:	eb43 0002 	adc.w	r0, r3, r2
 8000d7c:	bf08      	it	eq
 8000d7e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d82:	4770      	bx	lr

08000d84 <__aeabi_fmul>:
 8000d84:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000d88:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000d8c:	bf1e      	ittt	ne
 8000d8e:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000d92:	ea92 0f0c 	teqne	r2, ip
 8000d96:	ea93 0f0c 	teqne	r3, ip
 8000d9a:	d06f      	beq.n	8000e7c <__aeabi_fmul+0xf8>
 8000d9c:	441a      	add	r2, r3
 8000d9e:	ea80 0c01 	eor.w	ip, r0, r1
 8000da2:	0240      	lsls	r0, r0, #9
 8000da4:	bf18      	it	ne
 8000da6:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000daa:	d01e      	beq.n	8000dea <__aeabi_fmul+0x66>
 8000dac:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000db0:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000db4:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000db8:	fba0 3101 	umull	r3, r1, r0, r1
 8000dbc:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000dc0:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000dc4:	bf3e      	ittt	cc
 8000dc6:	0049      	lslcc	r1, r1, #1
 8000dc8:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000dcc:	005b      	lslcc	r3, r3, #1
 8000dce:	ea40 0001 	orr.w	r0, r0, r1
 8000dd2:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000dd6:	2afd      	cmp	r2, #253	; 0xfd
 8000dd8:	d81d      	bhi.n	8000e16 <__aeabi_fmul+0x92>
 8000dda:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000dde:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000de2:	bf08      	it	eq
 8000de4:	f020 0001 	biceq.w	r0, r0, #1
 8000de8:	4770      	bx	lr
 8000dea:	f090 0f00 	teq	r0, #0
 8000dee:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000df2:	bf08      	it	eq
 8000df4:	0249      	lsleq	r1, r1, #9
 8000df6:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000dfa:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000dfe:	3a7f      	subs	r2, #127	; 0x7f
 8000e00:	bfc2      	ittt	gt
 8000e02:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000e06:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000e0a:	4770      	bxgt	lr
 8000e0c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000e10:	f04f 0300 	mov.w	r3, #0
 8000e14:	3a01      	subs	r2, #1
 8000e16:	dc5d      	bgt.n	8000ed4 <__aeabi_fmul+0x150>
 8000e18:	f112 0f19 	cmn.w	r2, #25
 8000e1c:	bfdc      	itt	le
 8000e1e:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000e22:	4770      	bxle	lr
 8000e24:	f1c2 0200 	rsb	r2, r2, #0
 8000e28:	0041      	lsls	r1, r0, #1
 8000e2a:	fa21 f102 	lsr.w	r1, r1, r2
 8000e2e:	f1c2 0220 	rsb	r2, r2, #32
 8000e32:	fa00 fc02 	lsl.w	ip, r0, r2
 8000e36:	ea5f 0031 	movs.w	r0, r1, rrx
 8000e3a:	f140 0000 	adc.w	r0, r0, #0
 8000e3e:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000e42:	bf08      	it	eq
 8000e44:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000e48:	4770      	bx	lr
 8000e4a:	f092 0f00 	teq	r2, #0
 8000e4e:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000e52:	bf02      	ittt	eq
 8000e54:	0040      	lsleq	r0, r0, #1
 8000e56:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000e5a:	3a01      	subeq	r2, #1
 8000e5c:	d0f9      	beq.n	8000e52 <__aeabi_fmul+0xce>
 8000e5e:	ea40 000c 	orr.w	r0, r0, ip
 8000e62:	f093 0f00 	teq	r3, #0
 8000e66:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000e6a:	bf02      	ittt	eq
 8000e6c:	0049      	lsleq	r1, r1, #1
 8000e6e:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000e72:	3b01      	subeq	r3, #1
 8000e74:	d0f9      	beq.n	8000e6a <__aeabi_fmul+0xe6>
 8000e76:	ea41 010c 	orr.w	r1, r1, ip
 8000e7a:	e78f      	b.n	8000d9c <__aeabi_fmul+0x18>
 8000e7c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000e80:	ea92 0f0c 	teq	r2, ip
 8000e84:	bf18      	it	ne
 8000e86:	ea93 0f0c 	teqne	r3, ip
 8000e8a:	d00a      	beq.n	8000ea2 <__aeabi_fmul+0x11e>
 8000e8c:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000e90:	bf18      	it	ne
 8000e92:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000e96:	d1d8      	bne.n	8000e4a <__aeabi_fmul+0xc6>
 8000e98:	ea80 0001 	eor.w	r0, r0, r1
 8000e9c:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000ea0:	4770      	bx	lr
 8000ea2:	f090 0f00 	teq	r0, #0
 8000ea6:	bf17      	itett	ne
 8000ea8:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000eac:	4608      	moveq	r0, r1
 8000eae:	f091 0f00 	teqne	r1, #0
 8000eb2:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000eb6:	d014      	beq.n	8000ee2 <__aeabi_fmul+0x15e>
 8000eb8:	ea92 0f0c 	teq	r2, ip
 8000ebc:	d101      	bne.n	8000ec2 <__aeabi_fmul+0x13e>
 8000ebe:	0242      	lsls	r2, r0, #9
 8000ec0:	d10f      	bne.n	8000ee2 <__aeabi_fmul+0x15e>
 8000ec2:	ea93 0f0c 	teq	r3, ip
 8000ec6:	d103      	bne.n	8000ed0 <__aeabi_fmul+0x14c>
 8000ec8:	024b      	lsls	r3, r1, #9
 8000eca:	bf18      	it	ne
 8000ecc:	4608      	movne	r0, r1
 8000ece:	d108      	bne.n	8000ee2 <__aeabi_fmul+0x15e>
 8000ed0:	ea80 0001 	eor.w	r0, r0, r1
 8000ed4:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000ed8:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000edc:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ee0:	4770      	bx	lr
 8000ee2:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ee6:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000eea:	4770      	bx	lr

08000eec <__aeabi_fdiv>:
 8000eec:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000ef0:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000ef4:	bf1e      	ittt	ne
 8000ef6:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000efa:	ea92 0f0c 	teqne	r2, ip
 8000efe:	ea93 0f0c 	teqne	r3, ip
 8000f02:	d069      	beq.n	8000fd8 <__aeabi_fdiv+0xec>
 8000f04:	eba2 0203 	sub.w	r2, r2, r3
 8000f08:	ea80 0c01 	eor.w	ip, r0, r1
 8000f0c:	0249      	lsls	r1, r1, #9
 8000f0e:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000f12:	d037      	beq.n	8000f84 <__aeabi_fdiv+0x98>
 8000f14:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000f18:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000f1c:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000f20:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000f24:	428b      	cmp	r3, r1
 8000f26:	bf38      	it	cc
 8000f28:	005b      	lslcc	r3, r3, #1
 8000f2a:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000f2e:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000f32:	428b      	cmp	r3, r1
 8000f34:	bf24      	itt	cs
 8000f36:	1a5b      	subcs	r3, r3, r1
 8000f38:	ea40 000c 	orrcs.w	r0, r0, ip
 8000f3c:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000f40:	bf24      	itt	cs
 8000f42:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000f46:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000f4a:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000f4e:	bf24      	itt	cs
 8000f50:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000f54:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000f58:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000f5c:	bf24      	itt	cs
 8000f5e:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000f62:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000f66:	011b      	lsls	r3, r3, #4
 8000f68:	bf18      	it	ne
 8000f6a:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000f6e:	d1e0      	bne.n	8000f32 <__aeabi_fdiv+0x46>
 8000f70:	2afd      	cmp	r2, #253	; 0xfd
 8000f72:	f63f af50 	bhi.w	8000e16 <__aeabi_fmul+0x92>
 8000f76:	428b      	cmp	r3, r1
 8000f78:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000f7c:	bf08      	it	eq
 8000f7e:	f020 0001 	biceq.w	r0, r0, #1
 8000f82:	4770      	bx	lr
 8000f84:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000f88:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000f8c:	327f      	adds	r2, #127	; 0x7f
 8000f8e:	bfc2      	ittt	gt
 8000f90:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000f94:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000f98:	4770      	bxgt	lr
 8000f9a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000f9e:	f04f 0300 	mov.w	r3, #0
 8000fa2:	3a01      	subs	r2, #1
 8000fa4:	e737      	b.n	8000e16 <__aeabi_fmul+0x92>
 8000fa6:	f092 0f00 	teq	r2, #0
 8000faa:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000fae:	bf02      	ittt	eq
 8000fb0:	0040      	lsleq	r0, r0, #1
 8000fb2:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000fb6:	3a01      	subeq	r2, #1
 8000fb8:	d0f9      	beq.n	8000fae <__aeabi_fdiv+0xc2>
 8000fba:	ea40 000c 	orr.w	r0, r0, ip
 8000fbe:	f093 0f00 	teq	r3, #0
 8000fc2:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000fc6:	bf02      	ittt	eq
 8000fc8:	0049      	lsleq	r1, r1, #1
 8000fca:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000fce:	3b01      	subeq	r3, #1
 8000fd0:	d0f9      	beq.n	8000fc6 <__aeabi_fdiv+0xda>
 8000fd2:	ea41 010c 	orr.w	r1, r1, ip
 8000fd6:	e795      	b.n	8000f04 <__aeabi_fdiv+0x18>
 8000fd8:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000fdc:	ea92 0f0c 	teq	r2, ip
 8000fe0:	d108      	bne.n	8000ff4 <__aeabi_fdiv+0x108>
 8000fe2:	0242      	lsls	r2, r0, #9
 8000fe4:	f47f af7d 	bne.w	8000ee2 <__aeabi_fmul+0x15e>
 8000fe8:	ea93 0f0c 	teq	r3, ip
 8000fec:	f47f af70 	bne.w	8000ed0 <__aeabi_fmul+0x14c>
 8000ff0:	4608      	mov	r0, r1
 8000ff2:	e776      	b.n	8000ee2 <__aeabi_fmul+0x15e>
 8000ff4:	ea93 0f0c 	teq	r3, ip
 8000ff8:	d104      	bne.n	8001004 <__aeabi_fdiv+0x118>
 8000ffa:	024b      	lsls	r3, r1, #9
 8000ffc:	f43f af4c 	beq.w	8000e98 <__aeabi_fmul+0x114>
 8001000:	4608      	mov	r0, r1
 8001002:	e76e      	b.n	8000ee2 <__aeabi_fmul+0x15e>
 8001004:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8001008:	bf18      	it	ne
 800100a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 800100e:	d1ca      	bne.n	8000fa6 <__aeabi_fdiv+0xba>
 8001010:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8001014:	f47f af5c 	bne.w	8000ed0 <__aeabi_fmul+0x14c>
 8001018:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 800101c:	f47f af3c 	bne.w	8000e98 <__aeabi_fmul+0x114>
 8001020:	e75f      	b.n	8000ee2 <__aeabi_fmul+0x15e>
 8001022:	bf00      	nop

08001024 <__gesf2>:
 8001024:	f04f 3cff 	mov.w	ip, #4294967295
 8001028:	e006      	b.n	8001038 <__cmpsf2+0x4>
 800102a:	bf00      	nop

0800102c <__lesf2>:
 800102c:	f04f 0c01 	mov.w	ip, #1
 8001030:	e002      	b.n	8001038 <__cmpsf2+0x4>
 8001032:	bf00      	nop

08001034 <__cmpsf2>:
 8001034:	f04f 0c01 	mov.w	ip, #1
 8001038:	f84d cd04 	str.w	ip, [sp, #-4]!
 800103c:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8001040:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8001044:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8001048:	bf18      	it	ne
 800104a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 800104e:	d011      	beq.n	8001074 <__cmpsf2+0x40>
 8001050:	b001      	add	sp, #4
 8001052:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8001056:	bf18      	it	ne
 8001058:	ea90 0f01 	teqne	r0, r1
 800105c:	bf58      	it	pl
 800105e:	ebb2 0003 	subspl.w	r0, r2, r3
 8001062:	bf88      	it	hi
 8001064:	17c8      	asrhi	r0, r1, #31
 8001066:	bf38      	it	cc
 8001068:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 800106c:	bf18      	it	ne
 800106e:	f040 0001 	orrne.w	r0, r0, #1
 8001072:	4770      	bx	lr
 8001074:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8001078:	d102      	bne.n	8001080 <__cmpsf2+0x4c>
 800107a:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 800107e:	d105      	bne.n	800108c <__cmpsf2+0x58>
 8001080:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8001084:	d1e4      	bne.n	8001050 <__cmpsf2+0x1c>
 8001086:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 800108a:	d0e1      	beq.n	8001050 <__cmpsf2+0x1c>
 800108c:	f85d 0b04 	ldr.w	r0, [sp], #4
 8001090:	4770      	bx	lr
 8001092:	bf00      	nop

08001094 <__aeabi_cfrcmple>:
 8001094:	4684      	mov	ip, r0
 8001096:	4608      	mov	r0, r1
 8001098:	4661      	mov	r1, ip
 800109a:	e7ff      	b.n	800109c <__aeabi_cfcmpeq>

0800109c <__aeabi_cfcmpeq>:
 800109c:	b50f      	push	{r0, r1, r2, r3, lr}
 800109e:	f7ff ffc9 	bl	8001034 <__cmpsf2>
 80010a2:	2800      	cmp	r0, #0
 80010a4:	bf48      	it	mi
 80010a6:	f110 0f00 	cmnmi.w	r0, #0
 80010aa:	bd0f      	pop	{r0, r1, r2, r3, pc}

080010ac <__aeabi_fcmpeq>:
 80010ac:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010b0:	f7ff fff4 	bl	800109c <__aeabi_cfcmpeq>
 80010b4:	bf0c      	ite	eq
 80010b6:	2001      	moveq	r0, #1
 80010b8:	2000      	movne	r0, #0
 80010ba:	f85d fb08 	ldr.w	pc, [sp], #8
 80010be:	bf00      	nop

080010c0 <__aeabi_fcmplt>:
 80010c0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010c4:	f7ff ffea 	bl	800109c <__aeabi_cfcmpeq>
 80010c8:	bf34      	ite	cc
 80010ca:	2001      	movcc	r0, #1
 80010cc:	2000      	movcs	r0, #0
 80010ce:	f85d fb08 	ldr.w	pc, [sp], #8
 80010d2:	bf00      	nop

080010d4 <__aeabi_fcmple>:
 80010d4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010d8:	f7ff ffe0 	bl	800109c <__aeabi_cfcmpeq>
 80010dc:	bf94      	ite	ls
 80010de:	2001      	movls	r0, #1
 80010e0:	2000      	movhi	r0, #0
 80010e2:	f85d fb08 	ldr.w	pc, [sp], #8
 80010e6:	bf00      	nop

080010e8 <__aeabi_fcmpge>:
 80010e8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010ec:	f7ff ffd2 	bl	8001094 <__aeabi_cfrcmple>
 80010f0:	bf94      	ite	ls
 80010f2:	2001      	movls	r0, #1
 80010f4:	2000      	movhi	r0, #0
 80010f6:	f85d fb08 	ldr.w	pc, [sp], #8
 80010fa:	bf00      	nop

080010fc <__aeabi_fcmpgt>:
 80010fc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001100:	f7ff ffc8 	bl	8001094 <__aeabi_cfrcmple>
 8001104:	bf34      	ite	cc
 8001106:	2001      	movcc	r0, #1
 8001108:	2000      	movcs	r0, #0
 800110a:	f85d fb08 	ldr.w	pc, [sp], #8
 800110e:	bf00      	nop

08001110 <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8001110:	b580      	push	{r7, lr}
 8001112:	b084      	sub	sp, #16
 8001114:	af00      	add	r7, sp, #0
  ADC_ChannelConfTypeDef sConfig = {0};
 8001116:	1d3b      	adds	r3, r7, #4
 8001118:	2200      	movs	r2, #0
 800111a:	601a      	str	r2, [r3, #0]
 800111c:	605a      	str	r2, [r3, #4]
 800111e:	609a      	str	r2, [r3, #8]

  /** Common config
  */
  hadc1.Instance = ADC1;
 8001120:	4b27      	ldr	r3, [pc, #156]	; (80011c0 <MX_ADC1_Init+0xb0>)
 8001122:	4a28      	ldr	r2, [pc, #160]	; (80011c4 <MX_ADC1_Init+0xb4>)
 8001124:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8001126:	4b26      	ldr	r3, [pc, #152]	; (80011c0 <MX_ADC1_Init+0xb0>)
 8001128:	f44f 7280 	mov.w	r2, #256	; 0x100
 800112c:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800112e:	4b24      	ldr	r3, [pc, #144]	; (80011c0 <MX_ADC1_Init+0xb0>)
 8001130:	2200      	movs	r2, #0
 8001132:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001134:	4b22      	ldr	r3, [pc, #136]	; (80011c0 <MX_ADC1_Init+0xb0>)
 8001136:	2200      	movs	r2, #0
 8001138:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800113a:	4b21      	ldr	r3, [pc, #132]	; (80011c0 <MX_ADC1_Init+0xb0>)
 800113c:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 8001140:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001142:	4b1f      	ldr	r3, [pc, #124]	; (80011c0 <MX_ADC1_Init+0xb0>)
 8001144:	2200      	movs	r2, #0
 8001146:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 3;
 8001148:	4b1d      	ldr	r3, [pc, #116]	; (80011c0 <MX_ADC1_Init+0xb0>)
 800114a:	2203      	movs	r2, #3
 800114c:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800114e:	481c      	ldr	r0, [pc, #112]	; (80011c0 <MX_ADC1_Init+0xb0>)
 8001150:	f000 fee6 	bl	8001f20 <HAL_ADC_Init>
 8001154:	4603      	mov	r3, r0
 8001156:	2b00      	cmp	r3, #0
 8001158:	d001      	beq.n	800115e <MX_ADC1_Init+0x4e>
  {
    Error_Handler();
 800115a:	f000 fc19 	bl	8001990 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 800115e:	2303      	movs	r3, #3
 8001160:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001162:	2301      	movs	r3, #1
 8001164:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_55CYCLES_5;
 8001166:	2305      	movs	r3, #5
 8001168:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800116a:	1d3b      	adds	r3, r7, #4
 800116c:	4619      	mov	r1, r3
 800116e:	4814      	ldr	r0, [pc, #80]	; (80011c0 <MX_ADC1_Init+0xb0>)
 8001170:	f001 f98e 	bl	8002490 <HAL_ADC_ConfigChannel>
 8001174:	4603      	mov	r3, r0
 8001176:	2b00      	cmp	r3, #0
 8001178:	d001      	beq.n	800117e <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 800117a:	f000 fc09 	bl	8001990 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_4;
 800117e:	2304      	movs	r3, #4
 8001180:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8001182:	2302      	movs	r3, #2
 8001184:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001186:	1d3b      	adds	r3, r7, #4
 8001188:	4619      	mov	r1, r3
 800118a:	480d      	ldr	r0, [pc, #52]	; (80011c0 <MX_ADC1_Init+0xb0>)
 800118c:	f001 f980 	bl	8002490 <HAL_ADC_ConfigChannel>
 8001190:	4603      	mov	r3, r0
 8001192:	2b00      	cmp	r3, #0
 8001194:	d001      	beq.n	800119a <MX_ADC1_Init+0x8a>
  {
    Error_Handler();
 8001196:	f000 fbfb 	bl	8001990 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 800119a:	2310      	movs	r3, #16
 800119c:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 800119e:	2303      	movs	r3, #3
 80011a0:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80011a2:	1d3b      	adds	r3, r7, #4
 80011a4:	4619      	mov	r1, r3
 80011a6:	4806      	ldr	r0, [pc, #24]	; (80011c0 <MX_ADC1_Init+0xb0>)
 80011a8:	f001 f972 	bl	8002490 <HAL_ADC_ConfigChannel>
 80011ac:	4603      	mov	r3, r0
 80011ae:	2b00      	cmp	r3, #0
 80011b0:	d001      	beq.n	80011b6 <MX_ADC1_Init+0xa6>
  {
    Error_Handler();
 80011b2:	f000 fbed 	bl	8001990 <Error_Handler>
  }

}
 80011b6:	bf00      	nop
 80011b8:	3710      	adds	r7, #16
 80011ba:	46bd      	mov	sp, r7
 80011bc:	bd80      	pop	{r7, pc}
 80011be:	bf00      	nop
 80011c0:	20000218 	.word	0x20000218
 80011c4:	40012400 	.word	0x40012400

080011c8 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 80011c8:	b580      	push	{r7, lr}
 80011ca:	b088      	sub	sp, #32
 80011cc:	af00      	add	r7, sp, #0
 80011ce:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011d0:	f107 0310 	add.w	r3, r7, #16
 80011d4:	2200      	movs	r2, #0
 80011d6:	601a      	str	r2, [r3, #0]
 80011d8:	605a      	str	r2, [r3, #4]
 80011da:	609a      	str	r2, [r3, #8]
 80011dc:	60da      	str	r2, [r3, #12]
  if(adcHandle->Instance==ADC1)
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	681b      	ldr	r3, [r3, #0]
 80011e2:	4a14      	ldr	r2, [pc, #80]	; (8001234 <HAL_ADC_MspInit+0x6c>)
 80011e4:	4293      	cmp	r3, r2
 80011e6:	d121      	bne.n	800122c <HAL_ADC_MspInit+0x64>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80011e8:	4b13      	ldr	r3, [pc, #76]	; (8001238 <HAL_ADC_MspInit+0x70>)
 80011ea:	699b      	ldr	r3, [r3, #24]
 80011ec:	4a12      	ldr	r2, [pc, #72]	; (8001238 <HAL_ADC_MspInit+0x70>)
 80011ee:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80011f2:	6193      	str	r3, [r2, #24]
 80011f4:	4b10      	ldr	r3, [pc, #64]	; (8001238 <HAL_ADC_MspInit+0x70>)
 80011f6:	699b      	ldr	r3, [r3, #24]
 80011f8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80011fc:	60fb      	str	r3, [r7, #12]
 80011fe:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001200:	4b0d      	ldr	r3, [pc, #52]	; (8001238 <HAL_ADC_MspInit+0x70>)
 8001202:	699b      	ldr	r3, [r3, #24]
 8001204:	4a0c      	ldr	r2, [pc, #48]	; (8001238 <HAL_ADC_MspInit+0x70>)
 8001206:	f043 0304 	orr.w	r3, r3, #4
 800120a:	6193      	str	r3, [r2, #24]
 800120c:	4b0a      	ldr	r3, [pc, #40]	; (8001238 <HAL_ADC_MspInit+0x70>)
 800120e:	699b      	ldr	r3, [r3, #24]
 8001210:	f003 0304 	and.w	r3, r3, #4
 8001214:	60bb      	str	r3, [r7, #8]
 8001216:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA3     ------> ADC1_IN3
    PA4     ------> ADC1_IN4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4;
 8001218:	2318      	movs	r3, #24
 800121a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800121c:	2303      	movs	r3, #3
 800121e:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001220:	f107 0310 	add.w	r3, r7, #16
 8001224:	4619      	mov	r1, r3
 8001226:	4805      	ldr	r0, [pc, #20]	; (800123c <HAL_ADC_MspInit+0x74>)
 8001228:	f001 fbc4 	bl	80029b4 <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 800122c:	bf00      	nop
 800122e:	3720      	adds	r7, #32
 8001230:	46bd      	mov	sp, r7
 8001232:	bd80      	pop	{r7, pc}
 8001234:	40012400 	.word	0x40012400
 8001238:	40021000 	.word	0x40021000
 800123c:	40010800 	.word	0x40010800

08001240 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001240:	b580      	push	{r7, lr}
 8001242:	b088      	sub	sp, #32
 8001244:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001246:	f107 0310 	add.w	r3, r7, #16
 800124a:	2200      	movs	r2, #0
 800124c:	601a      	str	r2, [r3, #0]
 800124e:	605a      	str	r2, [r3, #4]
 8001250:	609a      	str	r2, [r3, #8]
 8001252:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001254:	4b33      	ldr	r3, [pc, #204]	; (8001324 <MX_GPIO_Init+0xe4>)
 8001256:	699b      	ldr	r3, [r3, #24]
 8001258:	4a32      	ldr	r2, [pc, #200]	; (8001324 <MX_GPIO_Init+0xe4>)
 800125a:	f043 0320 	orr.w	r3, r3, #32
 800125e:	6193      	str	r3, [r2, #24]
 8001260:	4b30      	ldr	r3, [pc, #192]	; (8001324 <MX_GPIO_Init+0xe4>)
 8001262:	699b      	ldr	r3, [r3, #24]
 8001264:	f003 0320 	and.w	r3, r3, #32
 8001268:	60fb      	str	r3, [r7, #12]
 800126a:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800126c:	4b2d      	ldr	r3, [pc, #180]	; (8001324 <MX_GPIO_Init+0xe4>)
 800126e:	699b      	ldr	r3, [r3, #24]
 8001270:	4a2c      	ldr	r2, [pc, #176]	; (8001324 <MX_GPIO_Init+0xe4>)
 8001272:	f043 0304 	orr.w	r3, r3, #4
 8001276:	6193      	str	r3, [r2, #24]
 8001278:	4b2a      	ldr	r3, [pc, #168]	; (8001324 <MX_GPIO_Init+0xe4>)
 800127a:	699b      	ldr	r3, [r3, #24]
 800127c:	f003 0304 	and.w	r3, r3, #4
 8001280:	60bb      	str	r3, [r7, #8]
 8001282:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001284:	4b27      	ldr	r3, [pc, #156]	; (8001324 <MX_GPIO_Init+0xe4>)
 8001286:	699b      	ldr	r3, [r3, #24]
 8001288:	4a26      	ldr	r2, [pc, #152]	; (8001324 <MX_GPIO_Init+0xe4>)
 800128a:	f043 0308 	orr.w	r3, r3, #8
 800128e:	6193      	str	r3, [r2, #24]
 8001290:	4b24      	ldr	r3, [pc, #144]	; (8001324 <MX_GPIO_Init+0xe4>)
 8001292:	699b      	ldr	r3, [r3, #24]
 8001294:	f003 0308 	and.w	r3, r3, #8
 8001298:	607b      	str	r3, [r7, #4]
 800129a:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 800129c:	2200      	movs	r2, #0
 800129e:	2102      	movs	r1, #2
 80012a0:	4821      	ldr	r0, [pc, #132]	; (8001328 <MX_GPIO_Init+0xe8>)
 80012a2:	f001 fcf8 	bl	8002c96 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, RELAY2_Pin|RELAY1_Pin, GPIO_PIN_RESET);
 80012a6:	2200      	movs	r2, #0
 80012a8:	2118      	movs	r1, #24
 80012aa:	4820      	ldr	r0, [pc, #128]	; (800132c <MX_GPIO_Init+0xec>)
 80012ac:	f001 fcf3 	bl	8002c96 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED_Pin;
 80012b0:	2302      	movs	r3, #2
 80012b2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80012b4:	2301      	movs	r3, #1
 80012b6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012b8:	2300      	movs	r3, #0
 80012ba:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012bc:	2302      	movs	r3, #2
 80012be:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 80012c0:	f107 0310 	add.w	r3, r7, #16
 80012c4:	4619      	mov	r1, r3
 80012c6:	4818      	ldr	r0, [pc, #96]	; (8001328 <MX_GPIO_Init+0xe8>)
 80012c8:	f001 fb74 	bl	80029b4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PA15 */
  GPIO_InitStruct.Pin = SW01_Pin|STOP_BTN_Pin|GPIO_PIN_15;
 80012cc:	f248 03c0 	movw	r3, #32960	; 0x80c0
 80012d0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80012d2:	2300      	movs	r3, #0
 80012d4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012d6:	2300      	movs	r3, #0
 80012d8:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012da:	f107 0310 	add.w	r3, r7, #16
 80012de:	4619      	mov	r1, r3
 80012e0:	4811      	ldr	r0, [pc, #68]	; (8001328 <MX_GPIO_Init+0xe8>)
 80012e2:	f001 fb67 	bl	80029b4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SW02_Pin;
 80012e6:	2301      	movs	r3, #1
 80012e8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80012ea:	2300      	movs	r3, #0
 80012ec:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012ee:	2300      	movs	r3, #0
 80012f0:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(SW02_GPIO_Port, &GPIO_InitStruct);
 80012f2:	f107 0310 	add.w	r3, r7, #16
 80012f6:	4619      	mov	r1, r3
 80012f8:	480c      	ldr	r0, [pc, #48]	; (800132c <MX_GPIO_Init+0xec>)
 80012fa:	f001 fb5b 	bl	80029b4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = RELAY2_Pin|RELAY1_Pin;
 80012fe:	2318      	movs	r3, #24
 8001300:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001302:	2301      	movs	r3, #1
 8001304:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001306:	2300      	movs	r3, #0
 8001308:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800130a:	2302      	movs	r3, #2
 800130c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800130e:	f107 0310 	add.w	r3, r7, #16
 8001312:	4619      	mov	r1, r3
 8001314:	4805      	ldr	r0, [pc, #20]	; (800132c <MX_GPIO_Init+0xec>)
 8001316:	f001 fb4d 	bl	80029b4 <HAL_GPIO_Init>

}
 800131a:	bf00      	nop
 800131c:	3720      	adds	r7, #32
 800131e:	46bd      	mov	sp, r7
 8001320:	bd80      	pop	{r7, pc}
 8001322:	bf00      	nop
 8001324:	40021000 	.word	0x40021000
 8001328:	40010800 	.word	0x40010800
 800132c:	40010c00 	.word	0x40010c00

08001330 <HAL_TIM_PeriodElapsedCallback>:
  bool    motor_run_set_counter_flag=false;
  uint8_t motor_run_occord_interrupt_counter=0;


    void HAL_TIM_PeriodElapsedCallback (TIM_HandleTypeDef *htim)
    {
 8001330:	b580      	push	{r7, lr}
 8001332:	b082      	sub	sp, #8
 8001334:	af00      	add	r7, sp, #0
 8001336:	6078      	str	r0, [r7, #4]

    	if(htim->Instance==TIM2)//interrupt evry 1000ms
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	681b      	ldr	r3, [r3, #0]
 800133c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001340:	d17c      	bne.n	800143c <HAL_TIM_PeriodElapsedCallback+0x10c>
    	{

    		//--------------------------------------------------------------------------------------------
    		if(left_set_counter_flag)
 8001342:	4b40      	ldr	r3, [pc, #256]	; (8001444 <HAL_TIM_PeriodElapsedCallback+0x114>)
 8001344:	781b      	ldrb	r3, [r3, #0]
 8001346:	2b00      	cmp	r3, #0
 8001348:	d024      	beq.n	8001394 <HAL_TIM_PeriodElapsedCallback+0x64>
    		{
    			    led_toggle;
 800134a:	2102      	movs	r1, #2
 800134c:	483e      	ldr	r0, [pc, #248]	; (8001448 <HAL_TIM_PeriodElapsedCallback+0x118>)
 800134e:	f001 fcba 	bl	8002cc6 <HAL_GPIO_TogglePin>

  				left_occord_interrupt_counter++;
 8001352:	4b3e      	ldr	r3, [pc, #248]	; (800144c <HAL_TIM_PeriodElapsedCallback+0x11c>)
 8001354:	781b      	ldrb	r3, [r3, #0]
 8001356:	3301      	adds	r3, #1
 8001358:	b2da      	uxtb	r2, r3
 800135a:	4b3c      	ldr	r3, [pc, #240]	; (800144c <HAL_TIM_PeriodElapsedCallback+0x11c>)
 800135c:	701a      	strb	r2, [r3, #0]

  				if((left_occord_interrupt_counter % 2 ) ==0)//if sec= 2,4,6
 800135e:	4b3b      	ldr	r3, [pc, #236]	; (800144c <HAL_TIM_PeriodElapsedCallback+0x11c>)
 8001360:	781b      	ldrb	r3, [r3, #0]
 8001362:	f003 0301 	and.w	r3, r3, #1
 8001366:	b2db      	uxtb	r3, r3
 8001368:	2b00      	cmp	r3, #0
 800136a:	d103      	bne.n	8001374 <HAL_TIM_PeriodElapsedCallback+0x44>
  				{
  					motor_fanction(stop);
 800136c:	2003      	movs	r0, #3
 800136e:	f000 fac7 	bl	8001900 <motor_fanction>
 8001372:	e002      	b.n	800137a <HAL_TIM_PeriodElapsedCallback+0x4a>
  				}
  				else//if sec= 1,3,5 // first run
  				{
  					motor_fanction(left);
 8001374:	2001      	movs	r0, #1
 8001376:	f000 fac3 	bl	8001900 <motor_fanction>
  				}


  				if(left_occord_interrupt_counter==6)//end of motor
 800137a:	4b34      	ldr	r3, [pc, #208]	; (800144c <HAL_TIM_PeriodElapsedCallback+0x11c>)
 800137c:	781b      	ldrb	r3, [r3, #0]
 800137e:	2b06      	cmp	r3, #6
 8001380:	d108      	bne.n	8001394 <HAL_TIM_PeriodElapsedCallback+0x64>
  				{
  					sec=0;
 8001382:	4b33      	ldr	r3, [pc, #204]	; (8001450 <HAL_TIM_PeriodElapsedCallback+0x120>)
 8001384:	2200      	movs	r2, #0
 8001386:	601a      	str	r2, [r3, #0]
  					left_occord_interrupt_counter=0;
 8001388:	4b30      	ldr	r3, [pc, #192]	; (800144c <HAL_TIM_PeriodElapsedCallback+0x11c>)
 800138a:	2200      	movs	r2, #0
 800138c:	701a      	strb	r2, [r3, #0]
  					left_set_counter_flag=false;
 800138e:	4b2d      	ldr	r3, [pc, #180]	; (8001444 <HAL_TIM_PeriodElapsedCallback+0x114>)
 8001390:	2200      	movs	r2, #0
 8001392:	701a      	strb	r2, [r3, #0]
    		 }


    		//--------------------------------------------- right fanction -------------------------

    		if(right_set_counter_flag)
 8001394:	4b2f      	ldr	r3, [pc, #188]	; (8001454 <HAL_TIM_PeriodElapsedCallback+0x124>)
 8001396:	781b      	ldrb	r3, [r3, #0]
 8001398:	2b00      	cmp	r3, #0
 800139a:	d024      	beq.n	80013e6 <HAL_TIM_PeriodElapsedCallback+0xb6>
    	    {
  			   led_toggle;
 800139c:	2102      	movs	r1, #2
 800139e:	482a      	ldr	r0, [pc, #168]	; (8001448 <HAL_TIM_PeriodElapsedCallback+0x118>)
 80013a0:	f001 fc91 	bl	8002cc6 <HAL_GPIO_TogglePin>
  				right_occord_interrupt_counter++;
 80013a4:	4b2c      	ldr	r3, [pc, #176]	; (8001458 <HAL_TIM_PeriodElapsedCallback+0x128>)
 80013a6:	781b      	ldrb	r3, [r3, #0]
 80013a8:	3301      	adds	r3, #1
 80013aa:	b2da      	uxtb	r2, r3
 80013ac:	4b2a      	ldr	r3, [pc, #168]	; (8001458 <HAL_TIM_PeriodElapsedCallback+0x128>)
 80013ae:	701a      	strb	r2, [r3, #0]

  				if((right_occord_interrupt_counter % 2 ) ==0)//if sec= 2,4,6
 80013b0:	4b29      	ldr	r3, [pc, #164]	; (8001458 <HAL_TIM_PeriodElapsedCallback+0x128>)
 80013b2:	781b      	ldrb	r3, [r3, #0]
 80013b4:	f003 0301 	and.w	r3, r3, #1
 80013b8:	b2db      	uxtb	r3, r3
 80013ba:	2b00      	cmp	r3, #0
 80013bc:	d103      	bne.n	80013c6 <HAL_TIM_PeriodElapsedCallback+0x96>
  				{
  					motor_fanction(stop);
 80013be:	2003      	movs	r0, #3
 80013c0:	f000 fa9e 	bl	8001900 <motor_fanction>
 80013c4:	e002      	b.n	80013cc <HAL_TIM_PeriodElapsedCallback+0x9c>
  				}
  				else//if sec= 1,3,5 // first run
  				{
  					motor_fanction(right);
 80013c6:	2002      	movs	r0, #2
 80013c8:	f000 fa9a 	bl	8001900 <motor_fanction>
  				}


  				if(right_occord_interrupt_counter==6)//end of motor
 80013cc:	4b22      	ldr	r3, [pc, #136]	; (8001458 <HAL_TIM_PeriodElapsedCallback+0x128>)
 80013ce:	781b      	ldrb	r3, [r3, #0]
 80013d0:	2b06      	cmp	r3, #6
 80013d2:	d108      	bne.n	80013e6 <HAL_TIM_PeriodElapsedCallback+0xb6>
  				{
  					sec=0;
 80013d4:	4b1e      	ldr	r3, [pc, #120]	; (8001450 <HAL_TIM_PeriodElapsedCallback+0x120>)
 80013d6:	2200      	movs	r2, #0
 80013d8:	601a      	str	r2, [r3, #0]
  					right_occord_interrupt_counter=0;
 80013da:	4b1f      	ldr	r3, [pc, #124]	; (8001458 <HAL_TIM_PeriodElapsedCallback+0x128>)
 80013dc:	2200      	movs	r2, #0
 80013de:	701a      	strb	r2, [r3, #0]
  					right_set_counter_flag=false;
 80013e0:	4b1c      	ldr	r3, [pc, #112]	; (8001454 <HAL_TIM_PeriodElapsedCallback+0x124>)
 80013e2:	2200      	movs	r2, #0
 80013e4:	701a      	strb	r2, [r3, #0]
  		 }

    		//------------------------------------------------------------------------------------------------------


    		if(motor_run_set_counter_flag)
 80013e6:	4b1d      	ldr	r3, [pc, #116]	; (800145c <HAL_TIM_PeriodElapsedCallback+0x12c>)
 80013e8:	781b      	ldrb	r3, [r3, #0]
 80013ea:	2b00      	cmp	r3, #0
 80013ec:	d026      	beq.n	800143c <HAL_TIM_PeriodElapsedCallback+0x10c>
    		  		{
    		  			    led_toggle;
 80013ee:	2102      	movs	r1, #2
 80013f0:	4815      	ldr	r0, [pc, #84]	; (8001448 <HAL_TIM_PeriodElapsedCallback+0x118>)
 80013f2:	f001 fc68 	bl	8002cc6 <HAL_GPIO_TogglePin>

    		  			    motor_run_occord_interrupt_counter++;
 80013f6:	4b1a      	ldr	r3, [pc, #104]	; (8001460 <HAL_TIM_PeriodElapsedCallback+0x130>)
 80013f8:	781b      	ldrb	r3, [r3, #0]
 80013fa:	3301      	adds	r3, #1
 80013fc:	b2da      	uxtb	r2, r3
 80013fe:	4b18      	ldr	r3, [pc, #96]	; (8001460 <HAL_TIM_PeriodElapsedCallback+0x130>)
 8001400:	701a      	strb	r2, [r3, #0]

    						if((motor_run_occord_interrupt_counter % 2 ) ==0)//if sec= 2,4,6
 8001402:	4b17      	ldr	r3, [pc, #92]	; (8001460 <HAL_TIM_PeriodElapsedCallback+0x130>)
 8001404:	781b      	ldrb	r3, [r3, #0]
 8001406:	f003 0301 	and.w	r3, r3, #1
 800140a:	b2db      	uxtb	r3, r3
 800140c:	2b00      	cmp	r3, #0
 800140e:	d103      	bne.n	8001418 <HAL_TIM_PeriodElapsedCallback+0xe8>
    						{
    							motor_fanction(right);
 8001410:	2002      	movs	r0, #2
 8001412:	f000 fa75 	bl	8001900 <motor_fanction>
 8001416:	e002      	b.n	800141e <HAL_TIM_PeriodElapsedCallback+0xee>
    						}
    						else//if sec= 1,3,5 // first run
    						{
    							motor_fanction(left);
 8001418:	2001      	movs	r0, #1
 800141a:	f000 fa71 	bl	8001900 <motor_fanction>
    						}


    						if(motor_run_occord_interrupt_counter==12)//end of motor 10 operation
 800141e:	4b10      	ldr	r3, [pc, #64]	; (8001460 <HAL_TIM_PeriodElapsedCallback+0x130>)
 8001420:	781b      	ldrb	r3, [r3, #0]
 8001422:	2b0c      	cmp	r3, #12
 8001424:	d10a      	bne.n	800143c <HAL_TIM_PeriodElapsedCallback+0x10c>
    						{

    							led_OFF;
 8001426:	2200      	movs	r2, #0
 8001428:	2102      	movs	r1, #2
 800142a:	4807      	ldr	r0, [pc, #28]	; (8001448 <HAL_TIM_PeriodElapsedCallback+0x118>)
 800142c:	f001 fc33 	bl	8002c96 <HAL_GPIO_WritePin>
    							motor_run_occord_interrupt_counter=0;
 8001430:	4b0b      	ldr	r3, [pc, #44]	; (8001460 <HAL_TIM_PeriodElapsedCallback+0x130>)
 8001432:	2200      	movs	r2, #0
 8001434:	701a      	strb	r2, [r3, #0]
    							motor_run_set_counter_flag=false;
 8001436:	4b09      	ldr	r3, [pc, #36]	; (800145c <HAL_TIM_PeriodElapsedCallback+0x12c>)
 8001438:	2200      	movs	r2, #0
 800143a:	701a      	strb	r2, [r3, #0]
    		//printf("%d\n",get_val);


    	}

    }
 800143c:	bf00      	nop
 800143e:	3708      	adds	r7, #8
 8001440:	46bd      	mov	sp, r7
 8001442:	bd80      	pop	{r7, pc}
 8001444:	20000204 	.word	0x20000204
 8001448:	40010800 	.word	0x40010800
 800144c:	20000205 	.word	0x20000205
 8001450:	20000200 	.word	0x20000200
 8001454:	20000206 	.word	0x20000206
 8001458:	20000207 	.word	0x20000207
 800145c:	20000208 	.word	0x20000208
 8001460:	20000209 	.word	0x20000209

08001464 <get_adc_raw>:
}



uint32_t get_adc_raw(int chanel)
{
 8001464:	b580      	push	{r7, lr}
 8001466:	b084      	sub	sp, #16
 8001468:	af00      	add	r7, sp, #0
 800146a:	6078      	str	r0, [r7, #4]

	uint32_t digital_result=0;
 800146c:	2300      	movs	r3, #0
 800146e:	60fb      	str	r3, [r7, #12]

	if(chanel==voltage_sensor)
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	2b01      	cmp	r3, #1
 8001474:	d118      	bne.n	80014a8 <get_adc_raw+0x44>
	{

			hadc1.Init.NbrOfConversion=1;//ch0
 8001476:	4b46      	ldr	r3, [pc, #280]	; (8001590 <get_adc_raw+0x12c>)
 8001478:	2201      	movs	r2, #1
 800147a:	611a      	str	r2, [r3, #16]
			HAL_ADC_Init(&hadc1);
 800147c:	4844      	ldr	r0, [pc, #272]	; (8001590 <get_adc_raw+0x12c>)
 800147e:	f000 fd4f 	bl	8001f20 <HAL_ADC_Init>
			HAL_ADC_Start(&hadc1);
 8001482:	4843      	ldr	r0, [pc, #268]	; (8001590 <get_adc_raw+0x12c>)
 8001484:	f000 fe24 	bl	80020d0 <HAL_ADC_Start>
			if(HAL_ADC_PollForConversion(&hadc1,500)== HAL_OK)
 8001488:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 800148c:	4840      	ldr	r0, [pc, #256]	; (8001590 <get_adc_raw+0x12c>)
 800148e:	f000 fef9 	bl	8002284 <HAL_ADC_PollForConversion>
 8001492:	4603      	mov	r3, r0
 8001494:	2b00      	cmp	r3, #0
 8001496:	d103      	bne.n	80014a0 <get_adc_raw+0x3c>
			{

			digital_result=HAL_ADC_GetValue(&hadc1);
 8001498:	483d      	ldr	r0, [pc, #244]	; (8001590 <get_adc_raw+0x12c>)
 800149a:	f000 ffed 	bl	8002478 <HAL_ADC_GetValue>
 800149e:	60f8      	str	r0, [r7, #12]

			}
			HAL_ADC_Stop(&hadc1);
 80014a0:	483b      	ldr	r0, [pc, #236]	; (8001590 <get_adc_raw+0x12c>)
 80014a2:	f000 fec3 	bl	800222c <HAL_ADC_Stop>
 80014a6:	e06e      	b.n	8001586 <get_adc_raw+0x122>


	}

	else if(chanel==voltage_lm35)//voltage_lm35
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	2b02      	cmp	r3, #2
 80014ac:	d118      	bne.n	80014e0 <get_adc_raw+0x7c>
	{

				hadc1.Init.NbrOfConversion=4;//ch1
 80014ae:	4b38      	ldr	r3, [pc, #224]	; (8001590 <get_adc_raw+0x12c>)
 80014b0:	2204      	movs	r2, #4
 80014b2:	611a      	str	r2, [r3, #16]
				HAL_ADC_Init(&hadc1);
 80014b4:	4836      	ldr	r0, [pc, #216]	; (8001590 <get_adc_raw+0x12c>)
 80014b6:	f000 fd33 	bl	8001f20 <HAL_ADC_Init>
				HAL_ADC_Start(&hadc1);
 80014ba:	4835      	ldr	r0, [pc, #212]	; (8001590 <get_adc_raw+0x12c>)
 80014bc:	f000 fe08 	bl	80020d0 <HAL_ADC_Start>
				if(HAL_ADC_PollForConversion(&hadc1,500)== HAL_OK)
 80014c0:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 80014c4:	4832      	ldr	r0, [pc, #200]	; (8001590 <get_adc_raw+0x12c>)
 80014c6:	f000 fedd 	bl	8002284 <HAL_ADC_PollForConversion>
 80014ca:	4603      	mov	r3, r0
 80014cc:	2b00      	cmp	r3, #0
 80014ce:	d103      	bne.n	80014d8 <get_adc_raw+0x74>
				{

				digital_result=HAL_ADC_GetValue(&hadc1);
 80014d0:	482f      	ldr	r0, [pc, #188]	; (8001590 <get_adc_raw+0x12c>)
 80014d2:	f000 ffd1 	bl	8002478 <HAL_ADC_GetValue>
 80014d6:	60f8      	str	r0, [r7, #12]

				}
				HAL_ADC_Stop(&hadc1);
 80014d8:	482d      	ldr	r0, [pc, #180]	; (8001590 <get_adc_raw+0x12c>)
 80014da:	f000 fea7 	bl	800222c <HAL_ADC_Stop>
 80014de:	e052      	b.n	8001586 <get_adc_raw+0x122>


	}
	else if(chanel==voltage_acs712)
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	2b03      	cmp	r3, #3
 80014e4:	d118      	bne.n	8001518 <get_adc_raw+0xb4>
		{

				hadc1.Init.NbrOfConversion=4;//ch2
 80014e6:	4b2a      	ldr	r3, [pc, #168]	; (8001590 <get_adc_raw+0x12c>)
 80014e8:	2204      	movs	r2, #4
 80014ea:	611a      	str	r2, [r3, #16]
				HAL_ADC_Init(&hadc1);
 80014ec:	4828      	ldr	r0, [pc, #160]	; (8001590 <get_adc_raw+0x12c>)
 80014ee:	f000 fd17 	bl	8001f20 <HAL_ADC_Init>
				HAL_ADC_Start(&hadc1);
 80014f2:	4827      	ldr	r0, [pc, #156]	; (8001590 <get_adc_raw+0x12c>)
 80014f4:	f000 fdec 	bl	80020d0 <HAL_ADC_Start>
				if(HAL_ADC_PollForConversion(&hadc1,500)== HAL_OK)
 80014f8:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 80014fc:	4824      	ldr	r0, [pc, #144]	; (8001590 <get_adc_raw+0x12c>)
 80014fe:	f000 fec1 	bl	8002284 <HAL_ADC_PollForConversion>
 8001502:	4603      	mov	r3, r0
 8001504:	2b00      	cmp	r3, #0
 8001506:	d103      	bne.n	8001510 <get_adc_raw+0xac>
				{

				digital_result=HAL_ADC_GetValue(&hadc1);
 8001508:	4821      	ldr	r0, [pc, #132]	; (8001590 <get_adc_raw+0x12c>)
 800150a:	f000 ffb5 	bl	8002478 <HAL_ADC_GetValue>
 800150e:	60f8      	str	r0, [r7, #12]

				}
				HAL_ADC_Stop(&hadc1);
 8001510:	481f      	ldr	r0, [pc, #124]	; (8001590 <get_adc_raw+0x12c>)
 8001512:	f000 fe8b 	bl	800222c <HAL_ADC_Stop>
 8001516:	e036      	b.n	8001586 <get_adc_raw+0x122>


		}

	   else  if(chanel== mcu_temp)
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	2b04      	cmp	r3, #4
 800151c:	d118      	bne.n	8001550 <get_adc_raw+0xec>
		{


				hadc1.Init.NbrOfConversion=4;//ch temp
 800151e:	4b1c      	ldr	r3, [pc, #112]	; (8001590 <get_adc_raw+0x12c>)
 8001520:	2204      	movs	r2, #4
 8001522:	611a      	str	r2, [r3, #16]
				HAL_ADC_Init(&hadc1);
 8001524:	481a      	ldr	r0, [pc, #104]	; (8001590 <get_adc_raw+0x12c>)
 8001526:	f000 fcfb 	bl	8001f20 <HAL_ADC_Init>
				HAL_ADC_Start(&hadc1);
 800152a:	4819      	ldr	r0, [pc, #100]	; (8001590 <get_adc_raw+0x12c>)
 800152c:	f000 fdd0 	bl	80020d0 <HAL_ADC_Start>
				if(HAL_ADC_PollForConversion(&hadc1,500)== HAL_OK)
 8001530:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8001534:	4816      	ldr	r0, [pc, #88]	; (8001590 <get_adc_raw+0x12c>)
 8001536:	f000 fea5 	bl	8002284 <HAL_ADC_PollForConversion>
 800153a:	4603      	mov	r3, r0
 800153c:	2b00      	cmp	r3, #0
 800153e:	d103      	bne.n	8001548 <get_adc_raw+0xe4>
				{

				digital_result=HAL_ADC_GetValue(&hadc1);
 8001540:	4813      	ldr	r0, [pc, #76]	; (8001590 <get_adc_raw+0x12c>)
 8001542:	f000 ff99 	bl	8002478 <HAL_ADC_GetValue>
 8001546:	60f8      	str	r0, [r7, #12]

				}
				HAL_ADC_Stop(&hadc1);
 8001548:	4811      	ldr	r0, [pc, #68]	; (8001590 <get_adc_raw+0x12c>)
 800154a:	f000 fe6f 	bl	800222c <HAL_ADC_Stop>
 800154e:	e01a      	b.n	8001586 <get_adc_raw+0x122>

		}

	   else  if(chanel== current)
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	2b05      	cmp	r3, #5
 8001554:	d117      	bne.n	8001586 <get_adc_raw+0x122>
	  		{


	  				hadc1.Init.NbrOfConversion=2;//ch
 8001556:	4b0e      	ldr	r3, [pc, #56]	; (8001590 <get_adc_raw+0x12c>)
 8001558:	2202      	movs	r2, #2
 800155a:	611a      	str	r2, [r3, #16]
	  				HAL_ADC_Init(&hadc1);
 800155c:	480c      	ldr	r0, [pc, #48]	; (8001590 <get_adc_raw+0x12c>)
 800155e:	f000 fcdf 	bl	8001f20 <HAL_ADC_Init>
	  				HAL_ADC_Start(&hadc1);
 8001562:	480b      	ldr	r0, [pc, #44]	; (8001590 <get_adc_raw+0x12c>)
 8001564:	f000 fdb4 	bl	80020d0 <HAL_ADC_Start>
	  				if(HAL_ADC_PollForConversion(&hadc1,500)== HAL_OK)
 8001568:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 800156c:	4808      	ldr	r0, [pc, #32]	; (8001590 <get_adc_raw+0x12c>)
 800156e:	f000 fe89 	bl	8002284 <HAL_ADC_PollForConversion>
 8001572:	4603      	mov	r3, r0
 8001574:	2b00      	cmp	r3, #0
 8001576:	d103      	bne.n	8001580 <get_adc_raw+0x11c>
	  				{

	  				digital_result=HAL_ADC_GetValue(&hadc1);
 8001578:	4805      	ldr	r0, [pc, #20]	; (8001590 <get_adc_raw+0x12c>)
 800157a:	f000 ff7d 	bl	8002478 <HAL_ADC_GetValue>
 800157e:	60f8      	str	r0, [r7, #12]

	  				}
	  				HAL_ADC_Stop(&hadc1);
 8001580:	4803      	ldr	r0, [pc, #12]	; (8001590 <get_adc_raw+0x12c>)
 8001582:	f000 fe53 	bl	800222c <HAL_ADC_Stop>

	  		}

	return digital_result;
 8001586:	68fb      	ldr	r3, [r7, #12]

}
 8001588:	4618      	mov	r0, r3
 800158a:	3710      	adds	r7, #16
 800158c:	46bd      	mov	sp, r7
 800158e:	bd80      	pop	{r7, pc}
 8001590:	20000218 	.word	0x20000218

08001594 <__io_putchar>:
	#else
	#define PUTCHAR_PROTOTYPE int fputc(int ch,FILE *f)
	#endif

	PUTCHAR_PROTOTYPE
	{
 8001594:	b580      	push	{r7, lr}
 8001596:	b082      	sub	sp, #8
 8001598:	af00      	add	r7, sp, #0
 800159a:	6078      	str	r0, [r7, #4]
	 HAL_UART_Transmit(&huart1,(uint8_t*)&ch,1,100);
 800159c:	1d39      	adds	r1, r7, #4
 800159e:	2364      	movs	r3, #100	; 0x64
 80015a0:	2201      	movs	r2, #1
 80015a2:	4804      	ldr	r0, [pc, #16]	; (80015b4 <__io_putchar+0x20>)
 80015a4:	f002 fd29 	bl	8003ffa <HAL_UART_Transmit>

		return ch;
 80015a8:	687b      	ldr	r3, [r7, #4]

	}
 80015aa:	4618      	mov	r0, r3
 80015ac:	3708      	adds	r7, #8
 80015ae:	46bd      	mov	sp, r7
 80015b0:	bd80      	pop	{r7, pc}
 80015b2:	bf00      	nop
 80015b4:	20000288 	.word	0x20000288

080015b8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80015b8:	b580      	push	{r7, lr}
 80015ba:	b08a      	sub	sp, #40	; 0x28
 80015bc:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80015be:	f000 fc2b 	bl	8001e18 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80015c2:	f000 f8a1 	bl	8001708 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80015c6:	f7ff fe3b 	bl	8001240 <MX_GPIO_Init>
  MX_ADC1_Init();
 80015ca:	f7ff fda1 	bl	8001110 <MX_ADC1_Init>
  MX_USART1_UART_Init();
 80015ce:	f000 fb87 	bl	8001ce0 <MX_USART1_UART_Init>
  MX_TIM2_Init();
 80015d2:	f000 fb13 	bl	8001bfc <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */

  //printf("hiiii\n");

  uint32_t ch0_adc=0;
 80015d6:	2300      	movs	r3, #0
 80015d8:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ch1_adc=0;
 80015da:	2300      	movs	r3, #0
 80015dc:	623b      	str	r3, [r7, #32]
  uint32_t ch2_adc=0;
 80015de:	2300      	movs	r3, #0
 80015e0:	61fb      	str	r3, [r7, #28]
  uint32_t ch3_adc=0;
 80015e2:	2300      	movs	r3, #0
 80015e4:	61bb      	str	r3, [r7, #24]


  uint32_t mcu_temp_adc=0;
 80015e6:	2300      	movs	r3, #0
 80015e8:	617b      	str	r3, [r7, #20]

  float milivolt0=0.0;
 80015ea:	f04f 0300 	mov.w	r3, #0
 80015ee:	613b      	str	r3, [r7, #16]
  float milivolt1=0.0;
 80015f0:	f04f 0300 	mov.w	r3, #0
 80015f4:	60fb      	str	r3, [r7, #12]
  float milivolt2=0.0;
 80015f6:	f04f 0300 	mov.w	r3, #0
 80015fa:	60bb      	str	r3, [r7, #8]
  float temp=0.0;
 80015fc:	f04f 0300 	mov.w	r3, #0
 8001600:	607b      	str	r3, [r7, #4]




  HAL_TIM_Base_Start_IT(&htim2);
 8001602:	483b      	ldr	r0, [pc, #236]	; (80016f0 <main+0x138>)
 8001604:	f002 f957 	bl	80038b6 <HAL_TIM_Base_Start_IT>
 // relay1_off;
 // relay2_off;



     if(!stop_btn)
 8001608:	2180      	movs	r1, #128	; 0x80
 800160a:	483a      	ldr	r0, [pc, #232]	; (80016f4 <main+0x13c>)
 800160c:	f001 fb2c 	bl	8002c68 <HAL_GPIO_ReadPin>
 8001610:	4603      	mov	r3, r0
 8001612:	2b00      	cmp	r3, #0
 8001614:	d107      	bne.n	8001626 <main+0x6e>
 	 {

 	   //offsetVoltage = read_adc1(ACS712_CHANNEL);
 	   printf("ofset=%d\n",  read_adc1(ACS712_CHANNEL)  );
 8001616:	2004      	movs	r0, #4
 8001618:	f000 f946 	bl	80018a8 <read_adc1>
 800161c:	4603      	mov	r3, r0
 800161e:	4619      	mov	r1, r3
 8001620:	4835      	ldr	r0, [pc, #212]	; (80016f8 <main+0x140>)
 8001622:	f003 fd09 	bl	8005038 <iprintf>
//	  	   printf("mcu_temp=%4.2f\n", temp);//mcu temp
//	  	   printf("PA4-RAW=%d,MV:%4.2f\n\n\n", ch3_adc, milivolt2   );

//####################################################################################################

	  	       if(!left_btn)
 8001626:	2140      	movs	r1, #64	; 0x40
 8001628:	4832      	ldr	r0, [pc, #200]	; (80016f4 <main+0x13c>)
 800162a:	f001 fb1d 	bl	8002c68 <HAL_GPIO_ReadPin>
 800162e:	4603      	mov	r3, r0
 8001630:	2b00      	cmp	r3, #0
 8001632:	d122      	bne.n	800167a <main+0xc2>
	  	 		{
	  	 			//------------ stop auto motor------------------------------------
	  	 			motor_fanction(stop);
 8001634:	2003      	movs	r0, #3
 8001636:	f000 f963 	bl	8001900 <motor_fanction>
	  	 			motor_run_occord_interrupt_counter=0;
 800163a:	4b30      	ldr	r3, [pc, #192]	; (80016fc <main+0x144>)
 800163c:	2200      	movs	r2, #0
 800163e:	701a      	strb	r2, [r3, #0]
	  	 			motor_run_set_counter_flag=false;
 8001640:	4b2f      	ldr	r3, [pc, #188]	; (8001700 <main+0x148>)
 8001642:	2200      	movs	r2, #0
 8001644:	701a      	strb	r2, [r3, #0]
	  	 			//--------------------------------------------------

	  	 			led_ON;
 8001646:	2201      	movs	r2, #1
 8001648:	2102      	movs	r1, #2
 800164a:	482a      	ldr	r0, [pc, #168]	; (80016f4 <main+0x13c>)
 800164c:	f001 fb23 	bl	8002c96 <HAL_GPIO_WritePin>
	  	 			motor_fanction(left);
 8001650:	2001      	movs	r0, #1
 8001652:	f000 f955 	bl	8001900 <motor_fanction>

	  	 			while(!left_btn)
 8001656:	e001      	b.n	800165c <main+0xa4>
	  	 			{
	  	 				get_current_and_send();
 8001658:	f000 f8b6 	bl	80017c8 <get_current_and_send>
	  	 			while(!left_btn)
 800165c:	2140      	movs	r1, #64	; 0x40
 800165e:	4825      	ldr	r0, [pc, #148]	; (80016f4 <main+0x13c>)
 8001660:	f001 fb02 	bl	8002c68 <HAL_GPIO_ReadPin>
 8001664:	4603      	mov	r3, r0
 8001666:	2b00      	cmp	r3, #0
 8001668:	d0f6      	beq.n	8001658 <main+0xa0>
	  	 			}
	  	 			motor_fanction(stop);
 800166a:	2003      	movs	r0, #3
 800166c:	f000 f948 	bl	8001900 <motor_fanction>
	  	 			led_OFF;
 8001670:	2200      	movs	r2, #0
 8001672:	2102      	movs	r1, #2
 8001674:	481f      	ldr	r0, [pc, #124]	; (80016f4 <main+0x13c>)
 8001676:	f001 fb0e 	bl	8002c96 <HAL_GPIO_WritePin>
	  	 		}




	  	 		if(!right_btn)
 800167a:	2101      	movs	r1, #1
 800167c:	4821      	ldr	r0, [pc, #132]	; (8001704 <main+0x14c>)
 800167e:	f001 faf3 	bl	8002c68 <HAL_GPIO_ReadPin>
 8001682:	4603      	mov	r3, r0
 8001684:	2b00      	cmp	r3, #0
 8001686:	d122      	bne.n	80016ce <main+0x116>
	  	 		{
	  	 			//------------ stop auto motor------------------------------------
	  	 			motor_fanction(stop);
 8001688:	2003      	movs	r0, #3
 800168a:	f000 f939 	bl	8001900 <motor_fanction>
	  	 			motor_run_occord_interrupt_counter=0;
 800168e:	4b1b      	ldr	r3, [pc, #108]	; (80016fc <main+0x144>)
 8001690:	2200      	movs	r2, #0
 8001692:	701a      	strb	r2, [r3, #0]
	  	 			motor_run_set_counter_flag=false;
 8001694:	4b1a      	ldr	r3, [pc, #104]	; (8001700 <main+0x148>)
 8001696:	2200      	movs	r2, #0
 8001698:	701a      	strb	r2, [r3, #0]
	  	 			//--------------------------------------------------

	  	 			led_ON;
 800169a:	2201      	movs	r2, #1
 800169c:	2102      	movs	r1, #2
 800169e:	4815      	ldr	r0, [pc, #84]	; (80016f4 <main+0x13c>)
 80016a0:	f001 faf9 	bl	8002c96 <HAL_GPIO_WritePin>
	  	 			motor_fanction(right);
 80016a4:	2002      	movs	r0, #2
 80016a6:	f000 f92b 	bl	8001900 <motor_fanction>
	  	 			while(!right_btn)
 80016aa:	e001      	b.n	80016b0 <main+0xf8>
	  	 			{
	  	 				get_current_and_send();
 80016ac:	f000 f88c 	bl	80017c8 <get_current_and_send>
	  	 			while(!right_btn)
 80016b0:	2101      	movs	r1, #1
 80016b2:	4814      	ldr	r0, [pc, #80]	; (8001704 <main+0x14c>)
 80016b4:	f001 fad8 	bl	8002c68 <HAL_GPIO_ReadPin>
 80016b8:	4603      	mov	r3, r0
 80016ba:	2b00      	cmp	r3, #0
 80016bc:	d0f6      	beq.n	80016ac <main+0xf4>
	  	 			}
	  	 			motor_fanction(stop);
 80016be:	2003      	movs	r0, #3
 80016c0:	f000 f91e 	bl	8001900 <motor_fanction>
	  	 			led_OFF;
 80016c4:	2200      	movs	r2, #0
 80016c6:	2102      	movs	r1, #2
 80016c8:	480a      	ldr	r0, [pc, #40]	; (80016f4 <main+0x13c>)
 80016ca:	f001 fae4 	bl	8002c96 <HAL_GPIO_WritePin>
	  	 		}

	  	 		if(!stop_btn){
 80016ce:	2180      	movs	r1, #128	; 0x80
 80016d0:	4808      	ldr	r0, [pc, #32]	; (80016f4 <main+0x13c>)
 80016d2:	f001 fac9 	bl	8002c68 <HAL_GPIO_ReadPin>
 80016d6:	4603      	mov	r3, r0
 80016d8:	2b00      	cmp	r3, #0
 80016da:	d102      	bne.n	80016e2 <main+0x12a>
	  	 			motor_run_set_counter_flag=true;
 80016dc:	4b08      	ldr	r3, [pc, #32]	; (8001700 <main+0x148>)
 80016de:	2201      	movs	r2, #1
 80016e0:	701a      	strb	r2, [r3, #0]
	  	 		}



	  	 		get_current_and_send();
 80016e2:	f000 f871 	bl	80017c8 <get_current_and_send>



//#####################################################################################################

	  	  HAL_Delay(100);
 80016e6:	2064      	movs	r0, #100	; 0x64
 80016e8:	f000 fbf8 	bl	8001edc <HAL_Delay>
	  	       if(!left_btn)
 80016ec:	e79b      	b.n	8001626 <main+0x6e>
 80016ee:	bf00      	nop
 80016f0:	20000248 	.word	0x20000248
 80016f4:	40010800 	.word	0x40010800
 80016f8:	080087b0 	.word	0x080087b0
 80016fc:	20000209 	.word	0x20000209
 8001700:	20000208 	.word	0x20000208
 8001704:	40010c00 	.word	0x40010c00

08001708 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001708:	b580      	push	{r7, lr}
 800170a:	b094      	sub	sp, #80	; 0x50
 800170c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800170e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001712:	2228      	movs	r2, #40	; 0x28
 8001714:	2100      	movs	r1, #0
 8001716:	4618      	mov	r0, r3
 8001718:	f002 fe56 	bl	80043c8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800171c:	f107 0314 	add.w	r3, r7, #20
 8001720:	2200      	movs	r2, #0
 8001722:	601a      	str	r2, [r3, #0]
 8001724:	605a      	str	r2, [r3, #4]
 8001726:	609a      	str	r2, [r3, #8]
 8001728:	60da      	str	r2, [r3, #12]
 800172a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800172c:	1d3b      	adds	r3, r7, #4
 800172e:	2200      	movs	r2, #0
 8001730:	601a      	str	r2, [r3, #0]
 8001732:	605a      	str	r2, [r3, #4]
 8001734:	609a      	str	r2, [r3, #8]
 8001736:	60da      	str	r2, [r3, #12]

  /** Initializes the CPU, AHB and APB busses clocks
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001738:	2301      	movs	r3, #1
 800173a:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800173c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001740:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8001742:	2300      	movs	r3, #0
 8001744:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001746:	2301      	movs	r3, #1
 8001748:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800174a:	2302      	movs	r3, #2
 800174c:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800174e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001752:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8001754:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8001758:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800175a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800175e:	4618      	mov	r0, r3
 8001760:	f001 faca 	bl	8002cf8 <HAL_RCC_OscConfig>
 8001764:	4603      	mov	r3, r0
 8001766:	2b00      	cmp	r3, #0
 8001768:	d001      	beq.n	800176e <SystemClock_Config+0x66>
  {
    Error_Handler();
 800176a:	f000 f911 	bl	8001990 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800176e:	230f      	movs	r3, #15
 8001770:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001772:	2302      	movs	r3, #2
 8001774:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001776:	2300      	movs	r3, #0
 8001778:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800177a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800177e:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001780:	2300      	movs	r3, #0
 8001782:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001784:	f107 0314 	add.w	r3, r7, #20
 8001788:	2102      	movs	r1, #2
 800178a:	4618      	mov	r0, r3
 800178c:	f001 fd34 	bl	80031f8 <HAL_RCC_ClockConfig>
 8001790:	4603      	mov	r3, r0
 8001792:	2b00      	cmp	r3, #0
 8001794:	d001      	beq.n	800179a <SystemClock_Config+0x92>
  {
    Error_Handler();
 8001796:	f000 f8fb 	bl	8001990 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 800179a:	2302      	movs	r3, #2
 800179c:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 800179e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80017a2:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80017a4:	1d3b      	adds	r3, r7, #4
 80017a6:	4618      	mov	r0, r3
 80017a8:	f001 fee8 	bl	800357c <HAL_RCCEx_PeriphCLKConfig>
 80017ac:	4603      	mov	r3, r0
 80017ae:	2b00      	cmp	r3, #0
 80017b0:	d001      	beq.n	80017b6 <SystemClock_Config+0xae>
  {
    Error_Handler();
 80017b2:	f000 f8ed 	bl	8001990 <Error_Handler>
  }
  /** Enables the Clock Security System
  */
  HAL_RCC_EnableCSS();
 80017b6:	f001 fe09 	bl	80033cc <HAL_RCC_EnableCSS>
}
 80017ba:	bf00      	nop
 80017bc:	3750      	adds	r7, #80	; 0x50
 80017be:	46bd      	mov	sp, r7
 80017c0:	bd80      	pop	{r7, pc}
 80017c2:	0000      	movs	r0, r0
 80017c4:	0000      	movs	r0, r0
	...

080017c8 <get_current_and_send>:

/* USER CODE BEGIN 4 */


void get_current_and_send()
{
 80017c8:	b590      	push	{r4, r7, lr}
 80017ca:	b089      	sub	sp, #36	; 0x24
 80017cc:	af00      	add	r7, sp, #0
     char buff[20];
    int adcValue= 0;
 80017ce:	2300      	movs	r3, #0
 80017d0:	61bb      	str	r3, [r7, #24]
	float adcVoltage = 0;
 80017d2:	f04f 0300 	mov.w	r3, #0
 80017d6:	617b      	str	r3, [r7, #20]
	float currentValue = 0;
 80017d8:	f04f 0300 	mov.w	r3, #0
 80017dc:	61fb      	str	r3, [r7, #28]
//	adcValue=adcValue/10;



	//adcValue = read_adc1(ACS712_CHANNEL);
	adcValue=(int) get_adc_raw(current);
 80017de:	2005      	movs	r0, #5
 80017e0:	f7ff fe40 	bl	8001464 <get_adc_raw>
 80017e4:	4603      	mov	r3, r0
 80017e6:	61bb      	str	r3, [r7, #24]
	adcVoltage =(float) (((float)adcValue / 4096.0) * 3300.0);
 80017e8:	69b8      	ldr	r0, [r7, #24]
 80017ea:	f7ff fa77 	bl	8000cdc <__aeabi_i2f>
 80017ee:	4603      	mov	r3, r0
 80017f0:	4618      	mov	r0, r3
 80017f2:	f7fe fe19 	bl	8000428 <__aeabi_f2d>
 80017f6:	f04f 0200 	mov.w	r2, #0
 80017fa:	4b27      	ldr	r3, [pc, #156]	; (8001898 <get_current_and_send+0xd0>)
 80017fc:	f7fe ff96 	bl	800072c <__aeabi_ddiv>
 8001800:	4603      	mov	r3, r0
 8001802:	460c      	mov	r4, r1
 8001804:	4618      	mov	r0, r3
 8001806:	4621      	mov	r1, r4
 8001808:	a321      	add	r3, pc, #132	; (adr r3, 8001890 <get_current_and_send+0xc8>)
 800180a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800180e:	f7fe fe63 	bl	80004d8 <__aeabi_dmul>
 8001812:	4603      	mov	r3, r0
 8001814:	460c      	mov	r4, r1
 8001816:	4618      	mov	r0, r3
 8001818:	4621      	mov	r1, r4
 800181a:	f7ff f955 	bl	8000ac8 <__aeabi_d2f>
 800181e:	4603      	mov	r3, r0
 8001820:	617b      	str	r3, [r7, #20]

	//printf("raw-val=%d,MV=%4.2f\n", adcValue , adcVoltage );



	currentValue = (  (float)adcVoltage - (float)offsetVoltage ) / (float)sensitivity ;
 8001822:	4b1e      	ldr	r3, [pc, #120]	; (800189c <get_current_and_send+0xd4>)
 8001824:	681b      	ldr	r3, [r3, #0]
 8001826:	4618      	mov	r0, r3
 8001828:	f7ff fa58 	bl	8000cdc <__aeabi_i2f>
 800182c:	4603      	mov	r3, r0
 800182e:	4619      	mov	r1, r3
 8001830:	6978      	ldr	r0, [r7, #20]
 8001832:	f7ff f99d 	bl	8000b70 <__aeabi_fsub>
 8001836:	4603      	mov	r3, r0
 8001838:	461c      	mov	r4, r3
 800183a:	4b19      	ldr	r3, [pc, #100]	; (80018a0 <get_current_and_send+0xd8>)
 800183c:	681b      	ldr	r3, [r3, #0]
 800183e:	4618      	mov	r0, r3
 8001840:	f7ff fa4c 	bl	8000cdc <__aeabi_i2f>
 8001844:	4603      	mov	r3, r0
 8001846:	4619      	mov	r1, r3
 8001848:	4620      	mov	r0, r4
 800184a:	f7ff fb4f 	bl	8000eec <__aeabi_fdiv>
 800184e:	4603      	mov	r3, r0
 8001850:	61fb      	str	r3, [r7, #28]



	if(currentValue<0)currentValue*=(-1);
 8001852:	f04f 0100 	mov.w	r1, #0
 8001856:	69f8      	ldr	r0, [r7, #28]
 8001858:	f7ff fc32 	bl	80010c0 <__aeabi_fcmplt>
 800185c:	4603      	mov	r3, r0
 800185e:	2b00      	cmp	r3, #0
 8001860:	d003      	beq.n	800186a <get_current_and_send+0xa2>
 8001862:	69fb      	ldr	r3, [r7, #28]
 8001864:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8001868:	61fb      	str	r3, [r7, #28]


	printf("%4.2f\r\n",currentValue);
 800186a:	69f8      	ldr	r0, [r7, #28]
 800186c:	f7fe fddc 	bl	8000428 <__aeabi_f2d>
 8001870:	4603      	mov	r3, r0
 8001872:	460c      	mov	r4, r1
 8001874:	461a      	mov	r2, r3
 8001876:	4623      	mov	r3, r4
 8001878:	480a      	ldr	r0, [pc, #40]	; (80018a4 <get_current_and_send+0xdc>)
 800187a:	f003 fbdd 	bl	8005038 <iprintf>
 	//printf(buff);
//	printf("\n");
//	printf("%04.2f\n",adcVoltage);
    HAL_Delay(5);
 800187e:	2005      	movs	r0, #5
 8001880:	f000 fb2c 	bl	8001edc <HAL_Delay>

}
 8001884:	bf00      	nop
 8001886:	3724      	adds	r7, #36	; 0x24
 8001888:	46bd      	mov	sp, r7
 800188a:	bd90      	pop	{r4, r7, pc}
 800188c:	f3af 8000 	nop.w
 8001890:	00000000 	.word	0x00000000
 8001894:	40a9c800 	.word	0x40a9c800
 8001898:	40b00000 	.word	0x40b00000
 800189c:	20000004 	.word	0x20000004
 80018a0:	20000000 	.word	0x20000000
 80018a4:	080087bc 	.word	0x080087bc

080018a8 <read_adc1>:




int read_adc1(uint8_t ch)
{
 80018a8:	b580      	push	{r7, lr}
 80018aa:	b084      	sub	sp, #16
 80018ac:	af00      	add	r7, sp, #0
 80018ae:	4603      	mov	r3, r0
 80018b0:	71fb      	strb	r3, [r7, #7]

    int raw_val=0;
 80018b2:	2300      	movs	r3, #0
 80018b4:	60fb      	str	r3, [r7, #12]

	if(ch==ACS712_CHANNEL)
 80018b6:	79fb      	ldrb	r3, [r7, #7]
 80018b8:	2b04      	cmp	r3, #4
 80018ba:	d11a      	bne.n	80018f2 <read_adc1+0x4a>
	{

		hadc1.Init.NbrOfDiscConversion=2;
 80018bc:	4b0f      	ldr	r3, [pc, #60]	; (80018fc <read_adc1+0x54>)
 80018be:	2202      	movs	r2, #2
 80018c0:	619a      	str	r2, [r3, #24]
		HAL_ADC_Init(&hadc1);
 80018c2:	480e      	ldr	r0, [pc, #56]	; (80018fc <read_adc1+0x54>)
 80018c4:	f000 fb2c 	bl	8001f20 <HAL_ADC_Init>
		HAL_ADC_Start(&hadc1);
 80018c8:	480c      	ldr	r0, [pc, #48]	; (80018fc <read_adc1+0x54>)
 80018ca:	f000 fc01 	bl	80020d0 <HAL_ADC_Start>
		 HAL_Delay(5);
 80018ce:	2005      	movs	r0, #5
 80018d0:	f000 fb04 	bl	8001edc <HAL_Delay>

		//while( HAL_ADC_PollForConversion(&hadc1,100)!=HAL_OK ){}


				if(HAL_ADC_PollForConversion(&hadc1,100)==HAL_OK)
 80018d4:	2164      	movs	r1, #100	; 0x64
 80018d6:	4809      	ldr	r0, [pc, #36]	; (80018fc <read_adc1+0x54>)
 80018d8:	f000 fcd4 	bl	8002284 <HAL_ADC_PollForConversion>
 80018dc:	4603      	mov	r3, r0
 80018de:	2b00      	cmp	r3, #0
 80018e0:	d104      	bne.n	80018ec <read_adc1+0x44>
				{

					    raw_val=HAL_ADC_GetValue(&hadc1);
 80018e2:	4806      	ldr	r0, [pc, #24]	; (80018fc <read_adc1+0x54>)
 80018e4:	f000 fdc8 	bl	8002478 <HAL_ADC_GetValue>
 80018e8:	4603      	mov	r3, r0
 80018ea:	60fb      	str	r3, [r7, #12]
	//                  HAL_Delay(10);



				}
		HAL_ADC_Stop(&hadc1);
 80018ec:	4803      	ldr	r0, [pc, #12]	; (80018fc <read_adc1+0x54>)
 80018ee:	f000 fc9d 	bl	800222c <HAL_ADC_Stop>

	}

return raw_val;
 80018f2:	68fb      	ldr	r3, [r7, #12]

}
 80018f4:	4618      	mov	r0, r3
 80018f6:	3710      	adds	r7, #16
 80018f8:	46bd      	mov	sp, r7
 80018fa:	bd80      	pop	{r7, pc}
 80018fc:	20000218 	.word	0x20000218

08001900 <motor_fanction>:

void motor_fanction(uint8_t dir)
{
 8001900:	b580      	push	{r7, lr}
 8001902:	b082      	sub	sp, #8
 8001904:	af00      	add	r7, sp, #0
 8001906:	4603      	mov	r3, r0
 8001908:	71fb      	strb	r3, [r7, #7]

	//left relay 1

		if(dir==right)
 800190a:	79fb      	ldrb	r3, [r7, #7]
 800190c:	2b02      	cmp	r3, #2
 800190e:	d114      	bne.n	800193a <motor_fanction+0x3a>
		{
			relay1_off;
 8001910:	2200      	movs	r2, #0
 8001912:	2110      	movs	r1, #16
 8001914:	481d      	ldr	r0, [pc, #116]	; (800198c <motor_fanction+0x8c>)
 8001916:	f001 f9be 	bl	8002c96 <HAL_GPIO_WritePin>
			relay1_off;
 800191a:	2200      	movs	r2, #0
 800191c:	2110      	movs	r1, #16
 800191e:	481b      	ldr	r0, [pc, #108]	; (800198c <motor_fanction+0x8c>)
 8001920:	f001 f9b9 	bl	8002c96 <HAL_GPIO_WritePin>
			relay1_off;
 8001924:	2200      	movs	r2, #0
 8001926:	2110      	movs	r1, #16
 8001928:	4818      	ldr	r0, [pc, #96]	; (800198c <motor_fanction+0x8c>)
 800192a:	f001 f9b4 	bl	8002c96 <HAL_GPIO_WritePin>


			relay2_on;
 800192e:	2201      	movs	r2, #1
 8001930:	2108      	movs	r1, #8
 8001932:	4816      	ldr	r0, [pc, #88]	; (800198c <motor_fanction+0x8c>)
 8001934:	f001 f9af 	bl	8002c96 <HAL_GPIO_WritePin>
		{
			relay1_off;
			relay2_off;
		}

}
 8001938:	e024      	b.n	8001984 <motor_fanction+0x84>
		else if(dir==left)
 800193a:	79fb      	ldrb	r3, [r7, #7]
 800193c:	2b01      	cmp	r3, #1
 800193e:	d114      	bne.n	800196a <motor_fanction+0x6a>
			relay2_off;
 8001940:	2200      	movs	r2, #0
 8001942:	2108      	movs	r1, #8
 8001944:	4811      	ldr	r0, [pc, #68]	; (800198c <motor_fanction+0x8c>)
 8001946:	f001 f9a6 	bl	8002c96 <HAL_GPIO_WritePin>
			relay2_off;
 800194a:	2200      	movs	r2, #0
 800194c:	2108      	movs	r1, #8
 800194e:	480f      	ldr	r0, [pc, #60]	; (800198c <motor_fanction+0x8c>)
 8001950:	f001 f9a1 	bl	8002c96 <HAL_GPIO_WritePin>
			relay2_off;
 8001954:	2200      	movs	r2, #0
 8001956:	2108      	movs	r1, #8
 8001958:	480c      	ldr	r0, [pc, #48]	; (800198c <motor_fanction+0x8c>)
 800195a:	f001 f99c 	bl	8002c96 <HAL_GPIO_WritePin>
			relay1_on;
 800195e:	2201      	movs	r2, #1
 8001960:	2110      	movs	r1, #16
 8001962:	480a      	ldr	r0, [pc, #40]	; (800198c <motor_fanction+0x8c>)
 8001964:	f001 f997 	bl	8002c96 <HAL_GPIO_WritePin>
}
 8001968:	e00c      	b.n	8001984 <motor_fanction+0x84>
		else if(dir==stop)
 800196a:	79fb      	ldrb	r3, [r7, #7]
 800196c:	2b03      	cmp	r3, #3
 800196e:	d109      	bne.n	8001984 <motor_fanction+0x84>
			relay1_off;
 8001970:	2200      	movs	r2, #0
 8001972:	2110      	movs	r1, #16
 8001974:	4805      	ldr	r0, [pc, #20]	; (800198c <motor_fanction+0x8c>)
 8001976:	f001 f98e 	bl	8002c96 <HAL_GPIO_WritePin>
			relay2_off;
 800197a:	2200      	movs	r2, #0
 800197c:	2108      	movs	r1, #8
 800197e:	4803      	ldr	r0, [pc, #12]	; (800198c <motor_fanction+0x8c>)
 8001980:	f001 f989 	bl	8002c96 <HAL_GPIO_WritePin>
}
 8001984:	bf00      	nop
 8001986:	3708      	adds	r7, #8
 8001988:	46bd      	mov	sp, r7
 800198a:	bd80      	pop	{r7, pc}
 800198c:	40010c00 	.word	0x40010c00

08001990 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001990:	b480      	push	{r7}
 8001992:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8001994:	bf00      	nop
 8001996:	46bd      	mov	sp, r7
 8001998:	bc80      	pop	{r7}
 800199a:	4770      	bx	lr

0800199c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800199c:	b480      	push	{r7}
 800199e:	b085      	sub	sp, #20
 80019a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80019a2:	4b15      	ldr	r3, [pc, #84]	; (80019f8 <HAL_MspInit+0x5c>)
 80019a4:	699b      	ldr	r3, [r3, #24]
 80019a6:	4a14      	ldr	r2, [pc, #80]	; (80019f8 <HAL_MspInit+0x5c>)
 80019a8:	f043 0301 	orr.w	r3, r3, #1
 80019ac:	6193      	str	r3, [r2, #24]
 80019ae:	4b12      	ldr	r3, [pc, #72]	; (80019f8 <HAL_MspInit+0x5c>)
 80019b0:	699b      	ldr	r3, [r3, #24]
 80019b2:	f003 0301 	and.w	r3, r3, #1
 80019b6:	60bb      	str	r3, [r7, #8]
 80019b8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80019ba:	4b0f      	ldr	r3, [pc, #60]	; (80019f8 <HAL_MspInit+0x5c>)
 80019bc:	69db      	ldr	r3, [r3, #28]
 80019be:	4a0e      	ldr	r2, [pc, #56]	; (80019f8 <HAL_MspInit+0x5c>)
 80019c0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80019c4:	61d3      	str	r3, [r2, #28]
 80019c6:	4b0c      	ldr	r3, [pc, #48]	; (80019f8 <HAL_MspInit+0x5c>)
 80019c8:	69db      	ldr	r3, [r3, #28]
 80019ca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80019ce:	607b      	str	r3, [r7, #4]
 80019d0:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80019d2:	4b0a      	ldr	r3, [pc, #40]	; (80019fc <HAL_MspInit+0x60>)
 80019d4:	685b      	ldr	r3, [r3, #4]
 80019d6:	60fb      	str	r3, [r7, #12]
 80019d8:	68fb      	ldr	r3, [r7, #12]
 80019da:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80019de:	60fb      	str	r3, [r7, #12]
 80019e0:	68fb      	ldr	r3, [r7, #12]
 80019e2:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80019e6:	60fb      	str	r3, [r7, #12]
 80019e8:	4a04      	ldr	r2, [pc, #16]	; (80019fc <HAL_MspInit+0x60>)
 80019ea:	68fb      	ldr	r3, [r7, #12]
 80019ec:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80019ee:	bf00      	nop
 80019f0:	3714      	adds	r7, #20
 80019f2:	46bd      	mov	sp, r7
 80019f4:	bc80      	pop	{r7}
 80019f6:	4770      	bx	lr
 80019f8:	40021000 	.word	0x40021000
 80019fc:	40010000 	.word	0x40010000

08001a00 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001a00:	b580      	push	{r7, lr}
 8001a02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  HAL_RCC_NMI_IRQHandler();
 8001a04:	f001 fd82 	bl	800350c <HAL_RCC_NMI_IRQHandler>
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001a08:	bf00      	nop
 8001a0a:	bd80      	pop	{r7, pc}

08001a0c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001a0c:	b480      	push	{r7}
 8001a0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001a10:	e7fe      	b.n	8001a10 <HardFault_Handler+0x4>

08001a12 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001a12:	b480      	push	{r7}
 8001a14:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001a16:	e7fe      	b.n	8001a16 <MemManage_Handler+0x4>

08001a18 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001a18:	b480      	push	{r7}
 8001a1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001a1c:	e7fe      	b.n	8001a1c <BusFault_Handler+0x4>

08001a1e <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001a1e:	b480      	push	{r7}
 8001a20:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001a22:	e7fe      	b.n	8001a22 <UsageFault_Handler+0x4>

08001a24 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001a24:	b480      	push	{r7}
 8001a26:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001a28:	bf00      	nop
 8001a2a:	46bd      	mov	sp, r7
 8001a2c:	bc80      	pop	{r7}
 8001a2e:	4770      	bx	lr

08001a30 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001a30:	b480      	push	{r7}
 8001a32:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001a34:	bf00      	nop
 8001a36:	46bd      	mov	sp, r7
 8001a38:	bc80      	pop	{r7}
 8001a3a:	4770      	bx	lr

08001a3c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001a3c:	b480      	push	{r7}
 8001a3e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001a40:	bf00      	nop
 8001a42:	46bd      	mov	sp, r7
 8001a44:	bc80      	pop	{r7}
 8001a46:	4770      	bx	lr

08001a48 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001a48:	b580      	push	{r7, lr}
 8001a4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001a4c:	f000 fa2a 	bl	8001ea4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001a50:	bf00      	nop
 8001a52:	bd80      	pop	{r7, pc}

08001a54 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001a54:	b580      	push	{r7, lr}
 8001a56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001a58:	4802      	ldr	r0, [pc, #8]	; (8001a64 <TIM2_IRQHandler+0x10>)
 8001a5a:	f001 ff4f 	bl	80038fc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001a5e:	bf00      	nop
 8001a60:	bd80      	pop	{r7, pc}
 8001a62:	bf00      	nop
 8001a64:	20000248 	.word	0x20000248

08001a68 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001a68:	b580      	push	{r7, lr}
 8001a6a:	b086      	sub	sp, #24
 8001a6c:	af00      	add	r7, sp, #0
 8001a6e:	60f8      	str	r0, [r7, #12]
 8001a70:	60b9      	str	r1, [r7, #8]
 8001a72:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001a74:	2300      	movs	r3, #0
 8001a76:	617b      	str	r3, [r7, #20]
 8001a78:	e00a      	b.n	8001a90 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001a7a:	f3af 8000 	nop.w
 8001a7e:	4601      	mov	r1, r0
 8001a80:	68bb      	ldr	r3, [r7, #8]
 8001a82:	1c5a      	adds	r2, r3, #1
 8001a84:	60ba      	str	r2, [r7, #8]
 8001a86:	b2ca      	uxtb	r2, r1
 8001a88:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001a8a:	697b      	ldr	r3, [r7, #20]
 8001a8c:	3301      	adds	r3, #1
 8001a8e:	617b      	str	r3, [r7, #20]
 8001a90:	697a      	ldr	r2, [r7, #20]
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	429a      	cmp	r2, r3
 8001a96:	dbf0      	blt.n	8001a7a <_read+0x12>
	}

return len;
 8001a98:	687b      	ldr	r3, [r7, #4]
}
 8001a9a:	4618      	mov	r0, r3
 8001a9c:	3718      	adds	r7, #24
 8001a9e:	46bd      	mov	sp, r7
 8001aa0:	bd80      	pop	{r7, pc}

08001aa2 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001aa2:	b580      	push	{r7, lr}
 8001aa4:	b086      	sub	sp, #24
 8001aa6:	af00      	add	r7, sp, #0
 8001aa8:	60f8      	str	r0, [r7, #12]
 8001aaa:	60b9      	str	r1, [r7, #8]
 8001aac:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001aae:	2300      	movs	r3, #0
 8001ab0:	617b      	str	r3, [r7, #20]
 8001ab2:	e009      	b.n	8001ac8 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001ab4:	68bb      	ldr	r3, [r7, #8]
 8001ab6:	1c5a      	adds	r2, r3, #1
 8001ab8:	60ba      	str	r2, [r7, #8]
 8001aba:	781b      	ldrb	r3, [r3, #0]
 8001abc:	4618      	mov	r0, r3
 8001abe:	f7ff fd69 	bl	8001594 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001ac2:	697b      	ldr	r3, [r7, #20]
 8001ac4:	3301      	adds	r3, #1
 8001ac6:	617b      	str	r3, [r7, #20]
 8001ac8:	697a      	ldr	r2, [r7, #20]
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	429a      	cmp	r2, r3
 8001ace:	dbf1      	blt.n	8001ab4 <_write+0x12>
	}
	return len;
 8001ad0:	687b      	ldr	r3, [r7, #4]
}
 8001ad2:	4618      	mov	r0, r3
 8001ad4:	3718      	adds	r7, #24
 8001ad6:	46bd      	mov	sp, r7
 8001ad8:	bd80      	pop	{r7, pc}

08001ada <_close>:

int _close(int file)
{
 8001ada:	b480      	push	{r7}
 8001adc:	b083      	sub	sp, #12
 8001ade:	af00      	add	r7, sp, #0
 8001ae0:	6078      	str	r0, [r7, #4]
	return -1;
 8001ae2:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001ae6:	4618      	mov	r0, r3
 8001ae8:	370c      	adds	r7, #12
 8001aea:	46bd      	mov	sp, r7
 8001aec:	bc80      	pop	{r7}
 8001aee:	4770      	bx	lr

08001af0 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001af0:	b480      	push	{r7}
 8001af2:	b083      	sub	sp, #12
 8001af4:	af00      	add	r7, sp, #0
 8001af6:	6078      	str	r0, [r7, #4]
 8001af8:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001afa:	683b      	ldr	r3, [r7, #0]
 8001afc:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001b00:	605a      	str	r2, [r3, #4]
	return 0;
 8001b02:	2300      	movs	r3, #0
}
 8001b04:	4618      	mov	r0, r3
 8001b06:	370c      	adds	r7, #12
 8001b08:	46bd      	mov	sp, r7
 8001b0a:	bc80      	pop	{r7}
 8001b0c:	4770      	bx	lr

08001b0e <_isatty>:

int _isatty(int file)
{
 8001b0e:	b480      	push	{r7}
 8001b10:	b083      	sub	sp, #12
 8001b12:	af00      	add	r7, sp, #0
 8001b14:	6078      	str	r0, [r7, #4]
	return 1;
 8001b16:	2301      	movs	r3, #1
}
 8001b18:	4618      	mov	r0, r3
 8001b1a:	370c      	adds	r7, #12
 8001b1c:	46bd      	mov	sp, r7
 8001b1e:	bc80      	pop	{r7}
 8001b20:	4770      	bx	lr

08001b22 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001b22:	b480      	push	{r7}
 8001b24:	b085      	sub	sp, #20
 8001b26:	af00      	add	r7, sp, #0
 8001b28:	60f8      	str	r0, [r7, #12]
 8001b2a:	60b9      	str	r1, [r7, #8]
 8001b2c:	607a      	str	r2, [r7, #4]
	return 0;
 8001b2e:	2300      	movs	r3, #0
}
 8001b30:	4618      	mov	r0, r3
 8001b32:	3714      	adds	r7, #20
 8001b34:	46bd      	mov	sp, r7
 8001b36:	bc80      	pop	{r7}
 8001b38:	4770      	bx	lr
	...

08001b3c <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8001b3c:	b580      	push	{r7, lr}
 8001b3e:	b084      	sub	sp, #16
 8001b40:	af00      	add	r7, sp, #0
 8001b42:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8001b44:	4b11      	ldr	r3, [pc, #68]	; (8001b8c <_sbrk+0x50>)
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	2b00      	cmp	r3, #0
 8001b4a:	d102      	bne.n	8001b52 <_sbrk+0x16>
		heap_end = &end;
 8001b4c:	4b0f      	ldr	r3, [pc, #60]	; (8001b8c <_sbrk+0x50>)
 8001b4e:	4a10      	ldr	r2, [pc, #64]	; (8001b90 <_sbrk+0x54>)
 8001b50:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8001b52:	4b0e      	ldr	r3, [pc, #56]	; (8001b8c <_sbrk+0x50>)
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8001b58:	4b0c      	ldr	r3, [pc, #48]	; (8001b8c <_sbrk+0x50>)
 8001b5a:	681a      	ldr	r2, [r3, #0]
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	4413      	add	r3, r2
 8001b60:	466a      	mov	r2, sp
 8001b62:	4293      	cmp	r3, r2
 8001b64:	d907      	bls.n	8001b76 <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8001b66:	f002 fc05 	bl	8004374 <__errno>
 8001b6a:	4602      	mov	r2, r0
 8001b6c:	230c      	movs	r3, #12
 8001b6e:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8001b70:	f04f 33ff 	mov.w	r3, #4294967295
 8001b74:	e006      	b.n	8001b84 <_sbrk+0x48>
	}

	heap_end += incr;
 8001b76:	4b05      	ldr	r3, [pc, #20]	; (8001b8c <_sbrk+0x50>)
 8001b78:	681a      	ldr	r2, [r3, #0]
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	4413      	add	r3, r2
 8001b7e:	4a03      	ldr	r2, [pc, #12]	; (8001b8c <_sbrk+0x50>)
 8001b80:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8001b82:	68fb      	ldr	r3, [r7, #12]
}
 8001b84:	4618      	mov	r0, r3
 8001b86:	3710      	adds	r7, #16
 8001b88:	46bd      	mov	sp, r7
 8001b8a:	bd80      	pop	{r7, pc}
 8001b8c:	2000020c 	.word	0x2000020c
 8001b90:	200002d0 	.word	0x200002d0

08001b94 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001b94:	b480      	push	{r7}
 8001b96:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 8001b98:	4b15      	ldr	r3, [pc, #84]	; (8001bf0 <SystemInit+0x5c>)
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	4a14      	ldr	r2, [pc, #80]	; (8001bf0 <SystemInit+0x5c>)
 8001b9e:	f043 0301 	orr.w	r3, r3, #1
 8001ba2:	6013      	str	r3, [r2, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
 8001ba4:	4b12      	ldr	r3, [pc, #72]	; (8001bf0 <SystemInit+0x5c>)
 8001ba6:	685a      	ldr	r2, [r3, #4]
 8001ba8:	4911      	ldr	r1, [pc, #68]	; (8001bf0 <SystemInit+0x5c>)
 8001baa:	4b12      	ldr	r3, [pc, #72]	; (8001bf4 <SystemInit+0x60>)
 8001bac:	4013      	ands	r3, r2
 8001bae:	604b      	str	r3, [r1, #4]
#else
  RCC->CFGR &= 0xF0FF0000U;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 8001bb0:	4b0f      	ldr	r3, [pc, #60]	; (8001bf0 <SystemInit+0x5c>)
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	4a0e      	ldr	r2, [pc, #56]	; (8001bf0 <SystemInit+0x5c>)
 8001bb6:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8001bba:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001bbe:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001bc0:	4b0b      	ldr	r3, [pc, #44]	; (8001bf0 <SystemInit+0x5c>)
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	4a0a      	ldr	r2, [pc, #40]	; (8001bf0 <SystemInit+0x5c>)
 8001bc6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001bca:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 8001bcc:	4b08      	ldr	r3, [pc, #32]	; (8001bf0 <SystemInit+0x5c>)
 8001bce:	685b      	ldr	r3, [r3, #4]
 8001bd0:	4a07      	ldr	r2, [pc, #28]	; (8001bf0 <SystemInit+0x5c>)
 8001bd2:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 8001bd6:	6053      	str	r3, [r2, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 8001bd8:	4b05      	ldr	r3, [pc, #20]	; (8001bf0 <SystemInit+0x5c>)
 8001bda:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 8001bde:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 8001be0:	4b05      	ldr	r3, [pc, #20]	; (8001bf8 <SystemInit+0x64>)
 8001be2:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001be6:	609a      	str	r2, [r3, #8]
#endif 
}
 8001be8:	bf00      	nop
 8001bea:	46bd      	mov	sp, r7
 8001bec:	bc80      	pop	{r7}
 8001bee:	4770      	bx	lr
 8001bf0:	40021000 	.word	0x40021000
 8001bf4:	f8ff0000 	.word	0xf8ff0000
 8001bf8:	e000ed00 	.word	0xe000ed00

08001bfc <MX_TIM2_Init>:

TIM_HandleTypeDef htim2;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8001bfc:	b580      	push	{r7, lr}
 8001bfe:	b086      	sub	sp, #24
 8001c00:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001c02:	f107 0308 	add.w	r3, r7, #8
 8001c06:	2200      	movs	r2, #0
 8001c08:	601a      	str	r2, [r3, #0]
 8001c0a:	605a      	str	r2, [r3, #4]
 8001c0c:	609a      	str	r2, [r3, #8]
 8001c0e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001c10:	463b      	mov	r3, r7
 8001c12:	2200      	movs	r2, #0
 8001c14:	601a      	str	r2, [r3, #0]
 8001c16:	605a      	str	r2, [r3, #4]

  htim2.Instance = TIM2;
 8001c18:	4b1e      	ldr	r3, [pc, #120]	; (8001c94 <MX_TIM2_Init+0x98>)
 8001c1a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001c1e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 16000-1;
 8001c20:	4b1c      	ldr	r3, [pc, #112]	; (8001c94 <MX_TIM2_Init+0x98>)
 8001c22:	f643 627f 	movw	r2, #15999	; 0x3e7f
 8001c26:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001c28:	4b1a      	ldr	r3, [pc, #104]	; (8001c94 <MX_TIM2_Init+0x98>)
 8001c2a:	2200      	movs	r2, #0
 8001c2c:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 7000-1;
 8001c2e:	4b19      	ldr	r3, [pc, #100]	; (8001c94 <MX_TIM2_Init+0x98>)
 8001c30:	f641 3257 	movw	r2, #6999	; 0x1b57
 8001c34:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001c36:	4b17      	ldr	r3, [pc, #92]	; (8001c94 <MX_TIM2_Init+0x98>)
 8001c38:	2200      	movs	r2, #0
 8001c3a:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001c3c:	4b15      	ldr	r3, [pc, #84]	; (8001c94 <MX_TIM2_Init+0x98>)
 8001c3e:	2200      	movs	r2, #0
 8001c40:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001c42:	4814      	ldr	r0, [pc, #80]	; (8001c94 <MX_TIM2_Init+0x98>)
 8001c44:	f001 fe0c 	bl	8003860 <HAL_TIM_Base_Init>
 8001c48:	4603      	mov	r3, r0
 8001c4a:	2b00      	cmp	r3, #0
 8001c4c:	d001      	beq.n	8001c52 <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8001c4e:	f7ff fe9f 	bl	8001990 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001c52:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001c56:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001c58:	f107 0308 	add.w	r3, r7, #8
 8001c5c:	4619      	mov	r1, r3
 8001c5e:	480d      	ldr	r0, [pc, #52]	; (8001c94 <MX_TIM2_Init+0x98>)
 8001c60:	f001 ff54 	bl	8003b0c <HAL_TIM_ConfigClockSource>
 8001c64:	4603      	mov	r3, r0
 8001c66:	2b00      	cmp	r3, #0
 8001c68:	d001      	beq.n	8001c6e <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8001c6a:	f7ff fe91 	bl	8001990 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001c6e:	2300      	movs	r3, #0
 8001c70:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001c72:	2300      	movs	r3, #0
 8001c74:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001c76:	463b      	mov	r3, r7
 8001c78:	4619      	mov	r1, r3
 8001c7a:	4806      	ldr	r0, [pc, #24]	; (8001c94 <MX_TIM2_Init+0x98>)
 8001c7c:	f002 f91a 	bl	8003eb4 <HAL_TIMEx_MasterConfigSynchronization>
 8001c80:	4603      	mov	r3, r0
 8001c82:	2b00      	cmp	r3, #0
 8001c84:	d001      	beq.n	8001c8a <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8001c86:	f7ff fe83 	bl	8001990 <Error_Handler>
  }

}
 8001c8a:	bf00      	nop
 8001c8c:	3718      	adds	r7, #24
 8001c8e:	46bd      	mov	sp, r7
 8001c90:	bd80      	pop	{r7, pc}
 8001c92:	bf00      	nop
 8001c94:	20000248 	.word	0x20000248

08001c98 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001c98:	b580      	push	{r7, lr}
 8001c9a:	b084      	sub	sp, #16
 8001c9c:	af00      	add	r7, sp, #0
 8001c9e:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001ca8:	d113      	bne.n	8001cd2 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001caa:	4b0c      	ldr	r3, [pc, #48]	; (8001cdc <HAL_TIM_Base_MspInit+0x44>)
 8001cac:	69db      	ldr	r3, [r3, #28]
 8001cae:	4a0b      	ldr	r2, [pc, #44]	; (8001cdc <HAL_TIM_Base_MspInit+0x44>)
 8001cb0:	f043 0301 	orr.w	r3, r3, #1
 8001cb4:	61d3      	str	r3, [r2, #28]
 8001cb6:	4b09      	ldr	r3, [pc, #36]	; (8001cdc <HAL_TIM_Base_MspInit+0x44>)
 8001cb8:	69db      	ldr	r3, [r3, #28]
 8001cba:	f003 0301 	and.w	r3, r3, #1
 8001cbe:	60fb      	str	r3, [r7, #12]
 8001cc0:	68fb      	ldr	r3, [r7, #12]

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001cc2:	2200      	movs	r2, #0
 8001cc4:	2100      	movs	r1, #0
 8001cc6:	201c      	movs	r0, #28
 8001cc8:	f000 fe3d 	bl	8002946 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001ccc:	201c      	movs	r0, #28
 8001cce:	f000 fe56 	bl	800297e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 8001cd2:	bf00      	nop
 8001cd4:	3710      	adds	r7, #16
 8001cd6:	46bd      	mov	sp, r7
 8001cd8:	bd80      	pop	{r7, pc}
 8001cda:	bf00      	nop
 8001cdc:	40021000 	.word	0x40021000

08001ce0 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8001ce0:	b580      	push	{r7, lr}
 8001ce2:	af00      	add	r7, sp, #0

  huart1.Instance = USART1;
 8001ce4:	4b11      	ldr	r3, [pc, #68]	; (8001d2c <MX_USART1_UART_Init+0x4c>)
 8001ce6:	4a12      	ldr	r2, [pc, #72]	; (8001d30 <MX_USART1_UART_Init+0x50>)
 8001ce8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001cea:	4b10      	ldr	r3, [pc, #64]	; (8001d2c <MX_USART1_UART_Init+0x4c>)
 8001cec:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001cf0:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001cf2:	4b0e      	ldr	r3, [pc, #56]	; (8001d2c <MX_USART1_UART_Init+0x4c>)
 8001cf4:	2200      	movs	r2, #0
 8001cf6:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001cf8:	4b0c      	ldr	r3, [pc, #48]	; (8001d2c <MX_USART1_UART_Init+0x4c>)
 8001cfa:	2200      	movs	r2, #0
 8001cfc:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001cfe:	4b0b      	ldr	r3, [pc, #44]	; (8001d2c <MX_USART1_UART_Init+0x4c>)
 8001d00:	2200      	movs	r2, #0
 8001d02:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001d04:	4b09      	ldr	r3, [pc, #36]	; (8001d2c <MX_USART1_UART_Init+0x4c>)
 8001d06:	220c      	movs	r2, #12
 8001d08:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001d0a:	4b08      	ldr	r3, [pc, #32]	; (8001d2c <MX_USART1_UART_Init+0x4c>)
 8001d0c:	2200      	movs	r2, #0
 8001d0e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001d10:	4b06      	ldr	r3, [pc, #24]	; (8001d2c <MX_USART1_UART_Init+0x4c>)
 8001d12:	2200      	movs	r2, #0
 8001d14:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001d16:	4805      	ldr	r0, [pc, #20]	; (8001d2c <MX_USART1_UART_Init+0x4c>)
 8001d18:	f002 f922 	bl	8003f60 <HAL_UART_Init>
 8001d1c:	4603      	mov	r3, r0
 8001d1e:	2b00      	cmp	r3, #0
 8001d20:	d001      	beq.n	8001d26 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8001d22:	f7ff fe35 	bl	8001990 <Error_Handler>
  }

}
 8001d26:	bf00      	nop
 8001d28:	bd80      	pop	{r7, pc}
 8001d2a:	bf00      	nop
 8001d2c:	20000288 	.word	0x20000288
 8001d30:	40013800 	.word	0x40013800

08001d34 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001d34:	b580      	push	{r7, lr}
 8001d36:	b088      	sub	sp, #32
 8001d38:	af00      	add	r7, sp, #0
 8001d3a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d3c:	f107 0310 	add.w	r3, r7, #16
 8001d40:	2200      	movs	r2, #0
 8001d42:	601a      	str	r2, [r3, #0]
 8001d44:	605a      	str	r2, [r3, #4]
 8001d46:	609a      	str	r2, [r3, #8]
 8001d48:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==USART1)
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	4a1c      	ldr	r2, [pc, #112]	; (8001dc0 <HAL_UART_MspInit+0x8c>)
 8001d50:	4293      	cmp	r3, r2
 8001d52:	d131      	bne.n	8001db8 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001d54:	4b1b      	ldr	r3, [pc, #108]	; (8001dc4 <HAL_UART_MspInit+0x90>)
 8001d56:	699b      	ldr	r3, [r3, #24]
 8001d58:	4a1a      	ldr	r2, [pc, #104]	; (8001dc4 <HAL_UART_MspInit+0x90>)
 8001d5a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001d5e:	6193      	str	r3, [r2, #24]
 8001d60:	4b18      	ldr	r3, [pc, #96]	; (8001dc4 <HAL_UART_MspInit+0x90>)
 8001d62:	699b      	ldr	r3, [r3, #24]
 8001d64:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001d68:	60fb      	str	r3, [r7, #12]
 8001d6a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d6c:	4b15      	ldr	r3, [pc, #84]	; (8001dc4 <HAL_UART_MspInit+0x90>)
 8001d6e:	699b      	ldr	r3, [r3, #24]
 8001d70:	4a14      	ldr	r2, [pc, #80]	; (8001dc4 <HAL_UART_MspInit+0x90>)
 8001d72:	f043 0304 	orr.w	r3, r3, #4
 8001d76:	6193      	str	r3, [r2, #24]
 8001d78:	4b12      	ldr	r3, [pc, #72]	; (8001dc4 <HAL_UART_MspInit+0x90>)
 8001d7a:	699b      	ldr	r3, [r3, #24]
 8001d7c:	f003 0304 	and.w	r3, r3, #4
 8001d80:	60bb      	str	r3, [r7, #8]
 8001d82:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001d84:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001d88:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d8a:	2302      	movs	r3, #2
 8001d8c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001d8e:	2303      	movs	r3, #3
 8001d90:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d92:	f107 0310 	add.w	r3, r7, #16
 8001d96:	4619      	mov	r1, r3
 8001d98:	480b      	ldr	r0, [pc, #44]	; (8001dc8 <HAL_UART_MspInit+0x94>)
 8001d9a:	f000 fe0b 	bl	80029b4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001d9e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001da2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001da4:	2300      	movs	r3, #0
 8001da6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001da8:	2300      	movs	r3, #0
 8001daa:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001dac:	f107 0310 	add.w	r3, r7, #16
 8001db0:	4619      	mov	r1, r3
 8001db2:	4805      	ldr	r0, [pc, #20]	; (8001dc8 <HAL_UART_MspInit+0x94>)
 8001db4:	f000 fdfe 	bl	80029b4 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8001db8:	bf00      	nop
 8001dba:	3720      	adds	r7, #32
 8001dbc:	46bd      	mov	sp, r7
 8001dbe:	bd80      	pop	{r7, pc}
 8001dc0:	40013800 	.word	0x40013800
 8001dc4:	40021000 	.word	0x40021000
 8001dc8:	40010800 	.word	0x40010800

08001dcc <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8001dcc:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8001dce:	e003      	b.n	8001dd8 <LoopCopyDataInit>

08001dd0 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8001dd0:	4b0b      	ldr	r3, [pc, #44]	; (8001e00 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 8001dd2:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8001dd4:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8001dd6:	3104      	adds	r1, #4

08001dd8 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8001dd8:	480a      	ldr	r0, [pc, #40]	; (8001e04 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 8001dda:	4b0b      	ldr	r3, [pc, #44]	; (8001e08 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8001ddc:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8001dde:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8001de0:	d3f6      	bcc.n	8001dd0 <CopyDataInit>
  ldr r2, =_sbss
 8001de2:	4a0a      	ldr	r2, [pc, #40]	; (8001e0c <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8001de4:	e002      	b.n	8001dec <LoopFillZerobss>

08001de6 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8001de6:	2300      	movs	r3, #0
  str r3, [r2], #4
 8001de8:	f842 3b04 	str.w	r3, [r2], #4

08001dec <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8001dec:	4b08      	ldr	r3, [pc, #32]	; (8001e10 <LoopFillZerobss+0x24>)
  cmp r2, r3
 8001dee:	429a      	cmp	r2, r3
  bcc FillZerobss
 8001df0:	d3f9      	bcc.n	8001de6 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001df2:	f7ff fecf 	bl	8001b94 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001df6:	f002 fac3 	bl	8004380 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001dfa:	f7ff fbdd 	bl	80015b8 <main>
  bx lr
 8001dfe:	4770      	bx	lr
  ldr r3, =_sidata
 8001e00:	08008b30 	.word	0x08008b30
  ldr r0, =_sdata
 8001e04:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8001e08:	200001e4 	.word	0x200001e4
  ldr r2, =_sbss
 8001e0c:	200001e4 	.word	0x200001e4
  ldr r3, = _ebss
 8001e10:	200002d0 	.word	0x200002d0

08001e14 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001e14:	e7fe      	b.n	8001e14 <ADC1_2_IRQHandler>
	...

08001e18 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001e18:	b580      	push	{r7, lr}
 8001e1a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001e1c:	4b08      	ldr	r3, [pc, #32]	; (8001e40 <HAL_Init+0x28>)
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	4a07      	ldr	r2, [pc, #28]	; (8001e40 <HAL_Init+0x28>)
 8001e22:	f043 0310 	orr.w	r3, r3, #16
 8001e26:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001e28:	2003      	movs	r0, #3
 8001e2a:	f000 fd81 	bl	8002930 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001e2e:	2000      	movs	r0, #0
 8001e30:	f000 f808 	bl	8001e44 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001e34:	f7ff fdb2 	bl	800199c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001e38:	2300      	movs	r3, #0
}
 8001e3a:	4618      	mov	r0, r3
 8001e3c:	bd80      	pop	{r7, pc}
 8001e3e:	bf00      	nop
 8001e40:	40022000 	.word	0x40022000

08001e44 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001e44:	b580      	push	{r7, lr}
 8001e46:	b082      	sub	sp, #8
 8001e48:	af00      	add	r7, sp, #0
 8001e4a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001e4c:	4b12      	ldr	r3, [pc, #72]	; (8001e98 <HAL_InitTick+0x54>)
 8001e4e:	681a      	ldr	r2, [r3, #0]
 8001e50:	4b12      	ldr	r3, [pc, #72]	; (8001e9c <HAL_InitTick+0x58>)
 8001e52:	781b      	ldrb	r3, [r3, #0]
 8001e54:	4619      	mov	r1, r3
 8001e56:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001e5a:	fbb3 f3f1 	udiv	r3, r3, r1
 8001e5e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e62:	4618      	mov	r0, r3
 8001e64:	f000 fd99 	bl	800299a <HAL_SYSTICK_Config>
 8001e68:	4603      	mov	r3, r0
 8001e6a:	2b00      	cmp	r3, #0
 8001e6c:	d001      	beq.n	8001e72 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001e6e:	2301      	movs	r3, #1
 8001e70:	e00e      	b.n	8001e90 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	2b0f      	cmp	r3, #15
 8001e76:	d80a      	bhi.n	8001e8e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001e78:	2200      	movs	r2, #0
 8001e7a:	6879      	ldr	r1, [r7, #4]
 8001e7c:	f04f 30ff 	mov.w	r0, #4294967295
 8001e80:	f000 fd61 	bl	8002946 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001e84:	4a06      	ldr	r2, [pc, #24]	; (8001ea0 <HAL_InitTick+0x5c>)
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001e8a:	2300      	movs	r3, #0
 8001e8c:	e000      	b.n	8001e90 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001e8e:	2301      	movs	r3, #1
}
 8001e90:	4618      	mov	r0, r3
 8001e92:	3708      	adds	r7, #8
 8001e94:	46bd      	mov	sp, r7
 8001e96:	bd80      	pop	{r7, pc}
 8001e98:	20000008 	.word	0x20000008
 8001e9c:	20000010 	.word	0x20000010
 8001ea0:	2000000c 	.word	0x2000000c

08001ea4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001ea4:	b480      	push	{r7}
 8001ea6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001ea8:	4b05      	ldr	r3, [pc, #20]	; (8001ec0 <HAL_IncTick+0x1c>)
 8001eaa:	781b      	ldrb	r3, [r3, #0]
 8001eac:	461a      	mov	r2, r3
 8001eae:	4b05      	ldr	r3, [pc, #20]	; (8001ec4 <HAL_IncTick+0x20>)
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	4413      	add	r3, r2
 8001eb4:	4a03      	ldr	r2, [pc, #12]	; (8001ec4 <HAL_IncTick+0x20>)
 8001eb6:	6013      	str	r3, [r2, #0]
}
 8001eb8:	bf00      	nop
 8001eba:	46bd      	mov	sp, r7
 8001ebc:	bc80      	pop	{r7}
 8001ebe:	4770      	bx	lr
 8001ec0:	20000010 	.word	0x20000010
 8001ec4:	200002c8 	.word	0x200002c8

08001ec8 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001ec8:	b480      	push	{r7}
 8001eca:	af00      	add	r7, sp, #0
  return uwTick;
 8001ecc:	4b02      	ldr	r3, [pc, #8]	; (8001ed8 <HAL_GetTick+0x10>)
 8001ece:	681b      	ldr	r3, [r3, #0]
}
 8001ed0:	4618      	mov	r0, r3
 8001ed2:	46bd      	mov	sp, r7
 8001ed4:	bc80      	pop	{r7}
 8001ed6:	4770      	bx	lr
 8001ed8:	200002c8 	.word	0x200002c8

08001edc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001edc:	b580      	push	{r7, lr}
 8001ede:	b084      	sub	sp, #16
 8001ee0:	af00      	add	r7, sp, #0
 8001ee2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001ee4:	f7ff fff0 	bl	8001ec8 <HAL_GetTick>
 8001ee8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001eee:	68fb      	ldr	r3, [r7, #12]
 8001ef0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001ef4:	d005      	beq.n	8001f02 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001ef6:	4b09      	ldr	r3, [pc, #36]	; (8001f1c <HAL_Delay+0x40>)
 8001ef8:	781b      	ldrb	r3, [r3, #0]
 8001efa:	461a      	mov	r2, r3
 8001efc:	68fb      	ldr	r3, [r7, #12]
 8001efe:	4413      	add	r3, r2
 8001f00:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001f02:	bf00      	nop
 8001f04:	f7ff ffe0 	bl	8001ec8 <HAL_GetTick>
 8001f08:	4602      	mov	r2, r0
 8001f0a:	68bb      	ldr	r3, [r7, #8]
 8001f0c:	1ad3      	subs	r3, r2, r3
 8001f0e:	68fa      	ldr	r2, [r7, #12]
 8001f10:	429a      	cmp	r2, r3
 8001f12:	d8f7      	bhi.n	8001f04 <HAL_Delay+0x28>
  {
  }
}
 8001f14:	bf00      	nop
 8001f16:	3710      	adds	r7, #16
 8001f18:	46bd      	mov	sp, r7
 8001f1a:	bd80      	pop	{r7, pc}
 8001f1c:	20000010 	.word	0x20000010

08001f20 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001f20:	b580      	push	{r7, lr}
 8001f22:	b086      	sub	sp, #24
 8001f24:	af00      	add	r7, sp, #0
 8001f26:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001f28:	2300      	movs	r3, #0
 8001f2a:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8001f2c:	2300      	movs	r3, #0
 8001f2e:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8001f30:	2300      	movs	r3, #0
 8001f32:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8001f34:	2300      	movs	r3, #0
 8001f36:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	2b00      	cmp	r3, #0
 8001f3c:	d101      	bne.n	8001f42 <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8001f3e:	2301      	movs	r3, #1
 8001f40:	e0be      	b.n	80020c0 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	689b      	ldr	r3, [r3, #8]
 8001f46:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f4c:	2b00      	cmp	r3, #0
 8001f4e:	d109      	bne.n	8001f64 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	2200      	movs	r2, #0
 8001f54:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	2200      	movs	r2, #0
 8001f5a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001f5e:	6878      	ldr	r0, [r7, #4]
 8001f60:	f7ff f932 	bl	80011c8 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8001f64:	6878      	ldr	r0, [r7, #4]
 8001f66:	f000 fbdd 	bl	8002724 <ADC_ConversionStop_Disable>
 8001f6a:	4603      	mov	r3, r0
 8001f6c:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f72:	f003 0310 	and.w	r3, r3, #16
 8001f76:	2b00      	cmp	r3, #0
 8001f78:	f040 8099 	bne.w	80020ae <HAL_ADC_Init+0x18e>
 8001f7c:	7dfb      	ldrb	r3, [r7, #23]
 8001f7e:	2b00      	cmp	r3, #0
 8001f80:	f040 8095 	bne.w	80020ae <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f88:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001f8c:	f023 0302 	bic.w	r3, r3, #2
 8001f90:	f043 0202 	orr.w	r2, r3, #2
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001fa0:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	7b1b      	ldrb	r3, [r3, #12]
 8001fa6:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8001fa8:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001faa:	68ba      	ldr	r2, [r7, #8]
 8001fac:	4313      	orrs	r3, r2
 8001fae:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	689b      	ldr	r3, [r3, #8]
 8001fb4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001fb8:	d003      	beq.n	8001fc2 <HAL_ADC_Init+0xa2>
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	689b      	ldr	r3, [r3, #8]
 8001fbe:	2b01      	cmp	r3, #1
 8001fc0:	d102      	bne.n	8001fc8 <HAL_ADC_Init+0xa8>
 8001fc2:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001fc6:	e000      	b.n	8001fca <HAL_ADC_Init+0xaa>
 8001fc8:	2300      	movs	r3, #0
 8001fca:	693a      	ldr	r2, [r7, #16]
 8001fcc:	4313      	orrs	r3, r2
 8001fce:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	7d1b      	ldrb	r3, [r3, #20]
 8001fd4:	2b01      	cmp	r3, #1
 8001fd6:	d119      	bne.n	800200c <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	7b1b      	ldrb	r3, [r3, #12]
 8001fdc:	2b00      	cmp	r3, #0
 8001fde:	d109      	bne.n	8001ff4 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	699b      	ldr	r3, [r3, #24]
 8001fe4:	3b01      	subs	r3, #1
 8001fe6:	035a      	lsls	r2, r3, #13
 8001fe8:	693b      	ldr	r3, [r7, #16]
 8001fea:	4313      	orrs	r3, r2
 8001fec:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001ff0:	613b      	str	r3, [r7, #16]
 8001ff2:	e00b      	b.n	800200c <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ff8:	f043 0220 	orr.w	r2, r3, #32
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002004:	f043 0201 	orr.w	r2, r3, #1
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	685b      	ldr	r3, [r3, #4]
 8002012:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	693a      	ldr	r2, [r7, #16]
 800201c:	430a      	orrs	r2, r1
 800201e:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	689a      	ldr	r2, [r3, #8]
 8002026:	4b28      	ldr	r3, [pc, #160]	; (80020c8 <HAL_ADC_Init+0x1a8>)
 8002028:	4013      	ands	r3, r2
 800202a:	687a      	ldr	r2, [r7, #4]
 800202c:	6812      	ldr	r2, [r2, #0]
 800202e:	68b9      	ldr	r1, [r7, #8]
 8002030:	430b      	orrs	r3, r1
 8002032:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	689b      	ldr	r3, [r3, #8]
 8002038:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800203c:	d003      	beq.n	8002046 <HAL_ADC_Init+0x126>
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	689b      	ldr	r3, [r3, #8]
 8002042:	2b01      	cmp	r3, #1
 8002044:	d104      	bne.n	8002050 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	691b      	ldr	r3, [r3, #16]
 800204a:	3b01      	subs	r3, #1
 800204c:	051b      	lsls	r3, r3, #20
 800204e:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002056:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	68fa      	ldr	r2, [r7, #12]
 8002060:	430a      	orrs	r2, r1
 8002062:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	689a      	ldr	r2, [r3, #8]
 800206a:	4b18      	ldr	r3, [pc, #96]	; (80020cc <HAL_ADC_Init+0x1ac>)
 800206c:	4013      	ands	r3, r2
 800206e:	68ba      	ldr	r2, [r7, #8]
 8002070:	429a      	cmp	r2, r3
 8002072:	d10b      	bne.n	800208c <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	2200      	movs	r2, #0
 8002078:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800207e:	f023 0303 	bic.w	r3, r3, #3
 8002082:	f043 0201 	orr.w	r2, r3, #1
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 800208a:	e018      	b.n	80020be <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002090:	f023 0312 	bic.w	r3, r3, #18
 8002094:	f043 0210 	orr.w	r2, r3, #16
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80020a0:	f043 0201 	orr.w	r2, r3, #1
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 80020a8:	2301      	movs	r3, #1
 80020aa:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80020ac:	e007      	b.n	80020be <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80020b2:	f043 0210 	orr.w	r2, r3, #16
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 80020ba:	2301      	movs	r3, #1
 80020bc:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 80020be:	7dfb      	ldrb	r3, [r7, #23]
}
 80020c0:	4618      	mov	r0, r3
 80020c2:	3718      	adds	r7, #24
 80020c4:	46bd      	mov	sp, r7
 80020c6:	bd80      	pop	{r7, pc}
 80020c8:	ffe1f7fd 	.word	0xffe1f7fd
 80020cc:	ff1f0efe 	.word	0xff1f0efe

080020d0 <HAL_ADC_Start>:
  *         Interruptions enabled in this function: None.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 80020d0:	b580      	push	{r7, lr}
 80020d2:	b084      	sub	sp, #16
 80020d4:	af00      	add	r7, sp, #0
 80020d6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80020d8:	2300      	movs	r3, #0
 80020da:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80020e2:	2b01      	cmp	r3, #1
 80020e4:	d101      	bne.n	80020ea <HAL_ADC_Start+0x1a>
 80020e6:	2302      	movs	r3, #2
 80020e8:	e098      	b.n	800221c <HAL_ADC_Start+0x14c>
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	2201      	movs	r2, #1
 80020ee:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
   
  /* Enable the ADC peripheral */
  tmp_hal_status = ADC_Enable(hadc);
 80020f2:	6878      	ldr	r0, [r7, #4]
 80020f4:	f000 fac4 	bl	8002680 <ADC_Enable>
 80020f8:	4603      	mov	r3, r0
 80020fa:	73fb      	strb	r3, [r7, #15]
  
  /* Start conversion if ADC is effectively enabled */
  if (tmp_hal_status == HAL_OK)
 80020fc:	7bfb      	ldrb	r3, [r7, #15]
 80020fe:	2b00      	cmp	r3, #0
 8002100:	f040 8087 	bne.w	8002212 <HAL_ADC_Start+0x142>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular operation                      */
    ADC_STATE_CLR_SET(hadc->State,
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002108:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800210c:	f023 0301 	bic.w	r3, r3, #1
 8002110:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	4a41      	ldr	r2, [pc, #260]	; (8002224 <HAL_ADC_Start+0x154>)
 800211e:	4293      	cmp	r3, r2
 8002120:	d105      	bne.n	800212e <HAL_ADC_Start+0x5e>
 8002122:	4b41      	ldr	r3, [pc, #260]	; (8002228 <HAL_ADC_Start+0x158>)
 8002124:	685b      	ldr	r3, [r3, #4]
 8002126:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 800212a:	2b00      	cmp	r3, #0
 800212c:	d115      	bne.n	800215a <HAL_ADC_Start+0x8a>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002132:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	685b      	ldr	r3, [r3, #4]
 8002140:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002144:	2b00      	cmp	r3, #0
 8002146:	d026      	beq.n	8002196 <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800214c:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002150:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	629a      	str	r2, [r3, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002158:	e01d      	b.n	8002196 <HAL_ADC_Start+0xc6>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800215e:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	4a2f      	ldr	r2, [pc, #188]	; (8002228 <HAL_ADC_Start+0x158>)
 800216c:	4293      	cmp	r3, r2
 800216e:	d004      	beq.n	800217a <HAL_ADC_Start+0xaa>
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	4a2b      	ldr	r2, [pc, #172]	; (8002224 <HAL_ADC_Start+0x154>)
 8002176:	4293      	cmp	r3, r2
 8002178:	d10d      	bne.n	8002196 <HAL_ADC_Start+0xc6>
 800217a:	4b2b      	ldr	r3, [pc, #172]	; (8002228 <HAL_ADC_Start+0x158>)
 800217c:	685b      	ldr	r3, [r3, #4]
 800217e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002182:	2b00      	cmp	r3, #0
 8002184:	d007      	beq.n	8002196 <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800218a:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800218e:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800219a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800219e:	2b00      	cmp	r3, #0
 80021a0:	d006      	beq.n	80021b0 <HAL_ADC_Start+0xe0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80021a6:	f023 0206 	bic.w	r2, r3, #6
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	62da      	str	r2, [r3, #44]	; 0x2c
 80021ae:	e002      	b.n	80021b6 <HAL_ADC_Start+0xe6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	2200      	movs	r2, #0
 80021b4:	62da      	str	r2, [r3, #44]	; 0x2c
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	2200      	movs	r2, #0
 80021ba:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
    /* Clear regular group conversion flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	f06f 0202 	mvn.w	r2, #2
 80021c6:	601a      	str	r2, [r3, #0]
    /*  - if ADC is slave, ADC is enabled only (conversion is not started).   */
    /*  - if ADC is master, ADC is enabled and conversion is started.         */
    /* If ADC is master, ADC is enabled and conversion is started.            */
    /* Note: Alternate trigger for single conversion could be to force an     */
    /*       additional set of bit ADON "hadc->Instance->CR2 |= ADC_CR2_ADON;"*/
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	689b      	ldr	r3, [r3, #8]
 80021ce:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 80021d2:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 80021d6:	d113      	bne.n	8002200 <HAL_ADC_Start+0x130>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	681b      	ldr	r3, [r3, #0]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 80021dc:	4a11      	ldr	r2, [pc, #68]	; (8002224 <HAL_ADC_Start+0x154>)
 80021de:	4293      	cmp	r3, r2
 80021e0:	d105      	bne.n	80021ee <HAL_ADC_Start+0x11e>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 80021e2:	4b11      	ldr	r3, [pc, #68]	; (8002228 <HAL_ADC_Start+0x158>)
 80021e4:	685b      	ldr	r3, [r3, #4]
 80021e6:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 80021ea:	2b00      	cmp	r3, #0
 80021ec:	d108      	bne.n	8002200 <HAL_ADC_Start+0x130>
    {
      /* Start ADC conversion on regular group with SW start */
      SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	689a      	ldr	r2, [r3, #8]
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 80021fc:	609a      	str	r2, [r3, #8]
 80021fe:	e00c      	b.n	800221a <HAL_ADC_Start+0x14a>
    }
    else
    {
      /* Start ADC conversion on regular group with external trigger */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	689a      	ldr	r2, [r3, #8]
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 800220e:	609a      	str	r2, [r3, #8]
 8002210:	e003      	b.n	800221a <HAL_ADC_Start+0x14a>
    }
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	2200      	movs	r2, #0
 8002216:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  }
    
  /* Return function status */
  return tmp_hal_status;
 800221a:	7bfb      	ldrb	r3, [r7, #15]
}
 800221c:	4618      	mov	r0, r3
 800221e:	3710      	adds	r7, #16
 8002220:	46bd      	mov	sp, r7
 8002222:	bd80      	pop	{r7, pc}
 8002224:	40012800 	.word	0x40012800
 8002228:	40012400 	.word	0x40012400

0800222c <HAL_ADC_Stop>:
  *         should be preliminarily stopped using HAL_ADCEx_InjectedStop function.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
{
 800222c:	b580      	push	{r7, lr}
 800222e:	b084      	sub	sp, #16
 8002230:	af00      	add	r7, sp, #0
 8002232:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002234:	2300      	movs	r3, #0
 8002236:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
     
  /* Process locked */
  __HAL_LOCK(hadc);
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800223e:	2b01      	cmp	r3, #1
 8002240:	d101      	bne.n	8002246 <HAL_ADC_Stop+0x1a>
 8002242:	2302      	movs	r3, #2
 8002244:	e01a      	b.n	800227c <HAL_ADC_Stop+0x50>
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	2201      	movs	r2, #1
 800224a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 800224e:	6878      	ldr	r0, [r7, #4]
 8002250:	f000 fa68 	bl	8002724 <ADC_ConversionStop_Disable>
 8002254:	4603      	mov	r3, r0
 8002256:	73fb      	strb	r3, [r7, #15]
  
  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 8002258:	7bfb      	ldrb	r3, [r7, #15]
 800225a:	2b00      	cmp	r3, #0
 800225c:	d109      	bne.n	8002272 <HAL_ADC_Stop+0x46>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002262:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8002266:	f023 0301 	bic.w	r3, r3, #1
 800226a:	f043 0201 	orr.w	r2, r3, #1
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	2200      	movs	r2, #0
 8002276:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 800227a:	7bfb      	ldrb	r3, [r7, #15]
}
 800227c:	4618      	mov	r0, r3
 800227e:	3710      	adds	r7, #16
 8002280:	46bd      	mov	sp, r7
 8002282:	bd80      	pop	{r7, pc}

08002284 <HAL_ADC_PollForConversion>:
  * @param  hadc: ADC handle
  * @param  Timeout: Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8002284:	b590      	push	{r4, r7, lr}
 8002286:	b087      	sub	sp, #28
 8002288:	af00      	add	r7, sp, #0
 800228a:	6078      	str	r0, [r7, #4]
 800228c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 800228e:	2300      	movs	r3, #0
 8002290:	617b      	str	r3, [r7, #20]
  
  /* Variables for polling in case of scan mode enabled and polling for each  */
  /* conversion.                                                              */
  __IO uint32_t Conversion_Timeout_CPU_cycles = 0U;
 8002292:	2300      	movs	r3, #0
 8002294:	60fb      	str	r3, [r7, #12]
  uint32_t Conversion_Timeout_CPU_cycles_max = 0U;
 8002296:	2300      	movs	r3, #0
 8002298:	613b      	str	r3, [r7, #16]
 
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Get tick count */
  tickstart = HAL_GetTick();
 800229a:	f7ff fe15 	bl	8001ec8 <HAL_GetTick>
 800229e:	6178      	str	r0, [r7, #20]
  
  /* Verification that ADC configuration is compliant with polling for        */
  /* each conversion:                                                         */
  /* Particular case is ADC configured in DMA mode                            */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	689b      	ldr	r3, [r3, #8]
 80022a6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80022aa:	2b00      	cmp	r3, #0
 80022ac:	d00b      	beq.n	80022c6 <HAL_ADC_PollForConversion+0x42>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80022b2:	f043 0220 	orr.w	r2, r3, #32
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	2200      	movs	r2, #0
 80022be:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    return HAL_ERROR;
 80022c2:	2301      	movs	r3, #1
 80022c4:	e0c8      	b.n	8002458 <HAL_ADC_PollForConversion+0x1d4>
  /*    from ADC conversion time (selected sampling time + conversion time of */
  /*    12.5 ADC clock cycles) and APB2/ADC clock prescalers (depending on    */
  /*    settings, conversion time range can be from 28 to 32256 CPU cycles).  */
  /*    As flag EOC is not set after each conversion, no timeout status can   */
  /*    be set.                                                               */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	685b      	ldr	r3, [r3, #4]
 80022cc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80022d0:	2b00      	cmp	r3, #0
 80022d2:	d12a      	bne.n	800232a <HAL_ADC_PollForConversion+0xa6>
      HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L)    )
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80022da:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 80022de:	2b00      	cmp	r3, #0
 80022e0:	d123      	bne.n	800232a <HAL_ADC_PollForConversion+0xa6>
  {
    /* Wait until End of Conversion flag is raised */
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 80022e2:	e01a      	b.n	800231a <HAL_ADC_PollForConversion+0x96>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 80022e4:	683b      	ldr	r3, [r7, #0]
 80022e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80022ea:	d016      	beq.n	800231a <HAL_ADC_PollForConversion+0x96>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 80022ec:	683b      	ldr	r3, [r7, #0]
 80022ee:	2b00      	cmp	r3, #0
 80022f0:	d007      	beq.n	8002302 <HAL_ADC_PollForConversion+0x7e>
 80022f2:	f7ff fde9 	bl	8001ec8 <HAL_GetTick>
 80022f6:	4602      	mov	r2, r0
 80022f8:	697b      	ldr	r3, [r7, #20]
 80022fa:	1ad3      	subs	r3, r2, r3
 80022fc:	683a      	ldr	r2, [r7, #0]
 80022fe:	429a      	cmp	r2, r3
 8002300:	d20b      	bcs.n	800231a <HAL_ADC_PollForConversion+0x96>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002306:	f043 0204 	orr.w	r2, r3, #4
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	629a      	str	r2, [r3, #40]	; 0x28
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	2200      	movs	r2, #0
 8002312:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          
          return HAL_TIMEOUT;
 8002316:	2303      	movs	r3, #3
 8002318:	e09e      	b.n	8002458 <HAL_ADC_PollForConversion+0x1d4>
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	f003 0302 	and.w	r3, r3, #2
 8002324:	2b00      	cmp	r3, #0
 8002326:	d0dd      	beq.n	80022e4 <HAL_ADC_PollForConversion+0x60>
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8002328:	e06c      	b.n	8002404 <HAL_ADC_PollForConversion+0x180>
    /* Replace polling by wait for maximum conversion time */
    /*  - Computation of CPU clock cycles corresponding to ADC clock cycles   */
    /*    and ADC maximum conversion cycles on all channels.                  */
    /*  - Wait for the expected ADC clock cycles delay                        */
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
                                          / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 800232a:	4b4d      	ldr	r3, [pc, #308]	; (8002460 <HAL_ADC_PollForConversion+0x1dc>)
 800232c:	681c      	ldr	r4, [r3, #0]
 800232e:	2002      	movs	r0, #2
 8002330:	f001 f9da 	bl	80036e8 <HAL_RCCEx_GetPeriphCLKFreq>
 8002334:	4603      	mov	r3, r0
 8002336:	fbb4 f2f3 	udiv	r2, r4, r3
                                         * ADC_CONVCYCLES_MAX_RANGE(hadc)                 );
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	6919      	ldr	r1, [r3, #16]
 8002340:	4b48      	ldr	r3, [pc, #288]	; (8002464 <HAL_ADC_PollForConversion+0x1e0>)
 8002342:	400b      	ands	r3, r1
 8002344:	2b00      	cmp	r3, #0
 8002346:	d118      	bne.n	800237a <HAL_ADC_PollForConversion+0xf6>
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	68d9      	ldr	r1, [r3, #12]
 800234e:	4b46      	ldr	r3, [pc, #280]	; (8002468 <HAL_ADC_PollForConversion+0x1e4>)
 8002350:	400b      	ands	r3, r1
 8002352:	2b00      	cmp	r3, #0
 8002354:	d111      	bne.n	800237a <HAL_ADC_PollForConversion+0xf6>
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	6919      	ldr	r1, [r3, #16]
 800235c:	4b43      	ldr	r3, [pc, #268]	; (800246c <HAL_ADC_PollForConversion+0x1e8>)
 800235e:	400b      	ands	r3, r1
 8002360:	2b00      	cmp	r3, #0
 8002362:	d108      	bne.n	8002376 <HAL_ADC_PollForConversion+0xf2>
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	68d9      	ldr	r1, [r3, #12]
 800236a:	4b41      	ldr	r3, [pc, #260]	; (8002470 <HAL_ADC_PollForConversion+0x1ec>)
 800236c:	400b      	ands	r3, r1
 800236e:	2b00      	cmp	r3, #0
 8002370:	d101      	bne.n	8002376 <HAL_ADC_PollForConversion+0xf2>
 8002372:	2314      	movs	r3, #20
 8002374:	e020      	b.n	80023b8 <HAL_ADC_PollForConversion+0x134>
 8002376:	2329      	movs	r3, #41	; 0x29
 8002378:	e01e      	b.n	80023b8 <HAL_ADC_PollForConversion+0x134>
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	6919      	ldr	r1, [r3, #16]
 8002380:	4b3a      	ldr	r3, [pc, #232]	; (800246c <HAL_ADC_PollForConversion+0x1e8>)
 8002382:	400b      	ands	r3, r1
 8002384:	2b00      	cmp	r3, #0
 8002386:	d106      	bne.n	8002396 <HAL_ADC_PollForConversion+0x112>
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	68d9      	ldr	r1, [r3, #12]
 800238e:	4b38      	ldr	r3, [pc, #224]	; (8002470 <HAL_ADC_PollForConversion+0x1ec>)
 8002390:	400b      	ands	r3, r1
 8002392:	2b00      	cmp	r3, #0
 8002394:	d00d      	beq.n	80023b2 <HAL_ADC_PollForConversion+0x12e>
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	6919      	ldr	r1, [r3, #16]
 800239c:	4b35      	ldr	r3, [pc, #212]	; (8002474 <HAL_ADC_PollForConversion+0x1f0>)
 800239e:	400b      	ands	r3, r1
 80023a0:	2b00      	cmp	r3, #0
 80023a2:	d108      	bne.n	80023b6 <HAL_ADC_PollForConversion+0x132>
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	68d9      	ldr	r1, [r3, #12]
 80023aa:	4b32      	ldr	r3, [pc, #200]	; (8002474 <HAL_ADC_PollForConversion+0x1f0>)
 80023ac:	400b      	ands	r3, r1
 80023ae:	2b00      	cmp	r3, #0
 80023b0:	d101      	bne.n	80023b6 <HAL_ADC_PollForConversion+0x132>
 80023b2:	2354      	movs	r3, #84	; 0x54
 80023b4:	e000      	b.n	80023b8 <HAL_ADC_PollForConversion+0x134>
 80023b6:	23fc      	movs	r3, #252	; 0xfc
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
 80023b8:	fb02 f303 	mul.w	r3, r2, r3
 80023bc:	613b      	str	r3, [r7, #16]
    
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 80023be:	e01d      	b.n	80023fc <HAL_ADC_PollForConversion+0x178>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 80023c0:	683b      	ldr	r3, [r7, #0]
 80023c2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80023c6:	d016      	beq.n	80023f6 <HAL_ADC_PollForConversion+0x172>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 80023c8:	683b      	ldr	r3, [r7, #0]
 80023ca:	2b00      	cmp	r3, #0
 80023cc:	d007      	beq.n	80023de <HAL_ADC_PollForConversion+0x15a>
 80023ce:	f7ff fd7b 	bl	8001ec8 <HAL_GetTick>
 80023d2:	4602      	mov	r2, r0
 80023d4:	697b      	ldr	r3, [r7, #20]
 80023d6:	1ad3      	subs	r3, r2, r3
 80023d8:	683a      	ldr	r2, [r7, #0]
 80023da:	429a      	cmp	r2, r3
 80023dc:	d20b      	bcs.n	80023f6 <HAL_ADC_PollForConversion+0x172>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80023e2:	f043 0204 	orr.w	r2, r3, #4
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	629a      	str	r2, [r3, #40]	; 0x28
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	2200      	movs	r2, #0
 80023ee:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          
          return HAL_TIMEOUT;
 80023f2:	2303      	movs	r3, #3
 80023f4:	e030      	b.n	8002458 <HAL_ADC_PollForConversion+0x1d4>
        }
      }
      Conversion_Timeout_CPU_cycles ++;
 80023f6:	68fb      	ldr	r3, [r7, #12]
 80023f8:	3301      	adds	r3, #1
 80023fa:	60fb      	str	r3, [r7, #12]
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 80023fc:	68fb      	ldr	r3, [r7, #12]
 80023fe:	693a      	ldr	r2, [r7, #16]
 8002400:	429a      	cmp	r2, r3
 8002402:	d8dd      	bhi.n	80023c0 <HAL_ADC_PollForConversion+0x13c>
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	f06f 0212 	mvn.w	r2, #18
 800240c:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002412:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	629a      	str	r2, [r3, #40]	; 0x28
  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F1 devices, in case of sequencer enabled                   */
  /*       (several ranks selected), end of conversion flag is raised         */
  /*       at the end of the sequence.                                        */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	689b      	ldr	r3, [r3, #8]
 8002420:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8002424:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8002428:	d115      	bne.n	8002456 <HAL_ADC_PollForConversion+0x1d2>
     (hadc->Init.ContinuousConvMode == DISABLE)   )
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	7b1b      	ldrb	r3, [r3, #12]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 800242e:	2b00      	cmp	r3, #0
 8002430:	d111      	bne.n	8002456 <HAL_ADC_PollForConversion+0x1d2>
  {   
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002436:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	629a      	str	r2, [r3, #40]	; 0x28

    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002442:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002446:	2b00      	cmp	r3, #0
 8002448:	d105      	bne.n	8002456 <HAL_ADC_PollForConversion+0x1d2>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800244e:	f043 0201 	orr.w	r2, r3, #1
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	629a      	str	r2, [r3, #40]	; 0x28
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8002456:	2300      	movs	r3, #0
}
 8002458:	4618      	mov	r0, r3
 800245a:	371c      	adds	r7, #28
 800245c:	46bd      	mov	sp, r7
 800245e:	bd90      	pop	{r4, r7, pc}
 8002460:	20000008 	.word	0x20000008
 8002464:	24924924 	.word	0x24924924
 8002468:	00924924 	.word	0x00924924
 800246c:	12492492 	.word	0x12492492
 8002470:	00492492 	.word	0x00492492
 8002474:	00249249 	.word	0x00249249

08002478 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc: ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 8002478:	b480      	push	{r7}
 800247a:	b083      	sub	sp, #12
 800247c:	af00      	add	r7, sp, #0
 800247e:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8002486:	4618      	mov	r0, r3
 8002488:	370c      	adds	r7, #12
 800248a:	46bd      	mov	sp, r7
 800248c:	bc80      	pop	{r7}
 800248e:	4770      	bx	lr

08002490 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8002490:	b480      	push	{r7}
 8002492:	b085      	sub	sp, #20
 8002494:	af00      	add	r7, sp, #0
 8002496:	6078      	str	r0, [r7, #4]
 8002498:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800249a:	2300      	movs	r3, #0
 800249c:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 800249e:	2300      	movs	r3, #0
 80024a0:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80024a8:	2b01      	cmp	r3, #1
 80024aa:	d101      	bne.n	80024b0 <HAL_ADC_ConfigChannel+0x20>
 80024ac:	2302      	movs	r3, #2
 80024ae:	e0dc      	b.n	800266a <HAL_ADC_ConfigChannel+0x1da>
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	2201      	movs	r2, #1
 80024b4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80024b8:	683b      	ldr	r3, [r7, #0]
 80024ba:	685b      	ldr	r3, [r3, #4]
 80024bc:	2b06      	cmp	r3, #6
 80024be:	d81c      	bhi.n	80024fa <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80024c6:	683b      	ldr	r3, [r7, #0]
 80024c8:	685a      	ldr	r2, [r3, #4]
 80024ca:	4613      	mov	r3, r2
 80024cc:	009b      	lsls	r3, r3, #2
 80024ce:	4413      	add	r3, r2
 80024d0:	3b05      	subs	r3, #5
 80024d2:	221f      	movs	r2, #31
 80024d4:	fa02 f303 	lsl.w	r3, r2, r3
 80024d8:	43db      	mvns	r3, r3
 80024da:	4019      	ands	r1, r3
 80024dc:	683b      	ldr	r3, [r7, #0]
 80024de:	6818      	ldr	r0, [r3, #0]
 80024e0:	683b      	ldr	r3, [r7, #0]
 80024e2:	685a      	ldr	r2, [r3, #4]
 80024e4:	4613      	mov	r3, r2
 80024e6:	009b      	lsls	r3, r3, #2
 80024e8:	4413      	add	r3, r2
 80024ea:	3b05      	subs	r3, #5
 80024ec:	fa00 f203 	lsl.w	r2, r0, r3
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	430a      	orrs	r2, r1
 80024f6:	635a      	str	r2, [r3, #52]	; 0x34
 80024f8:	e03c      	b.n	8002574 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80024fa:	683b      	ldr	r3, [r7, #0]
 80024fc:	685b      	ldr	r3, [r3, #4]
 80024fe:	2b0c      	cmp	r3, #12
 8002500:	d81c      	bhi.n	800253c <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002508:	683b      	ldr	r3, [r7, #0]
 800250a:	685a      	ldr	r2, [r3, #4]
 800250c:	4613      	mov	r3, r2
 800250e:	009b      	lsls	r3, r3, #2
 8002510:	4413      	add	r3, r2
 8002512:	3b23      	subs	r3, #35	; 0x23
 8002514:	221f      	movs	r2, #31
 8002516:	fa02 f303 	lsl.w	r3, r2, r3
 800251a:	43db      	mvns	r3, r3
 800251c:	4019      	ands	r1, r3
 800251e:	683b      	ldr	r3, [r7, #0]
 8002520:	6818      	ldr	r0, [r3, #0]
 8002522:	683b      	ldr	r3, [r7, #0]
 8002524:	685a      	ldr	r2, [r3, #4]
 8002526:	4613      	mov	r3, r2
 8002528:	009b      	lsls	r3, r3, #2
 800252a:	4413      	add	r3, r2
 800252c:	3b23      	subs	r3, #35	; 0x23
 800252e:	fa00 f203 	lsl.w	r2, r0, r3
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	430a      	orrs	r2, r1
 8002538:	631a      	str	r2, [r3, #48]	; 0x30
 800253a:	e01b      	b.n	8002574 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002542:	683b      	ldr	r3, [r7, #0]
 8002544:	685a      	ldr	r2, [r3, #4]
 8002546:	4613      	mov	r3, r2
 8002548:	009b      	lsls	r3, r3, #2
 800254a:	4413      	add	r3, r2
 800254c:	3b41      	subs	r3, #65	; 0x41
 800254e:	221f      	movs	r2, #31
 8002550:	fa02 f303 	lsl.w	r3, r2, r3
 8002554:	43db      	mvns	r3, r3
 8002556:	4019      	ands	r1, r3
 8002558:	683b      	ldr	r3, [r7, #0]
 800255a:	6818      	ldr	r0, [r3, #0]
 800255c:	683b      	ldr	r3, [r7, #0]
 800255e:	685a      	ldr	r2, [r3, #4]
 8002560:	4613      	mov	r3, r2
 8002562:	009b      	lsls	r3, r3, #2
 8002564:	4413      	add	r3, r2
 8002566:	3b41      	subs	r3, #65	; 0x41
 8002568:	fa00 f203 	lsl.w	r2, r0, r3
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	430a      	orrs	r2, r1
 8002572:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8002574:	683b      	ldr	r3, [r7, #0]
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	2b09      	cmp	r3, #9
 800257a:	d91c      	bls.n	80025b6 <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	68d9      	ldr	r1, [r3, #12]
 8002582:	683b      	ldr	r3, [r7, #0]
 8002584:	681a      	ldr	r2, [r3, #0]
 8002586:	4613      	mov	r3, r2
 8002588:	005b      	lsls	r3, r3, #1
 800258a:	4413      	add	r3, r2
 800258c:	3b1e      	subs	r3, #30
 800258e:	2207      	movs	r2, #7
 8002590:	fa02 f303 	lsl.w	r3, r2, r3
 8002594:	43db      	mvns	r3, r3
 8002596:	4019      	ands	r1, r3
 8002598:	683b      	ldr	r3, [r7, #0]
 800259a:	6898      	ldr	r0, [r3, #8]
 800259c:	683b      	ldr	r3, [r7, #0]
 800259e:	681a      	ldr	r2, [r3, #0]
 80025a0:	4613      	mov	r3, r2
 80025a2:	005b      	lsls	r3, r3, #1
 80025a4:	4413      	add	r3, r2
 80025a6:	3b1e      	subs	r3, #30
 80025a8:	fa00 f203 	lsl.w	r2, r0, r3
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	430a      	orrs	r2, r1
 80025b2:	60da      	str	r2, [r3, #12]
 80025b4:	e019      	b.n	80025ea <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	6919      	ldr	r1, [r3, #16]
 80025bc:	683b      	ldr	r3, [r7, #0]
 80025be:	681a      	ldr	r2, [r3, #0]
 80025c0:	4613      	mov	r3, r2
 80025c2:	005b      	lsls	r3, r3, #1
 80025c4:	4413      	add	r3, r2
 80025c6:	2207      	movs	r2, #7
 80025c8:	fa02 f303 	lsl.w	r3, r2, r3
 80025cc:	43db      	mvns	r3, r3
 80025ce:	4019      	ands	r1, r3
 80025d0:	683b      	ldr	r3, [r7, #0]
 80025d2:	6898      	ldr	r0, [r3, #8]
 80025d4:	683b      	ldr	r3, [r7, #0]
 80025d6:	681a      	ldr	r2, [r3, #0]
 80025d8:	4613      	mov	r3, r2
 80025da:	005b      	lsls	r3, r3, #1
 80025dc:	4413      	add	r3, r2
 80025de:	fa00 f203 	lsl.w	r2, r0, r3
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	430a      	orrs	r2, r1
 80025e8:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 80025ea:	683b      	ldr	r3, [r7, #0]
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	2b10      	cmp	r3, #16
 80025f0:	d003      	beq.n	80025fa <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 80025f2:	683b      	ldr	r3, [r7, #0]
 80025f4:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 80025f6:	2b11      	cmp	r3, #17
 80025f8:	d132      	bne.n	8002660 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	4a1d      	ldr	r2, [pc, #116]	; (8002674 <HAL_ADC_ConfigChannel+0x1e4>)
 8002600:	4293      	cmp	r3, r2
 8002602:	d125      	bne.n	8002650 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	689b      	ldr	r3, [r3, #8]
 800260a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800260e:	2b00      	cmp	r3, #0
 8002610:	d126      	bne.n	8002660 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	689a      	ldr	r2, [r3, #8]
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8002620:	609a      	str	r2, [r3, #8]
        
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 8002622:	683b      	ldr	r3, [r7, #0]
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	2b10      	cmp	r3, #16
 8002628:	d11a      	bne.n	8002660 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800262a:	4b13      	ldr	r3, [pc, #76]	; (8002678 <HAL_ADC_ConfigChannel+0x1e8>)
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	4a13      	ldr	r2, [pc, #76]	; (800267c <HAL_ADC_ConfigChannel+0x1ec>)
 8002630:	fba2 2303 	umull	r2, r3, r2, r3
 8002634:	0c9a      	lsrs	r2, r3, #18
 8002636:	4613      	mov	r3, r2
 8002638:	009b      	lsls	r3, r3, #2
 800263a:	4413      	add	r3, r2
 800263c:	005b      	lsls	r3, r3, #1
 800263e:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002640:	e002      	b.n	8002648 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 8002642:	68bb      	ldr	r3, [r7, #8]
 8002644:	3b01      	subs	r3, #1
 8002646:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002648:	68bb      	ldr	r3, [r7, #8]
 800264a:	2b00      	cmp	r3, #0
 800264c:	d1f9      	bne.n	8002642 <HAL_ADC_ConfigChannel+0x1b2>
 800264e:	e007      	b.n	8002660 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002654:	f043 0220 	orr.w	r2, r3, #32
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 800265c:	2301      	movs	r3, #1
 800265e:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	2200      	movs	r2, #0
 8002664:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8002668:	7bfb      	ldrb	r3, [r7, #15]
}
 800266a:	4618      	mov	r0, r3
 800266c:	3714      	adds	r7, #20
 800266e:	46bd      	mov	sp, r7
 8002670:	bc80      	pop	{r7}
 8002672:	4770      	bx	lr
 8002674:	40012400 	.word	0x40012400
 8002678:	20000008 	.word	0x20000008
 800267c:	431bde83 	.word	0x431bde83

08002680 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8002680:	b580      	push	{r7, lr}
 8002682:	b084      	sub	sp, #16
 8002684:	af00      	add	r7, sp, #0
 8002686:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002688:	2300      	movs	r3, #0
 800268a:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 800268c:	2300      	movs	r3, #0
 800268e:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	689b      	ldr	r3, [r3, #8]
 8002696:	f003 0301 	and.w	r3, r3, #1
 800269a:	2b01      	cmp	r3, #1
 800269c:	d039      	beq.n	8002712 <ADC_Enable+0x92>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	689a      	ldr	r2, [r3, #8]
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	f042 0201 	orr.w	r2, r2, #1
 80026ac:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80026ae:	4b1b      	ldr	r3, [pc, #108]	; (800271c <ADC_Enable+0x9c>)
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	4a1b      	ldr	r2, [pc, #108]	; (8002720 <ADC_Enable+0xa0>)
 80026b4:	fba2 2303 	umull	r2, r3, r2, r3
 80026b8:	0c9b      	lsrs	r3, r3, #18
 80026ba:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 80026bc:	e002      	b.n	80026c4 <ADC_Enable+0x44>
    {
      wait_loop_index--;
 80026be:	68bb      	ldr	r3, [r7, #8]
 80026c0:	3b01      	subs	r3, #1
 80026c2:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 80026c4:	68bb      	ldr	r3, [r7, #8]
 80026c6:	2b00      	cmp	r3, #0
 80026c8:	d1f9      	bne.n	80026be <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 80026ca:	f7ff fbfd 	bl	8001ec8 <HAL_GetTick>
 80026ce:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 80026d0:	e018      	b.n	8002704 <ADC_Enable+0x84>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80026d2:	f7ff fbf9 	bl	8001ec8 <HAL_GetTick>
 80026d6:	4602      	mov	r2, r0
 80026d8:	68fb      	ldr	r3, [r7, #12]
 80026da:	1ad3      	subs	r3, r2, r3
 80026dc:	2b02      	cmp	r3, #2
 80026de:	d911      	bls.n	8002704 <ADC_Enable+0x84>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80026e4:	f043 0210 	orr.w	r2, r3, #16
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	629a      	str	r2, [r3, #40]	; 0x28
      
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80026f0:	f043 0201 	orr.w	r2, r3, #1
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	62da      	str	r2, [r3, #44]	; 0x2c
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	2200      	movs	r2, #0
 80026fc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
      
        return HAL_ERROR;
 8002700:	2301      	movs	r3, #1
 8002702:	e007      	b.n	8002714 <ADC_Enable+0x94>
    while(ADC_IS_ENABLE(hadc) == RESET)
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	689b      	ldr	r3, [r3, #8]
 800270a:	f003 0301 	and.w	r3, r3, #1
 800270e:	2b01      	cmp	r3, #1
 8002710:	d1df      	bne.n	80026d2 <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8002712:	2300      	movs	r3, #0
}
 8002714:	4618      	mov	r0, r3
 8002716:	3710      	adds	r7, #16
 8002718:	46bd      	mov	sp, r7
 800271a:	bd80      	pop	{r7, pc}
 800271c:	20000008 	.word	0x20000008
 8002720:	431bde83 	.word	0x431bde83

08002724 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8002724:	b580      	push	{r7, lr}
 8002726:	b084      	sub	sp, #16
 8002728:	af00      	add	r7, sp, #0
 800272a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800272c:	2300      	movs	r3, #0
 800272e:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	689b      	ldr	r3, [r3, #8]
 8002736:	f003 0301 	and.w	r3, r3, #1
 800273a:	2b01      	cmp	r3, #1
 800273c:	d127      	bne.n	800278e <ADC_ConversionStop_Disable+0x6a>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	689a      	ldr	r2, [r3, #8]
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	f022 0201 	bic.w	r2, r2, #1
 800274c:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 800274e:	f7ff fbbb 	bl	8001ec8 <HAL_GetTick>
 8002752:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8002754:	e014      	b.n	8002780 <ADC_ConversionStop_Disable+0x5c>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8002756:	f7ff fbb7 	bl	8001ec8 <HAL_GetTick>
 800275a:	4602      	mov	r2, r0
 800275c:	68fb      	ldr	r3, [r7, #12]
 800275e:	1ad3      	subs	r3, r2, r3
 8002760:	2b02      	cmp	r3, #2
 8002762:	d90d      	bls.n	8002780 <ADC_ConversionStop_Disable+0x5c>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002768:	f043 0210 	orr.w	r2, r3, #16
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002774:	f043 0201 	orr.w	r2, r3, #1
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	62da      	str	r2, [r3, #44]	; 0x2c
        
        return HAL_ERROR;
 800277c:	2301      	movs	r3, #1
 800277e:	e007      	b.n	8002790 <ADC_ConversionStop_Disable+0x6c>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	689b      	ldr	r3, [r3, #8]
 8002786:	f003 0301 	and.w	r3, r3, #1
 800278a:	2b01      	cmp	r3, #1
 800278c:	d0e3      	beq.n	8002756 <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 800278e:	2300      	movs	r3, #0
}
 8002790:	4618      	mov	r0, r3
 8002792:	3710      	adds	r7, #16
 8002794:	46bd      	mov	sp, r7
 8002796:	bd80      	pop	{r7, pc}

08002798 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002798:	b480      	push	{r7}
 800279a:	b085      	sub	sp, #20
 800279c:	af00      	add	r7, sp, #0
 800279e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	f003 0307 	and.w	r3, r3, #7
 80027a6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80027a8:	4b0c      	ldr	r3, [pc, #48]	; (80027dc <__NVIC_SetPriorityGrouping+0x44>)
 80027aa:	68db      	ldr	r3, [r3, #12]
 80027ac:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80027ae:	68ba      	ldr	r2, [r7, #8]
 80027b0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80027b4:	4013      	ands	r3, r2
 80027b6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80027b8:	68fb      	ldr	r3, [r7, #12]
 80027ba:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80027bc:	68bb      	ldr	r3, [r7, #8]
 80027be:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80027c0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80027c4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80027c8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80027ca:	4a04      	ldr	r2, [pc, #16]	; (80027dc <__NVIC_SetPriorityGrouping+0x44>)
 80027cc:	68bb      	ldr	r3, [r7, #8]
 80027ce:	60d3      	str	r3, [r2, #12]
}
 80027d0:	bf00      	nop
 80027d2:	3714      	adds	r7, #20
 80027d4:	46bd      	mov	sp, r7
 80027d6:	bc80      	pop	{r7}
 80027d8:	4770      	bx	lr
 80027da:	bf00      	nop
 80027dc:	e000ed00 	.word	0xe000ed00

080027e0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80027e0:	b480      	push	{r7}
 80027e2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80027e4:	4b04      	ldr	r3, [pc, #16]	; (80027f8 <__NVIC_GetPriorityGrouping+0x18>)
 80027e6:	68db      	ldr	r3, [r3, #12]
 80027e8:	0a1b      	lsrs	r3, r3, #8
 80027ea:	f003 0307 	and.w	r3, r3, #7
}
 80027ee:	4618      	mov	r0, r3
 80027f0:	46bd      	mov	sp, r7
 80027f2:	bc80      	pop	{r7}
 80027f4:	4770      	bx	lr
 80027f6:	bf00      	nop
 80027f8:	e000ed00 	.word	0xe000ed00

080027fc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80027fc:	b480      	push	{r7}
 80027fe:	b083      	sub	sp, #12
 8002800:	af00      	add	r7, sp, #0
 8002802:	4603      	mov	r3, r0
 8002804:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002806:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800280a:	2b00      	cmp	r3, #0
 800280c:	db0b      	blt.n	8002826 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800280e:	79fb      	ldrb	r3, [r7, #7]
 8002810:	f003 021f 	and.w	r2, r3, #31
 8002814:	4906      	ldr	r1, [pc, #24]	; (8002830 <__NVIC_EnableIRQ+0x34>)
 8002816:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800281a:	095b      	lsrs	r3, r3, #5
 800281c:	2001      	movs	r0, #1
 800281e:	fa00 f202 	lsl.w	r2, r0, r2
 8002822:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002826:	bf00      	nop
 8002828:	370c      	adds	r7, #12
 800282a:	46bd      	mov	sp, r7
 800282c:	bc80      	pop	{r7}
 800282e:	4770      	bx	lr
 8002830:	e000e100 	.word	0xe000e100

08002834 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002834:	b480      	push	{r7}
 8002836:	b083      	sub	sp, #12
 8002838:	af00      	add	r7, sp, #0
 800283a:	4603      	mov	r3, r0
 800283c:	6039      	str	r1, [r7, #0]
 800283e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002840:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002844:	2b00      	cmp	r3, #0
 8002846:	db0a      	blt.n	800285e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002848:	683b      	ldr	r3, [r7, #0]
 800284a:	b2da      	uxtb	r2, r3
 800284c:	490c      	ldr	r1, [pc, #48]	; (8002880 <__NVIC_SetPriority+0x4c>)
 800284e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002852:	0112      	lsls	r2, r2, #4
 8002854:	b2d2      	uxtb	r2, r2
 8002856:	440b      	add	r3, r1
 8002858:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800285c:	e00a      	b.n	8002874 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800285e:	683b      	ldr	r3, [r7, #0]
 8002860:	b2da      	uxtb	r2, r3
 8002862:	4908      	ldr	r1, [pc, #32]	; (8002884 <__NVIC_SetPriority+0x50>)
 8002864:	79fb      	ldrb	r3, [r7, #7]
 8002866:	f003 030f 	and.w	r3, r3, #15
 800286a:	3b04      	subs	r3, #4
 800286c:	0112      	lsls	r2, r2, #4
 800286e:	b2d2      	uxtb	r2, r2
 8002870:	440b      	add	r3, r1
 8002872:	761a      	strb	r2, [r3, #24]
}
 8002874:	bf00      	nop
 8002876:	370c      	adds	r7, #12
 8002878:	46bd      	mov	sp, r7
 800287a:	bc80      	pop	{r7}
 800287c:	4770      	bx	lr
 800287e:	bf00      	nop
 8002880:	e000e100 	.word	0xe000e100
 8002884:	e000ed00 	.word	0xe000ed00

08002888 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002888:	b480      	push	{r7}
 800288a:	b089      	sub	sp, #36	; 0x24
 800288c:	af00      	add	r7, sp, #0
 800288e:	60f8      	str	r0, [r7, #12]
 8002890:	60b9      	str	r1, [r7, #8]
 8002892:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002894:	68fb      	ldr	r3, [r7, #12]
 8002896:	f003 0307 	and.w	r3, r3, #7
 800289a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800289c:	69fb      	ldr	r3, [r7, #28]
 800289e:	f1c3 0307 	rsb	r3, r3, #7
 80028a2:	2b04      	cmp	r3, #4
 80028a4:	bf28      	it	cs
 80028a6:	2304      	movcs	r3, #4
 80028a8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80028aa:	69fb      	ldr	r3, [r7, #28]
 80028ac:	3304      	adds	r3, #4
 80028ae:	2b06      	cmp	r3, #6
 80028b0:	d902      	bls.n	80028b8 <NVIC_EncodePriority+0x30>
 80028b2:	69fb      	ldr	r3, [r7, #28]
 80028b4:	3b03      	subs	r3, #3
 80028b6:	e000      	b.n	80028ba <NVIC_EncodePriority+0x32>
 80028b8:	2300      	movs	r3, #0
 80028ba:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80028bc:	f04f 32ff 	mov.w	r2, #4294967295
 80028c0:	69bb      	ldr	r3, [r7, #24]
 80028c2:	fa02 f303 	lsl.w	r3, r2, r3
 80028c6:	43da      	mvns	r2, r3
 80028c8:	68bb      	ldr	r3, [r7, #8]
 80028ca:	401a      	ands	r2, r3
 80028cc:	697b      	ldr	r3, [r7, #20]
 80028ce:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80028d0:	f04f 31ff 	mov.w	r1, #4294967295
 80028d4:	697b      	ldr	r3, [r7, #20]
 80028d6:	fa01 f303 	lsl.w	r3, r1, r3
 80028da:	43d9      	mvns	r1, r3
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80028e0:	4313      	orrs	r3, r2
         );
}
 80028e2:	4618      	mov	r0, r3
 80028e4:	3724      	adds	r7, #36	; 0x24
 80028e6:	46bd      	mov	sp, r7
 80028e8:	bc80      	pop	{r7}
 80028ea:	4770      	bx	lr

080028ec <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80028ec:	b580      	push	{r7, lr}
 80028ee:	b082      	sub	sp, #8
 80028f0:	af00      	add	r7, sp, #0
 80028f2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	3b01      	subs	r3, #1
 80028f8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80028fc:	d301      	bcc.n	8002902 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80028fe:	2301      	movs	r3, #1
 8002900:	e00f      	b.n	8002922 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002902:	4a0a      	ldr	r2, [pc, #40]	; (800292c <SysTick_Config+0x40>)
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	3b01      	subs	r3, #1
 8002908:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800290a:	210f      	movs	r1, #15
 800290c:	f04f 30ff 	mov.w	r0, #4294967295
 8002910:	f7ff ff90 	bl	8002834 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002914:	4b05      	ldr	r3, [pc, #20]	; (800292c <SysTick_Config+0x40>)
 8002916:	2200      	movs	r2, #0
 8002918:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800291a:	4b04      	ldr	r3, [pc, #16]	; (800292c <SysTick_Config+0x40>)
 800291c:	2207      	movs	r2, #7
 800291e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002920:	2300      	movs	r3, #0
}
 8002922:	4618      	mov	r0, r3
 8002924:	3708      	adds	r7, #8
 8002926:	46bd      	mov	sp, r7
 8002928:	bd80      	pop	{r7, pc}
 800292a:	bf00      	nop
 800292c:	e000e010 	.word	0xe000e010

08002930 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002930:	b580      	push	{r7, lr}
 8002932:	b082      	sub	sp, #8
 8002934:	af00      	add	r7, sp, #0
 8002936:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002938:	6878      	ldr	r0, [r7, #4]
 800293a:	f7ff ff2d 	bl	8002798 <__NVIC_SetPriorityGrouping>
}
 800293e:	bf00      	nop
 8002940:	3708      	adds	r7, #8
 8002942:	46bd      	mov	sp, r7
 8002944:	bd80      	pop	{r7, pc}

08002946 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002946:	b580      	push	{r7, lr}
 8002948:	b086      	sub	sp, #24
 800294a:	af00      	add	r7, sp, #0
 800294c:	4603      	mov	r3, r0
 800294e:	60b9      	str	r1, [r7, #8]
 8002950:	607a      	str	r2, [r7, #4]
 8002952:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002954:	2300      	movs	r3, #0
 8002956:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002958:	f7ff ff42 	bl	80027e0 <__NVIC_GetPriorityGrouping>
 800295c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800295e:	687a      	ldr	r2, [r7, #4]
 8002960:	68b9      	ldr	r1, [r7, #8]
 8002962:	6978      	ldr	r0, [r7, #20]
 8002964:	f7ff ff90 	bl	8002888 <NVIC_EncodePriority>
 8002968:	4602      	mov	r2, r0
 800296a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800296e:	4611      	mov	r1, r2
 8002970:	4618      	mov	r0, r3
 8002972:	f7ff ff5f 	bl	8002834 <__NVIC_SetPriority>
}
 8002976:	bf00      	nop
 8002978:	3718      	adds	r7, #24
 800297a:	46bd      	mov	sp, r7
 800297c:	bd80      	pop	{r7, pc}

0800297e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800297e:	b580      	push	{r7, lr}
 8002980:	b082      	sub	sp, #8
 8002982:	af00      	add	r7, sp, #0
 8002984:	4603      	mov	r3, r0
 8002986:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002988:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800298c:	4618      	mov	r0, r3
 800298e:	f7ff ff35 	bl	80027fc <__NVIC_EnableIRQ>
}
 8002992:	bf00      	nop
 8002994:	3708      	adds	r7, #8
 8002996:	46bd      	mov	sp, r7
 8002998:	bd80      	pop	{r7, pc}

0800299a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800299a:	b580      	push	{r7, lr}
 800299c:	b082      	sub	sp, #8
 800299e:	af00      	add	r7, sp, #0
 80029a0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80029a2:	6878      	ldr	r0, [r7, #4]
 80029a4:	f7ff ffa2 	bl	80028ec <SysTick_Config>
 80029a8:	4603      	mov	r3, r0
}
 80029aa:	4618      	mov	r0, r3
 80029ac:	3708      	adds	r7, #8
 80029ae:	46bd      	mov	sp, r7
 80029b0:	bd80      	pop	{r7, pc}
	...

080029b4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80029b4:	b480      	push	{r7}
 80029b6:	b08b      	sub	sp, #44	; 0x2c
 80029b8:	af00      	add	r7, sp, #0
 80029ba:	6078      	str	r0, [r7, #4]
 80029bc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80029be:	2300      	movs	r3, #0
 80029c0:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80029c2:	2300      	movs	r3, #0
 80029c4:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80029c6:	e127      	b.n	8002c18 <HAL_GPIO_Init+0x264>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80029c8:	2201      	movs	r2, #1
 80029ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029cc:	fa02 f303 	lsl.w	r3, r2, r3
 80029d0:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80029d2:	683b      	ldr	r3, [r7, #0]
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	69fa      	ldr	r2, [r7, #28]
 80029d8:	4013      	ands	r3, r2
 80029da:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80029dc:	69ba      	ldr	r2, [r7, #24]
 80029de:	69fb      	ldr	r3, [r7, #28]
 80029e0:	429a      	cmp	r2, r3
 80029e2:	f040 8116 	bne.w	8002c12 <HAL_GPIO_Init+0x25e>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80029e6:	683b      	ldr	r3, [r7, #0]
 80029e8:	685b      	ldr	r3, [r3, #4]
 80029ea:	2b12      	cmp	r3, #18
 80029ec:	d034      	beq.n	8002a58 <HAL_GPIO_Init+0xa4>
 80029ee:	2b12      	cmp	r3, #18
 80029f0:	d80d      	bhi.n	8002a0e <HAL_GPIO_Init+0x5a>
 80029f2:	2b02      	cmp	r3, #2
 80029f4:	d02b      	beq.n	8002a4e <HAL_GPIO_Init+0x9a>
 80029f6:	2b02      	cmp	r3, #2
 80029f8:	d804      	bhi.n	8002a04 <HAL_GPIO_Init+0x50>
 80029fa:	2b00      	cmp	r3, #0
 80029fc:	d031      	beq.n	8002a62 <HAL_GPIO_Init+0xae>
 80029fe:	2b01      	cmp	r3, #1
 8002a00:	d01c      	beq.n	8002a3c <HAL_GPIO_Init+0x88>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8002a02:	e048      	b.n	8002a96 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8002a04:	2b03      	cmp	r3, #3
 8002a06:	d043      	beq.n	8002a90 <HAL_GPIO_Init+0xdc>
 8002a08:	2b11      	cmp	r3, #17
 8002a0a:	d01b      	beq.n	8002a44 <HAL_GPIO_Init+0x90>
          break;
 8002a0c:	e043      	b.n	8002a96 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8002a0e:	4a89      	ldr	r2, [pc, #548]	; (8002c34 <HAL_GPIO_Init+0x280>)
 8002a10:	4293      	cmp	r3, r2
 8002a12:	d026      	beq.n	8002a62 <HAL_GPIO_Init+0xae>
 8002a14:	4a87      	ldr	r2, [pc, #540]	; (8002c34 <HAL_GPIO_Init+0x280>)
 8002a16:	4293      	cmp	r3, r2
 8002a18:	d806      	bhi.n	8002a28 <HAL_GPIO_Init+0x74>
 8002a1a:	4a87      	ldr	r2, [pc, #540]	; (8002c38 <HAL_GPIO_Init+0x284>)
 8002a1c:	4293      	cmp	r3, r2
 8002a1e:	d020      	beq.n	8002a62 <HAL_GPIO_Init+0xae>
 8002a20:	4a86      	ldr	r2, [pc, #536]	; (8002c3c <HAL_GPIO_Init+0x288>)
 8002a22:	4293      	cmp	r3, r2
 8002a24:	d01d      	beq.n	8002a62 <HAL_GPIO_Init+0xae>
          break;
 8002a26:	e036      	b.n	8002a96 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8002a28:	4a85      	ldr	r2, [pc, #532]	; (8002c40 <HAL_GPIO_Init+0x28c>)
 8002a2a:	4293      	cmp	r3, r2
 8002a2c:	d019      	beq.n	8002a62 <HAL_GPIO_Init+0xae>
 8002a2e:	4a85      	ldr	r2, [pc, #532]	; (8002c44 <HAL_GPIO_Init+0x290>)
 8002a30:	4293      	cmp	r3, r2
 8002a32:	d016      	beq.n	8002a62 <HAL_GPIO_Init+0xae>
 8002a34:	4a84      	ldr	r2, [pc, #528]	; (8002c48 <HAL_GPIO_Init+0x294>)
 8002a36:	4293      	cmp	r3, r2
 8002a38:	d013      	beq.n	8002a62 <HAL_GPIO_Init+0xae>
          break;
 8002a3a:	e02c      	b.n	8002a96 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8002a3c:	683b      	ldr	r3, [r7, #0]
 8002a3e:	68db      	ldr	r3, [r3, #12]
 8002a40:	623b      	str	r3, [r7, #32]
          break;
 8002a42:	e028      	b.n	8002a96 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8002a44:	683b      	ldr	r3, [r7, #0]
 8002a46:	68db      	ldr	r3, [r3, #12]
 8002a48:	3304      	adds	r3, #4
 8002a4a:	623b      	str	r3, [r7, #32]
          break;
 8002a4c:	e023      	b.n	8002a96 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8002a4e:	683b      	ldr	r3, [r7, #0]
 8002a50:	68db      	ldr	r3, [r3, #12]
 8002a52:	3308      	adds	r3, #8
 8002a54:	623b      	str	r3, [r7, #32]
          break;
 8002a56:	e01e      	b.n	8002a96 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002a58:	683b      	ldr	r3, [r7, #0]
 8002a5a:	68db      	ldr	r3, [r3, #12]
 8002a5c:	330c      	adds	r3, #12
 8002a5e:	623b      	str	r3, [r7, #32]
          break;
 8002a60:	e019      	b.n	8002a96 <HAL_GPIO_Init+0xe2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8002a62:	683b      	ldr	r3, [r7, #0]
 8002a64:	689b      	ldr	r3, [r3, #8]
 8002a66:	2b00      	cmp	r3, #0
 8002a68:	d102      	bne.n	8002a70 <HAL_GPIO_Init+0xbc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8002a6a:	2304      	movs	r3, #4
 8002a6c:	623b      	str	r3, [r7, #32]
          break;
 8002a6e:	e012      	b.n	8002a96 <HAL_GPIO_Init+0xe2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8002a70:	683b      	ldr	r3, [r7, #0]
 8002a72:	689b      	ldr	r3, [r3, #8]
 8002a74:	2b01      	cmp	r3, #1
 8002a76:	d105      	bne.n	8002a84 <HAL_GPIO_Init+0xd0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002a78:	2308      	movs	r3, #8
 8002a7a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	69fa      	ldr	r2, [r7, #28]
 8002a80:	611a      	str	r2, [r3, #16]
          break;
 8002a82:	e008      	b.n	8002a96 <HAL_GPIO_Init+0xe2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002a84:	2308      	movs	r3, #8
 8002a86:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	69fa      	ldr	r2, [r7, #28]
 8002a8c:	615a      	str	r2, [r3, #20]
          break;
 8002a8e:	e002      	b.n	8002a96 <HAL_GPIO_Init+0xe2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8002a90:	2300      	movs	r3, #0
 8002a92:	623b      	str	r3, [r7, #32]
          break;
 8002a94:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002a96:	69bb      	ldr	r3, [r7, #24]
 8002a98:	2bff      	cmp	r3, #255	; 0xff
 8002a9a:	d801      	bhi.n	8002aa0 <HAL_GPIO_Init+0xec>
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	e001      	b.n	8002aa4 <HAL_GPIO_Init+0xf0>
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	3304      	adds	r3, #4
 8002aa4:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002aa6:	69bb      	ldr	r3, [r7, #24]
 8002aa8:	2bff      	cmp	r3, #255	; 0xff
 8002aaa:	d802      	bhi.n	8002ab2 <HAL_GPIO_Init+0xfe>
 8002aac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002aae:	009b      	lsls	r3, r3, #2
 8002ab0:	e002      	b.n	8002ab8 <HAL_GPIO_Init+0x104>
 8002ab2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ab4:	3b08      	subs	r3, #8
 8002ab6:	009b      	lsls	r3, r3, #2
 8002ab8:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002aba:	697b      	ldr	r3, [r7, #20]
 8002abc:	681a      	ldr	r2, [r3, #0]
 8002abe:	210f      	movs	r1, #15
 8002ac0:	693b      	ldr	r3, [r7, #16]
 8002ac2:	fa01 f303 	lsl.w	r3, r1, r3
 8002ac6:	43db      	mvns	r3, r3
 8002ac8:	401a      	ands	r2, r3
 8002aca:	6a39      	ldr	r1, [r7, #32]
 8002acc:	693b      	ldr	r3, [r7, #16]
 8002ace:	fa01 f303 	lsl.w	r3, r1, r3
 8002ad2:	431a      	orrs	r2, r3
 8002ad4:	697b      	ldr	r3, [r7, #20]
 8002ad6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002ad8:	683b      	ldr	r3, [r7, #0]
 8002ada:	685b      	ldr	r3, [r3, #4]
 8002adc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002ae0:	2b00      	cmp	r3, #0
 8002ae2:	f000 8096 	beq.w	8002c12 <HAL_GPIO_Init+0x25e>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002ae6:	4b59      	ldr	r3, [pc, #356]	; (8002c4c <HAL_GPIO_Init+0x298>)
 8002ae8:	699b      	ldr	r3, [r3, #24]
 8002aea:	4a58      	ldr	r2, [pc, #352]	; (8002c4c <HAL_GPIO_Init+0x298>)
 8002aec:	f043 0301 	orr.w	r3, r3, #1
 8002af0:	6193      	str	r3, [r2, #24]
 8002af2:	4b56      	ldr	r3, [pc, #344]	; (8002c4c <HAL_GPIO_Init+0x298>)
 8002af4:	699b      	ldr	r3, [r3, #24]
 8002af6:	f003 0301 	and.w	r3, r3, #1
 8002afa:	60bb      	str	r3, [r7, #8]
 8002afc:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8002afe:	4a54      	ldr	r2, [pc, #336]	; (8002c50 <HAL_GPIO_Init+0x29c>)
 8002b00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b02:	089b      	lsrs	r3, r3, #2
 8002b04:	3302      	adds	r3, #2
 8002b06:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002b0a:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8002b0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b0e:	f003 0303 	and.w	r3, r3, #3
 8002b12:	009b      	lsls	r3, r3, #2
 8002b14:	220f      	movs	r2, #15
 8002b16:	fa02 f303 	lsl.w	r3, r2, r3
 8002b1a:	43db      	mvns	r3, r3
 8002b1c:	68fa      	ldr	r2, [r7, #12]
 8002b1e:	4013      	ands	r3, r2
 8002b20:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	4a4b      	ldr	r2, [pc, #300]	; (8002c54 <HAL_GPIO_Init+0x2a0>)
 8002b26:	4293      	cmp	r3, r2
 8002b28:	d013      	beq.n	8002b52 <HAL_GPIO_Init+0x19e>
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	4a4a      	ldr	r2, [pc, #296]	; (8002c58 <HAL_GPIO_Init+0x2a4>)
 8002b2e:	4293      	cmp	r3, r2
 8002b30:	d00d      	beq.n	8002b4e <HAL_GPIO_Init+0x19a>
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	4a49      	ldr	r2, [pc, #292]	; (8002c5c <HAL_GPIO_Init+0x2a8>)
 8002b36:	4293      	cmp	r3, r2
 8002b38:	d007      	beq.n	8002b4a <HAL_GPIO_Init+0x196>
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	4a48      	ldr	r2, [pc, #288]	; (8002c60 <HAL_GPIO_Init+0x2ac>)
 8002b3e:	4293      	cmp	r3, r2
 8002b40:	d101      	bne.n	8002b46 <HAL_GPIO_Init+0x192>
 8002b42:	2303      	movs	r3, #3
 8002b44:	e006      	b.n	8002b54 <HAL_GPIO_Init+0x1a0>
 8002b46:	2304      	movs	r3, #4
 8002b48:	e004      	b.n	8002b54 <HAL_GPIO_Init+0x1a0>
 8002b4a:	2302      	movs	r3, #2
 8002b4c:	e002      	b.n	8002b54 <HAL_GPIO_Init+0x1a0>
 8002b4e:	2301      	movs	r3, #1
 8002b50:	e000      	b.n	8002b54 <HAL_GPIO_Init+0x1a0>
 8002b52:	2300      	movs	r3, #0
 8002b54:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002b56:	f002 0203 	and.w	r2, r2, #3
 8002b5a:	0092      	lsls	r2, r2, #2
 8002b5c:	4093      	lsls	r3, r2
 8002b5e:	68fa      	ldr	r2, [r7, #12]
 8002b60:	4313      	orrs	r3, r2
 8002b62:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8002b64:	493a      	ldr	r1, [pc, #232]	; (8002c50 <HAL_GPIO_Init+0x29c>)
 8002b66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b68:	089b      	lsrs	r3, r3, #2
 8002b6a:	3302      	adds	r3, #2
 8002b6c:	68fa      	ldr	r2, [r7, #12]
 8002b6e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002b72:	683b      	ldr	r3, [r7, #0]
 8002b74:	685b      	ldr	r3, [r3, #4]
 8002b76:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002b7a:	2b00      	cmp	r3, #0
 8002b7c:	d006      	beq.n	8002b8c <HAL_GPIO_Init+0x1d8>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002b7e:	4b39      	ldr	r3, [pc, #228]	; (8002c64 <HAL_GPIO_Init+0x2b0>)
 8002b80:	681a      	ldr	r2, [r3, #0]
 8002b82:	4938      	ldr	r1, [pc, #224]	; (8002c64 <HAL_GPIO_Init+0x2b0>)
 8002b84:	69bb      	ldr	r3, [r7, #24]
 8002b86:	4313      	orrs	r3, r2
 8002b88:	600b      	str	r3, [r1, #0]
 8002b8a:	e006      	b.n	8002b9a <HAL_GPIO_Init+0x1e6>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002b8c:	4b35      	ldr	r3, [pc, #212]	; (8002c64 <HAL_GPIO_Init+0x2b0>)
 8002b8e:	681a      	ldr	r2, [r3, #0]
 8002b90:	69bb      	ldr	r3, [r7, #24]
 8002b92:	43db      	mvns	r3, r3
 8002b94:	4933      	ldr	r1, [pc, #204]	; (8002c64 <HAL_GPIO_Init+0x2b0>)
 8002b96:	4013      	ands	r3, r2
 8002b98:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002b9a:	683b      	ldr	r3, [r7, #0]
 8002b9c:	685b      	ldr	r3, [r3, #4]
 8002b9e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ba2:	2b00      	cmp	r3, #0
 8002ba4:	d006      	beq.n	8002bb4 <HAL_GPIO_Init+0x200>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002ba6:	4b2f      	ldr	r3, [pc, #188]	; (8002c64 <HAL_GPIO_Init+0x2b0>)
 8002ba8:	685a      	ldr	r2, [r3, #4]
 8002baa:	492e      	ldr	r1, [pc, #184]	; (8002c64 <HAL_GPIO_Init+0x2b0>)
 8002bac:	69bb      	ldr	r3, [r7, #24]
 8002bae:	4313      	orrs	r3, r2
 8002bb0:	604b      	str	r3, [r1, #4]
 8002bb2:	e006      	b.n	8002bc2 <HAL_GPIO_Init+0x20e>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8002bb4:	4b2b      	ldr	r3, [pc, #172]	; (8002c64 <HAL_GPIO_Init+0x2b0>)
 8002bb6:	685a      	ldr	r2, [r3, #4]
 8002bb8:	69bb      	ldr	r3, [r7, #24]
 8002bba:	43db      	mvns	r3, r3
 8002bbc:	4929      	ldr	r1, [pc, #164]	; (8002c64 <HAL_GPIO_Init+0x2b0>)
 8002bbe:	4013      	ands	r3, r2
 8002bc0:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002bc2:	683b      	ldr	r3, [r7, #0]
 8002bc4:	685b      	ldr	r3, [r3, #4]
 8002bc6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002bca:	2b00      	cmp	r3, #0
 8002bcc:	d006      	beq.n	8002bdc <HAL_GPIO_Init+0x228>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002bce:	4b25      	ldr	r3, [pc, #148]	; (8002c64 <HAL_GPIO_Init+0x2b0>)
 8002bd0:	689a      	ldr	r2, [r3, #8]
 8002bd2:	4924      	ldr	r1, [pc, #144]	; (8002c64 <HAL_GPIO_Init+0x2b0>)
 8002bd4:	69bb      	ldr	r3, [r7, #24]
 8002bd6:	4313      	orrs	r3, r2
 8002bd8:	608b      	str	r3, [r1, #8]
 8002bda:	e006      	b.n	8002bea <HAL_GPIO_Init+0x236>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8002bdc:	4b21      	ldr	r3, [pc, #132]	; (8002c64 <HAL_GPIO_Init+0x2b0>)
 8002bde:	689a      	ldr	r2, [r3, #8]
 8002be0:	69bb      	ldr	r3, [r7, #24]
 8002be2:	43db      	mvns	r3, r3
 8002be4:	491f      	ldr	r1, [pc, #124]	; (8002c64 <HAL_GPIO_Init+0x2b0>)
 8002be6:	4013      	ands	r3, r2
 8002be8:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002bea:	683b      	ldr	r3, [r7, #0]
 8002bec:	685b      	ldr	r3, [r3, #4]
 8002bee:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002bf2:	2b00      	cmp	r3, #0
 8002bf4:	d006      	beq.n	8002c04 <HAL_GPIO_Init+0x250>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8002bf6:	4b1b      	ldr	r3, [pc, #108]	; (8002c64 <HAL_GPIO_Init+0x2b0>)
 8002bf8:	68da      	ldr	r2, [r3, #12]
 8002bfa:	491a      	ldr	r1, [pc, #104]	; (8002c64 <HAL_GPIO_Init+0x2b0>)
 8002bfc:	69bb      	ldr	r3, [r7, #24]
 8002bfe:	4313      	orrs	r3, r2
 8002c00:	60cb      	str	r3, [r1, #12]
 8002c02:	e006      	b.n	8002c12 <HAL_GPIO_Init+0x25e>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8002c04:	4b17      	ldr	r3, [pc, #92]	; (8002c64 <HAL_GPIO_Init+0x2b0>)
 8002c06:	68da      	ldr	r2, [r3, #12]
 8002c08:	69bb      	ldr	r3, [r7, #24]
 8002c0a:	43db      	mvns	r3, r3
 8002c0c:	4915      	ldr	r1, [pc, #84]	; (8002c64 <HAL_GPIO_Init+0x2b0>)
 8002c0e:	4013      	ands	r3, r2
 8002c10:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8002c12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c14:	3301      	adds	r3, #1
 8002c16:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002c18:	683b      	ldr	r3, [r7, #0]
 8002c1a:	681a      	ldr	r2, [r3, #0]
 8002c1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c1e:	fa22 f303 	lsr.w	r3, r2, r3
 8002c22:	2b00      	cmp	r3, #0
 8002c24:	f47f aed0 	bne.w	80029c8 <HAL_GPIO_Init+0x14>
  }
}
 8002c28:	bf00      	nop
 8002c2a:	372c      	adds	r7, #44	; 0x2c
 8002c2c:	46bd      	mov	sp, r7
 8002c2e:	bc80      	pop	{r7}
 8002c30:	4770      	bx	lr
 8002c32:	bf00      	nop
 8002c34:	10210000 	.word	0x10210000
 8002c38:	10110000 	.word	0x10110000
 8002c3c:	10120000 	.word	0x10120000
 8002c40:	10310000 	.word	0x10310000
 8002c44:	10320000 	.word	0x10320000
 8002c48:	10220000 	.word	0x10220000
 8002c4c:	40021000 	.word	0x40021000
 8002c50:	40010000 	.word	0x40010000
 8002c54:	40010800 	.word	0x40010800
 8002c58:	40010c00 	.word	0x40010c00
 8002c5c:	40011000 	.word	0x40011000
 8002c60:	40011400 	.word	0x40011400
 8002c64:	40010400 	.word	0x40010400

08002c68 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002c68:	b480      	push	{r7}
 8002c6a:	b085      	sub	sp, #20
 8002c6c:	af00      	add	r7, sp, #0
 8002c6e:	6078      	str	r0, [r7, #4]
 8002c70:	460b      	mov	r3, r1
 8002c72:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	689a      	ldr	r2, [r3, #8]
 8002c78:	887b      	ldrh	r3, [r7, #2]
 8002c7a:	4013      	ands	r3, r2
 8002c7c:	2b00      	cmp	r3, #0
 8002c7e:	d002      	beq.n	8002c86 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002c80:	2301      	movs	r3, #1
 8002c82:	73fb      	strb	r3, [r7, #15]
 8002c84:	e001      	b.n	8002c8a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002c86:	2300      	movs	r3, #0
 8002c88:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002c8a:	7bfb      	ldrb	r3, [r7, #15]
}
 8002c8c:	4618      	mov	r0, r3
 8002c8e:	3714      	adds	r7, #20
 8002c90:	46bd      	mov	sp, r7
 8002c92:	bc80      	pop	{r7}
 8002c94:	4770      	bx	lr

08002c96 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002c96:	b480      	push	{r7}
 8002c98:	b083      	sub	sp, #12
 8002c9a:	af00      	add	r7, sp, #0
 8002c9c:	6078      	str	r0, [r7, #4]
 8002c9e:	460b      	mov	r3, r1
 8002ca0:	807b      	strh	r3, [r7, #2]
 8002ca2:	4613      	mov	r3, r2
 8002ca4:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002ca6:	787b      	ldrb	r3, [r7, #1]
 8002ca8:	2b00      	cmp	r3, #0
 8002caa:	d003      	beq.n	8002cb4 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002cac:	887a      	ldrh	r2, [r7, #2]
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8002cb2:	e003      	b.n	8002cbc <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002cb4:	887b      	ldrh	r3, [r7, #2]
 8002cb6:	041a      	lsls	r2, r3, #16
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	611a      	str	r2, [r3, #16]
}
 8002cbc:	bf00      	nop
 8002cbe:	370c      	adds	r7, #12
 8002cc0:	46bd      	mov	sp, r7
 8002cc2:	bc80      	pop	{r7}
 8002cc4:	4770      	bx	lr

08002cc6 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002cc6:	b480      	push	{r7}
 8002cc8:	b083      	sub	sp, #12
 8002cca:	af00      	add	r7, sp, #0
 8002ccc:	6078      	str	r0, [r7, #4]
 8002cce:	460b      	mov	r3, r1
 8002cd0:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) != 0x00u)
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	68da      	ldr	r2, [r3, #12]
 8002cd6:	887b      	ldrh	r3, [r7, #2]
 8002cd8:	4013      	ands	r3, r2
 8002cda:	2b00      	cmp	r3, #0
 8002cdc:	d003      	beq.n	8002ce6 <HAL_GPIO_TogglePin+0x20>
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002cde:	887a      	ldrh	r2, [r7, #2]
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	615a      	str	r2, [r3, #20]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
  }
}
 8002ce4:	e002      	b.n	8002cec <HAL_GPIO_TogglePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002ce6:	887a      	ldrh	r2, [r7, #2]
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	611a      	str	r2, [r3, #16]
}
 8002cec:	bf00      	nop
 8002cee:	370c      	adds	r7, #12
 8002cf0:	46bd      	mov	sp, r7
 8002cf2:	bc80      	pop	{r7}
 8002cf4:	4770      	bx	lr
	...

08002cf8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002cf8:	b580      	push	{r7, lr}
 8002cfa:	b086      	sub	sp, #24
 8002cfc:	af00      	add	r7, sp, #0
 8002cfe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	2b00      	cmp	r3, #0
 8002d04:	d101      	bne.n	8002d0a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002d06:	2301      	movs	r3, #1
 8002d08:	e26c      	b.n	80031e4 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	f003 0301 	and.w	r3, r3, #1
 8002d12:	2b00      	cmp	r3, #0
 8002d14:	f000 8087 	beq.w	8002e26 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002d18:	4b92      	ldr	r3, [pc, #584]	; (8002f64 <HAL_RCC_OscConfig+0x26c>)
 8002d1a:	685b      	ldr	r3, [r3, #4]
 8002d1c:	f003 030c 	and.w	r3, r3, #12
 8002d20:	2b04      	cmp	r3, #4
 8002d22:	d00c      	beq.n	8002d3e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002d24:	4b8f      	ldr	r3, [pc, #572]	; (8002f64 <HAL_RCC_OscConfig+0x26c>)
 8002d26:	685b      	ldr	r3, [r3, #4]
 8002d28:	f003 030c 	and.w	r3, r3, #12
 8002d2c:	2b08      	cmp	r3, #8
 8002d2e:	d112      	bne.n	8002d56 <HAL_RCC_OscConfig+0x5e>
 8002d30:	4b8c      	ldr	r3, [pc, #560]	; (8002f64 <HAL_RCC_OscConfig+0x26c>)
 8002d32:	685b      	ldr	r3, [r3, #4]
 8002d34:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002d38:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002d3c:	d10b      	bne.n	8002d56 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002d3e:	4b89      	ldr	r3, [pc, #548]	; (8002f64 <HAL_RCC_OscConfig+0x26c>)
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d46:	2b00      	cmp	r3, #0
 8002d48:	d06c      	beq.n	8002e24 <HAL_RCC_OscConfig+0x12c>
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	685b      	ldr	r3, [r3, #4]
 8002d4e:	2b00      	cmp	r3, #0
 8002d50:	d168      	bne.n	8002e24 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8002d52:	2301      	movs	r3, #1
 8002d54:	e246      	b.n	80031e4 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	685b      	ldr	r3, [r3, #4]
 8002d5a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002d5e:	d106      	bne.n	8002d6e <HAL_RCC_OscConfig+0x76>
 8002d60:	4b80      	ldr	r3, [pc, #512]	; (8002f64 <HAL_RCC_OscConfig+0x26c>)
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	4a7f      	ldr	r2, [pc, #508]	; (8002f64 <HAL_RCC_OscConfig+0x26c>)
 8002d66:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002d6a:	6013      	str	r3, [r2, #0]
 8002d6c:	e02e      	b.n	8002dcc <HAL_RCC_OscConfig+0xd4>
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	685b      	ldr	r3, [r3, #4]
 8002d72:	2b00      	cmp	r3, #0
 8002d74:	d10c      	bne.n	8002d90 <HAL_RCC_OscConfig+0x98>
 8002d76:	4b7b      	ldr	r3, [pc, #492]	; (8002f64 <HAL_RCC_OscConfig+0x26c>)
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	4a7a      	ldr	r2, [pc, #488]	; (8002f64 <HAL_RCC_OscConfig+0x26c>)
 8002d7c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002d80:	6013      	str	r3, [r2, #0]
 8002d82:	4b78      	ldr	r3, [pc, #480]	; (8002f64 <HAL_RCC_OscConfig+0x26c>)
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	4a77      	ldr	r2, [pc, #476]	; (8002f64 <HAL_RCC_OscConfig+0x26c>)
 8002d88:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002d8c:	6013      	str	r3, [r2, #0]
 8002d8e:	e01d      	b.n	8002dcc <HAL_RCC_OscConfig+0xd4>
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	685b      	ldr	r3, [r3, #4]
 8002d94:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002d98:	d10c      	bne.n	8002db4 <HAL_RCC_OscConfig+0xbc>
 8002d9a:	4b72      	ldr	r3, [pc, #456]	; (8002f64 <HAL_RCC_OscConfig+0x26c>)
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	4a71      	ldr	r2, [pc, #452]	; (8002f64 <HAL_RCC_OscConfig+0x26c>)
 8002da0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002da4:	6013      	str	r3, [r2, #0]
 8002da6:	4b6f      	ldr	r3, [pc, #444]	; (8002f64 <HAL_RCC_OscConfig+0x26c>)
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	4a6e      	ldr	r2, [pc, #440]	; (8002f64 <HAL_RCC_OscConfig+0x26c>)
 8002dac:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002db0:	6013      	str	r3, [r2, #0]
 8002db2:	e00b      	b.n	8002dcc <HAL_RCC_OscConfig+0xd4>
 8002db4:	4b6b      	ldr	r3, [pc, #428]	; (8002f64 <HAL_RCC_OscConfig+0x26c>)
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	4a6a      	ldr	r2, [pc, #424]	; (8002f64 <HAL_RCC_OscConfig+0x26c>)
 8002dba:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002dbe:	6013      	str	r3, [r2, #0]
 8002dc0:	4b68      	ldr	r3, [pc, #416]	; (8002f64 <HAL_RCC_OscConfig+0x26c>)
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	4a67      	ldr	r2, [pc, #412]	; (8002f64 <HAL_RCC_OscConfig+0x26c>)
 8002dc6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002dca:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	685b      	ldr	r3, [r3, #4]
 8002dd0:	2b00      	cmp	r3, #0
 8002dd2:	d013      	beq.n	8002dfc <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002dd4:	f7ff f878 	bl	8001ec8 <HAL_GetTick>
 8002dd8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002dda:	e008      	b.n	8002dee <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002ddc:	f7ff f874 	bl	8001ec8 <HAL_GetTick>
 8002de0:	4602      	mov	r2, r0
 8002de2:	693b      	ldr	r3, [r7, #16]
 8002de4:	1ad3      	subs	r3, r2, r3
 8002de6:	2b64      	cmp	r3, #100	; 0x64
 8002de8:	d901      	bls.n	8002dee <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8002dea:	2303      	movs	r3, #3
 8002dec:	e1fa      	b.n	80031e4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002dee:	4b5d      	ldr	r3, [pc, #372]	; (8002f64 <HAL_RCC_OscConfig+0x26c>)
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002df6:	2b00      	cmp	r3, #0
 8002df8:	d0f0      	beq.n	8002ddc <HAL_RCC_OscConfig+0xe4>
 8002dfa:	e014      	b.n	8002e26 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002dfc:	f7ff f864 	bl	8001ec8 <HAL_GetTick>
 8002e00:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002e02:	e008      	b.n	8002e16 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002e04:	f7ff f860 	bl	8001ec8 <HAL_GetTick>
 8002e08:	4602      	mov	r2, r0
 8002e0a:	693b      	ldr	r3, [r7, #16]
 8002e0c:	1ad3      	subs	r3, r2, r3
 8002e0e:	2b64      	cmp	r3, #100	; 0x64
 8002e10:	d901      	bls.n	8002e16 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002e12:	2303      	movs	r3, #3
 8002e14:	e1e6      	b.n	80031e4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002e16:	4b53      	ldr	r3, [pc, #332]	; (8002f64 <HAL_RCC_OscConfig+0x26c>)
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e1e:	2b00      	cmp	r3, #0
 8002e20:	d1f0      	bne.n	8002e04 <HAL_RCC_OscConfig+0x10c>
 8002e22:	e000      	b.n	8002e26 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002e24:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	f003 0302 	and.w	r3, r3, #2
 8002e2e:	2b00      	cmp	r3, #0
 8002e30:	d063      	beq.n	8002efa <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002e32:	4b4c      	ldr	r3, [pc, #304]	; (8002f64 <HAL_RCC_OscConfig+0x26c>)
 8002e34:	685b      	ldr	r3, [r3, #4]
 8002e36:	f003 030c 	and.w	r3, r3, #12
 8002e3a:	2b00      	cmp	r3, #0
 8002e3c:	d00b      	beq.n	8002e56 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002e3e:	4b49      	ldr	r3, [pc, #292]	; (8002f64 <HAL_RCC_OscConfig+0x26c>)
 8002e40:	685b      	ldr	r3, [r3, #4]
 8002e42:	f003 030c 	and.w	r3, r3, #12
 8002e46:	2b08      	cmp	r3, #8
 8002e48:	d11c      	bne.n	8002e84 <HAL_RCC_OscConfig+0x18c>
 8002e4a:	4b46      	ldr	r3, [pc, #280]	; (8002f64 <HAL_RCC_OscConfig+0x26c>)
 8002e4c:	685b      	ldr	r3, [r3, #4]
 8002e4e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002e52:	2b00      	cmp	r3, #0
 8002e54:	d116      	bne.n	8002e84 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002e56:	4b43      	ldr	r3, [pc, #268]	; (8002f64 <HAL_RCC_OscConfig+0x26c>)
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	f003 0302 	and.w	r3, r3, #2
 8002e5e:	2b00      	cmp	r3, #0
 8002e60:	d005      	beq.n	8002e6e <HAL_RCC_OscConfig+0x176>
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	691b      	ldr	r3, [r3, #16]
 8002e66:	2b01      	cmp	r3, #1
 8002e68:	d001      	beq.n	8002e6e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8002e6a:	2301      	movs	r3, #1
 8002e6c:	e1ba      	b.n	80031e4 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002e6e:	4b3d      	ldr	r3, [pc, #244]	; (8002f64 <HAL_RCC_OscConfig+0x26c>)
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	695b      	ldr	r3, [r3, #20]
 8002e7a:	00db      	lsls	r3, r3, #3
 8002e7c:	4939      	ldr	r1, [pc, #228]	; (8002f64 <HAL_RCC_OscConfig+0x26c>)
 8002e7e:	4313      	orrs	r3, r2
 8002e80:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002e82:	e03a      	b.n	8002efa <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	691b      	ldr	r3, [r3, #16]
 8002e88:	2b00      	cmp	r3, #0
 8002e8a:	d020      	beq.n	8002ece <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002e8c:	4b36      	ldr	r3, [pc, #216]	; (8002f68 <HAL_RCC_OscConfig+0x270>)
 8002e8e:	2201      	movs	r2, #1
 8002e90:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e92:	f7ff f819 	bl	8001ec8 <HAL_GetTick>
 8002e96:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002e98:	e008      	b.n	8002eac <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002e9a:	f7ff f815 	bl	8001ec8 <HAL_GetTick>
 8002e9e:	4602      	mov	r2, r0
 8002ea0:	693b      	ldr	r3, [r7, #16]
 8002ea2:	1ad3      	subs	r3, r2, r3
 8002ea4:	2b02      	cmp	r3, #2
 8002ea6:	d901      	bls.n	8002eac <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002ea8:	2303      	movs	r3, #3
 8002eaa:	e19b      	b.n	80031e4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002eac:	4b2d      	ldr	r3, [pc, #180]	; (8002f64 <HAL_RCC_OscConfig+0x26c>)
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	f003 0302 	and.w	r3, r3, #2
 8002eb4:	2b00      	cmp	r3, #0
 8002eb6:	d0f0      	beq.n	8002e9a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002eb8:	4b2a      	ldr	r3, [pc, #168]	; (8002f64 <HAL_RCC_OscConfig+0x26c>)
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	695b      	ldr	r3, [r3, #20]
 8002ec4:	00db      	lsls	r3, r3, #3
 8002ec6:	4927      	ldr	r1, [pc, #156]	; (8002f64 <HAL_RCC_OscConfig+0x26c>)
 8002ec8:	4313      	orrs	r3, r2
 8002eca:	600b      	str	r3, [r1, #0]
 8002ecc:	e015      	b.n	8002efa <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002ece:	4b26      	ldr	r3, [pc, #152]	; (8002f68 <HAL_RCC_OscConfig+0x270>)
 8002ed0:	2200      	movs	r2, #0
 8002ed2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ed4:	f7fe fff8 	bl	8001ec8 <HAL_GetTick>
 8002ed8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002eda:	e008      	b.n	8002eee <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002edc:	f7fe fff4 	bl	8001ec8 <HAL_GetTick>
 8002ee0:	4602      	mov	r2, r0
 8002ee2:	693b      	ldr	r3, [r7, #16]
 8002ee4:	1ad3      	subs	r3, r2, r3
 8002ee6:	2b02      	cmp	r3, #2
 8002ee8:	d901      	bls.n	8002eee <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8002eea:	2303      	movs	r3, #3
 8002eec:	e17a      	b.n	80031e4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002eee:	4b1d      	ldr	r3, [pc, #116]	; (8002f64 <HAL_RCC_OscConfig+0x26c>)
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	f003 0302 	and.w	r3, r3, #2
 8002ef6:	2b00      	cmp	r3, #0
 8002ef8:	d1f0      	bne.n	8002edc <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	f003 0308 	and.w	r3, r3, #8
 8002f02:	2b00      	cmp	r3, #0
 8002f04:	d03a      	beq.n	8002f7c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	699b      	ldr	r3, [r3, #24]
 8002f0a:	2b00      	cmp	r3, #0
 8002f0c:	d019      	beq.n	8002f42 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002f0e:	4b17      	ldr	r3, [pc, #92]	; (8002f6c <HAL_RCC_OscConfig+0x274>)
 8002f10:	2201      	movs	r2, #1
 8002f12:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002f14:	f7fe ffd8 	bl	8001ec8 <HAL_GetTick>
 8002f18:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002f1a:	e008      	b.n	8002f2e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002f1c:	f7fe ffd4 	bl	8001ec8 <HAL_GetTick>
 8002f20:	4602      	mov	r2, r0
 8002f22:	693b      	ldr	r3, [r7, #16]
 8002f24:	1ad3      	subs	r3, r2, r3
 8002f26:	2b02      	cmp	r3, #2
 8002f28:	d901      	bls.n	8002f2e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8002f2a:	2303      	movs	r3, #3
 8002f2c:	e15a      	b.n	80031e4 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002f2e:	4b0d      	ldr	r3, [pc, #52]	; (8002f64 <HAL_RCC_OscConfig+0x26c>)
 8002f30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f32:	f003 0302 	and.w	r3, r3, #2
 8002f36:	2b00      	cmp	r3, #0
 8002f38:	d0f0      	beq.n	8002f1c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8002f3a:	2001      	movs	r0, #1
 8002f3c:	f000 fafa 	bl	8003534 <RCC_Delay>
 8002f40:	e01c      	b.n	8002f7c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002f42:	4b0a      	ldr	r3, [pc, #40]	; (8002f6c <HAL_RCC_OscConfig+0x274>)
 8002f44:	2200      	movs	r2, #0
 8002f46:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002f48:	f7fe ffbe 	bl	8001ec8 <HAL_GetTick>
 8002f4c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002f4e:	e00f      	b.n	8002f70 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002f50:	f7fe ffba 	bl	8001ec8 <HAL_GetTick>
 8002f54:	4602      	mov	r2, r0
 8002f56:	693b      	ldr	r3, [r7, #16]
 8002f58:	1ad3      	subs	r3, r2, r3
 8002f5a:	2b02      	cmp	r3, #2
 8002f5c:	d908      	bls.n	8002f70 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8002f5e:	2303      	movs	r3, #3
 8002f60:	e140      	b.n	80031e4 <HAL_RCC_OscConfig+0x4ec>
 8002f62:	bf00      	nop
 8002f64:	40021000 	.word	0x40021000
 8002f68:	42420000 	.word	0x42420000
 8002f6c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002f70:	4b9e      	ldr	r3, [pc, #632]	; (80031ec <HAL_RCC_OscConfig+0x4f4>)
 8002f72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f74:	f003 0302 	and.w	r3, r3, #2
 8002f78:	2b00      	cmp	r3, #0
 8002f7a:	d1e9      	bne.n	8002f50 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	f003 0304 	and.w	r3, r3, #4
 8002f84:	2b00      	cmp	r3, #0
 8002f86:	f000 80a6 	beq.w	80030d6 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002f8a:	2300      	movs	r3, #0
 8002f8c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002f8e:	4b97      	ldr	r3, [pc, #604]	; (80031ec <HAL_RCC_OscConfig+0x4f4>)
 8002f90:	69db      	ldr	r3, [r3, #28]
 8002f92:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002f96:	2b00      	cmp	r3, #0
 8002f98:	d10d      	bne.n	8002fb6 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002f9a:	4b94      	ldr	r3, [pc, #592]	; (80031ec <HAL_RCC_OscConfig+0x4f4>)
 8002f9c:	69db      	ldr	r3, [r3, #28]
 8002f9e:	4a93      	ldr	r2, [pc, #588]	; (80031ec <HAL_RCC_OscConfig+0x4f4>)
 8002fa0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002fa4:	61d3      	str	r3, [r2, #28]
 8002fa6:	4b91      	ldr	r3, [pc, #580]	; (80031ec <HAL_RCC_OscConfig+0x4f4>)
 8002fa8:	69db      	ldr	r3, [r3, #28]
 8002faa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002fae:	60bb      	str	r3, [r7, #8]
 8002fb0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002fb2:	2301      	movs	r3, #1
 8002fb4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002fb6:	4b8e      	ldr	r3, [pc, #568]	; (80031f0 <HAL_RCC_OscConfig+0x4f8>)
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002fbe:	2b00      	cmp	r3, #0
 8002fc0:	d118      	bne.n	8002ff4 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002fc2:	4b8b      	ldr	r3, [pc, #556]	; (80031f0 <HAL_RCC_OscConfig+0x4f8>)
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	4a8a      	ldr	r2, [pc, #552]	; (80031f0 <HAL_RCC_OscConfig+0x4f8>)
 8002fc8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002fcc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002fce:	f7fe ff7b 	bl	8001ec8 <HAL_GetTick>
 8002fd2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002fd4:	e008      	b.n	8002fe8 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002fd6:	f7fe ff77 	bl	8001ec8 <HAL_GetTick>
 8002fda:	4602      	mov	r2, r0
 8002fdc:	693b      	ldr	r3, [r7, #16]
 8002fde:	1ad3      	subs	r3, r2, r3
 8002fe0:	2b64      	cmp	r3, #100	; 0x64
 8002fe2:	d901      	bls.n	8002fe8 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002fe4:	2303      	movs	r3, #3
 8002fe6:	e0fd      	b.n	80031e4 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002fe8:	4b81      	ldr	r3, [pc, #516]	; (80031f0 <HAL_RCC_OscConfig+0x4f8>)
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ff0:	2b00      	cmp	r3, #0
 8002ff2:	d0f0      	beq.n	8002fd6 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	68db      	ldr	r3, [r3, #12]
 8002ff8:	2b01      	cmp	r3, #1
 8002ffa:	d106      	bne.n	800300a <HAL_RCC_OscConfig+0x312>
 8002ffc:	4b7b      	ldr	r3, [pc, #492]	; (80031ec <HAL_RCC_OscConfig+0x4f4>)
 8002ffe:	6a1b      	ldr	r3, [r3, #32]
 8003000:	4a7a      	ldr	r2, [pc, #488]	; (80031ec <HAL_RCC_OscConfig+0x4f4>)
 8003002:	f043 0301 	orr.w	r3, r3, #1
 8003006:	6213      	str	r3, [r2, #32]
 8003008:	e02d      	b.n	8003066 <HAL_RCC_OscConfig+0x36e>
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	68db      	ldr	r3, [r3, #12]
 800300e:	2b00      	cmp	r3, #0
 8003010:	d10c      	bne.n	800302c <HAL_RCC_OscConfig+0x334>
 8003012:	4b76      	ldr	r3, [pc, #472]	; (80031ec <HAL_RCC_OscConfig+0x4f4>)
 8003014:	6a1b      	ldr	r3, [r3, #32]
 8003016:	4a75      	ldr	r2, [pc, #468]	; (80031ec <HAL_RCC_OscConfig+0x4f4>)
 8003018:	f023 0301 	bic.w	r3, r3, #1
 800301c:	6213      	str	r3, [r2, #32]
 800301e:	4b73      	ldr	r3, [pc, #460]	; (80031ec <HAL_RCC_OscConfig+0x4f4>)
 8003020:	6a1b      	ldr	r3, [r3, #32]
 8003022:	4a72      	ldr	r2, [pc, #456]	; (80031ec <HAL_RCC_OscConfig+0x4f4>)
 8003024:	f023 0304 	bic.w	r3, r3, #4
 8003028:	6213      	str	r3, [r2, #32]
 800302a:	e01c      	b.n	8003066 <HAL_RCC_OscConfig+0x36e>
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	68db      	ldr	r3, [r3, #12]
 8003030:	2b05      	cmp	r3, #5
 8003032:	d10c      	bne.n	800304e <HAL_RCC_OscConfig+0x356>
 8003034:	4b6d      	ldr	r3, [pc, #436]	; (80031ec <HAL_RCC_OscConfig+0x4f4>)
 8003036:	6a1b      	ldr	r3, [r3, #32]
 8003038:	4a6c      	ldr	r2, [pc, #432]	; (80031ec <HAL_RCC_OscConfig+0x4f4>)
 800303a:	f043 0304 	orr.w	r3, r3, #4
 800303e:	6213      	str	r3, [r2, #32]
 8003040:	4b6a      	ldr	r3, [pc, #424]	; (80031ec <HAL_RCC_OscConfig+0x4f4>)
 8003042:	6a1b      	ldr	r3, [r3, #32]
 8003044:	4a69      	ldr	r2, [pc, #420]	; (80031ec <HAL_RCC_OscConfig+0x4f4>)
 8003046:	f043 0301 	orr.w	r3, r3, #1
 800304a:	6213      	str	r3, [r2, #32]
 800304c:	e00b      	b.n	8003066 <HAL_RCC_OscConfig+0x36e>
 800304e:	4b67      	ldr	r3, [pc, #412]	; (80031ec <HAL_RCC_OscConfig+0x4f4>)
 8003050:	6a1b      	ldr	r3, [r3, #32]
 8003052:	4a66      	ldr	r2, [pc, #408]	; (80031ec <HAL_RCC_OscConfig+0x4f4>)
 8003054:	f023 0301 	bic.w	r3, r3, #1
 8003058:	6213      	str	r3, [r2, #32]
 800305a:	4b64      	ldr	r3, [pc, #400]	; (80031ec <HAL_RCC_OscConfig+0x4f4>)
 800305c:	6a1b      	ldr	r3, [r3, #32]
 800305e:	4a63      	ldr	r2, [pc, #396]	; (80031ec <HAL_RCC_OscConfig+0x4f4>)
 8003060:	f023 0304 	bic.w	r3, r3, #4
 8003064:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	68db      	ldr	r3, [r3, #12]
 800306a:	2b00      	cmp	r3, #0
 800306c:	d015      	beq.n	800309a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800306e:	f7fe ff2b 	bl	8001ec8 <HAL_GetTick>
 8003072:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003074:	e00a      	b.n	800308c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003076:	f7fe ff27 	bl	8001ec8 <HAL_GetTick>
 800307a:	4602      	mov	r2, r0
 800307c:	693b      	ldr	r3, [r7, #16]
 800307e:	1ad3      	subs	r3, r2, r3
 8003080:	f241 3288 	movw	r2, #5000	; 0x1388
 8003084:	4293      	cmp	r3, r2
 8003086:	d901      	bls.n	800308c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8003088:	2303      	movs	r3, #3
 800308a:	e0ab      	b.n	80031e4 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800308c:	4b57      	ldr	r3, [pc, #348]	; (80031ec <HAL_RCC_OscConfig+0x4f4>)
 800308e:	6a1b      	ldr	r3, [r3, #32]
 8003090:	f003 0302 	and.w	r3, r3, #2
 8003094:	2b00      	cmp	r3, #0
 8003096:	d0ee      	beq.n	8003076 <HAL_RCC_OscConfig+0x37e>
 8003098:	e014      	b.n	80030c4 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800309a:	f7fe ff15 	bl	8001ec8 <HAL_GetTick>
 800309e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80030a0:	e00a      	b.n	80030b8 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80030a2:	f7fe ff11 	bl	8001ec8 <HAL_GetTick>
 80030a6:	4602      	mov	r2, r0
 80030a8:	693b      	ldr	r3, [r7, #16]
 80030aa:	1ad3      	subs	r3, r2, r3
 80030ac:	f241 3288 	movw	r2, #5000	; 0x1388
 80030b0:	4293      	cmp	r3, r2
 80030b2:	d901      	bls.n	80030b8 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80030b4:	2303      	movs	r3, #3
 80030b6:	e095      	b.n	80031e4 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80030b8:	4b4c      	ldr	r3, [pc, #304]	; (80031ec <HAL_RCC_OscConfig+0x4f4>)
 80030ba:	6a1b      	ldr	r3, [r3, #32]
 80030bc:	f003 0302 	and.w	r3, r3, #2
 80030c0:	2b00      	cmp	r3, #0
 80030c2:	d1ee      	bne.n	80030a2 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80030c4:	7dfb      	ldrb	r3, [r7, #23]
 80030c6:	2b01      	cmp	r3, #1
 80030c8:	d105      	bne.n	80030d6 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80030ca:	4b48      	ldr	r3, [pc, #288]	; (80031ec <HAL_RCC_OscConfig+0x4f4>)
 80030cc:	69db      	ldr	r3, [r3, #28]
 80030ce:	4a47      	ldr	r2, [pc, #284]	; (80031ec <HAL_RCC_OscConfig+0x4f4>)
 80030d0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80030d4:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	69db      	ldr	r3, [r3, #28]
 80030da:	2b00      	cmp	r3, #0
 80030dc:	f000 8081 	beq.w	80031e2 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80030e0:	4b42      	ldr	r3, [pc, #264]	; (80031ec <HAL_RCC_OscConfig+0x4f4>)
 80030e2:	685b      	ldr	r3, [r3, #4]
 80030e4:	f003 030c 	and.w	r3, r3, #12
 80030e8:	2b08      	cmp	r3, #8
 80030ea:	d061      	beq.n	80031b0 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	69db      	ldr	r3, [r3, #28]
 80030f0:	2b02      	cmp	r3, #2
 80030f2:	d146      	bne.n	8003182 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80030f4:	4b3f      	ldr	r3, [pc, #252]	; (80031f4 <HAL_RCC_OscConfig+0x4fc>)
 80030f6:	2200      	movs	r2, #0
 80030f8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80030fa:	f7fe fee5 	bl	8001ec8 <HAL_GetTick>
 80030fe:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003100:	e008      	b.n	8003114 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003102:	f7fe fee1 	bl	8001ec8 <HAL_GetTick>
 8003106:	4602      	mov	r2, r0
 8003108:	693b      	ldr	r3, [r7, #16]
 800310a:	1ad3      	subs	r3, r2, r3
 800310c:	2b02      	cmp	r3, #2
 800310e:	d901      	bls.n	8003114 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8003110:	2303      	movs	r3, #3
 8003112:	e067      	b.n	80031e4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003114:	4b35      	ldr	r3, [pc, #212]	; (80031ec <HAL_RCC_OscConfig+0x4f4>)
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800311c:	2b00      	cmp	r3, #0
 800311e:	d1f0      	bne.n	8003102 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	6a1b      	ldr	r3, [r3, #32]
 8003124:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003128:	d108      	bne.n	800313c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800312a:	4b30      	ldr	r3, [pc, #192]	; (80031ec <HAL_RCC_OscConfig+0x4f4>)
 800312c:	685b      	ldr	r3, [r3, #4]
 800312e:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	689b      	ldr	r3, [r3, #8]
 8003136:	492d      	ldr	r1, [pc, #180]	; (80031ec <HAL_RCC_OscConfig+0x4f4>)
 8003138:	4313      	orrs	r3, r2
 800313a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800313c:	4b2b      	ldr	r3, [pc, #172]	; (80031ec <HAL_RCC_OscConfig+0x4f4>)
 800313e:	685b      	ldr	r3, [r3, #4]
 8003140:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	6a19      	ldr	r1, [r3, #32]
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800314c:	430b      	orrs	r3, r1
 800314e:	4927      	ldr	r1, [pc, #156]	; (80031ec <HAL_RCC_OscConfig+0x4f4>)
 8003150:	4313      	orrs	r3, r2
 8003152:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003154:	4b27      	ldr	r3, [pc, #156]	; (80031f4 <HAL_RCC_OscConfig+0x4fc>)
 8003156:	2201      	movs	r2, #1
 8003158:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800315a:	f7fe feb5 	bl	8001ec8 <HAL_GetTick>
 800315e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003160:	e008      	b.n	8003174 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003162:	f7fe feb1 	bl	8001ec8 <HAL_GetTick>
 8003166:	4602      	mov	r2, r0
 8003168:	693b      	ldr	r3, [r7, #16]
 800316a:	1ad3      	subs	r3, r2, r3
 800316c:	2b02      	cmp	r3, #2
 800316e:	d901      	bls.n	8003174 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8003170:	2303      	movs	r3, #3
 8003172:	e037      	b.n	80031e4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003174:	4b1d      	ldr	r3, [pc, #116]	; (80031ec <HAL_RCC_OscConfig+0x4f4>)
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800317c:	2b00      	cmp	r3, #0
 800317e:	d0f0      	beq.n	8003162 <HAL_RCC_OscConfig+0x46a>
 8003180:	e02f      	b.n	80031e2 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003182:	4b1c      	ldr	r3, [pc, #112]	; (80031f4 <HAL_RCC_OscConfig+0x4fc>)
 8003184:	2200      	movs	r2, #0
 8003186:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003188:	f7fe fe9e 	bl	8001ec8 <HAL_GetTick>
 800318c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800318e:	e008      	b.n	80031a2 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003190:	f7fe fe9a 	bl	8001ec8 <HAL_GetTick>
 8003194:	4602      	mov	r2, r0
 8003196:	693b      	ldr	r3, [r7, #16]
 8003198:	1ad3      	subs	r3, r2, r3
 800319a:	2b02      	cmp	r3, #2
 800319c:	d901      	bls.n	80031a2 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800319e:	2303      	movs	r3, #3
 80031a0:	e020      	b.n	80031e4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80031a2:	4b12      	ldr	r3, [pc, #72]	; (80031ec <HAL_RCC_OscConfig+0x4f4>)
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80031aa:	2b00      	cmp	r3, #0
 80031ac:	d1f0      	bne.n	8003190 <HAL_RCC_OscConfig+0x498>
 80031ae:	e018      	b.n	80031e2 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	69db      	ldr	r3, [r3, #28]
 80031b4:	2b01      	cmp	r3, #1
 80031b6:	d101      	bne.n	80031bc <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 80031b8:	2301      	movs	r3, #1
 80031ba:	e013      	b.n	80031e4 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80031bc:	4b0b      	ldr	r3, [pc, #44]	; (80031ec <HAL_RCC_OscConfig+0x4f4>)
 80031be:	685b      	ldr	r3, [r3, #4]
 80031c0:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80031c2:	68fb      	ldr	r3, [r7, #12]
 80031c4:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	6a1b      	ldr	r3, [r3, #32]
 80031cc:	429a      	cmp	r2, r3
 80031ce:	d106      	bne.n	80031de <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80031d0:	68fb      	ldr	r3, [r7, #12]
 80031d2:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80031da:	429a      	cmp	r2, r3
 80031dc:	d001      	beq.n	80031e2 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 80031de:	2301      	movs	r3, #1
 80031e0:	e000      	b.n	80031e4 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 80031e2:	2300      	movs	r3, #0
}
 80031e4:	4618      	mov	r0, r3
 80031e6:	3718      	adds	r7, #24
 80031e8:	46bd      	mov	sp, r7
 80031ea:	bd80      	pop	{r7, pc}
 80031ec:	40021000 	.word	0x40021000
 80031f0:	40007000 	.word	0x40007000
 80031f4:	42420060 	.word	0x42420060

080031f8 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80031f8:	b580      	push	{r7, lr}
 80031fa:	b084      	sub	sp, #16
 80031fc:	af00      	add	r7, sp, #0
 80031fe:	6078      	str	r0, [r7, #4]
 8003200:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	2b00      	cmp	r3, #0
 8003206:	d101      	bne.n	800320c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003208:	2301      	movs	r3, #1
 800320a:	e0d0      	b.n	80033ae <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800320c:	4b6a      	ldr	r3, [pc, #424]	; (80033b8 <HAL_RCC_ClockConfig+0x1c0>)
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	f003 0307 	and.w	r3, r3, #7
 8003214:	683a      	ldr	r2, [r7, #0]
 8003216:	429a      	cmp	r2, r3
 8003218:	d910      	bls.n	800323c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800321a:	4b67      	ldr	r3, [pc, #412]	; (80033b8 <HAL_RCC_ClockConfig+0x1c0>)
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	f023 0207 	bic.w	r2, r3, #7
 8003222:	4965      	ldr	r1, [pc, #404]	; (80033b8 <HAL_RCC_ClockConfig+0x1c0>)
 8003224:	683b      	ldr	r3, [r7, #0]
 8003226:	4313      	orrs	r3, r2
 8003228:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800322a:	4b63      	ldr	r3, [pc, #396]	; (80033b8 <HAL_RCC_ClockConfig+0x1c0>)
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	f003 0307 	and.w	r3, r3, #7
 8003232:	683a      	ldr	r2, [r7, #0]
 8003234:	429a      	cmp	r2, r3
 8003236:	d001      	beq.n	800323c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8003238:	2301      	movs	r3, #1
 800323a:	e0b8      	b.n	80033ae <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	f003 0302 	and.w	r3, r3, #2
 8003244:	2b00      	cmp	r3, #0
 8003246:	d020      	beq.n	800328a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	f003 0304 	and.w	r3, r3, #4
 8003250:	2b00      	cmp	r3, #0
 8003252:	d005      	beq.n	8003260 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003254:	4b59      	ldr	r3, [pc, #356]	; (80033bc <HAL_RCC_ClockConfig+0x1c4>)
 8003256:	685b      	ldr	r3, [r3, #4]
 8003258:	4a58      	ldr	r2, [pc, #352]	; (80033bc <HAL_RCC_ClockConfig+0x1c4>)
 800325a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800325e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	f003 0308 	and.w	r3, r3, #8
 8003268:	2b00      	cmp	r3, #0
 800326a:	d005      	beq.n	8003278 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800326c:	4b53      	ldr	r3, [pc, #332]	; (80033bc <HAL_RCC_ClockConfig+0x1c4>)
 800326e:	685b      	ldr	r3, [r3, #4]
 8003270:	4a52      	ldr	r2, [pc, #328]	; (80033bc <HAL_RCC_ClockConfig+0x1c4>)
 8003272:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8003276:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003278:	4b50      	ldr	r3, [pc, #320]	; (80033bc <HAL_RCC_ClockConfig+0x1c4>)
 800327a:	685b      	ldr	r3, [r3, #4]
 800327c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	689b      	ldr	r3, [r3, #8]
 8003284:	494d      	ldr	r1, [pc, #308]	; (80033bc <HAL_RCC_ClockConfig+0x1c4>)
 8003286:	4313      	orrs	r3, r2
 8003288:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	f003 0301 	and.w	r3, r3, #1
 8003292:	2b00      	cmp	r3, #0
 8003294:	d040      	beq.n	8003318 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	685b      	ldr	r3, [r3, #4]
 800329a:	2b01      	cmp	r3, #1
 800329c:	d107      	bne.n	80032ae <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800329e:	4b47      	ldr	r3, [pc, #284]	; (80033bc <HAL_RCC_ClockConfig+0x1c4>)
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80032a6:	2b00      	cmp	r3, #0
 80032a8:	d115      	bne.n	80032d6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80032aa:	2301      	movs	r3, #1
 80032ac:	e07f      	b.n	80033ae <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	685b      	ldr	r3, [r3, #4]
 80032b2:	2b02      	cmp	r3, #2
 80032b4:	d107      	bne.n	80032c6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80032b6:	4b41      	ldr	r3, [pc, #260]	; (80033bc <HAL_RCC_ClockConfig+0x1c4>)
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80032be:	2b00      	cmp	r3, #0
 80032c0:	d109      	bne.n	80032d6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80032c2:	2301      	movs	r3, #1
 80032c4:	e073      	b.n	80033ae <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80032c6:	4b3d      	ldr	r3, [pc, #244]	; (80033bc <HAL_RCC_ClockConfig+0x1c4>)
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	f003 0302 	and.w	r3, r3, #2
 80032ce:	2b00      	cmp	r3, #0
 80032d0:	d101      	bne.n	80032d6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80032d2:	2301      	movs	r3, #1
 80032d4:	e06b      	b.n	80033ae <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80032d6:	4b39      	ldr	r3, [pc, #228]	; (80033bc <HAL_RCC_ClockConfig+0x1c4>)
 80032d8:	685b      	ldr	r3, [r3, #4]
 80032da:	f023 0203 	bic.w	r2, r3, #3
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	685b      	ldr	r3, [r3, #4]
 80032e2:	4936      	ldr	r1, [pc, #216]	; (80033bc <HAL_RCC_ClockConfig+0x1c4>)
 80032e4:	4313      	orrs	r3, r2
 80032e6:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80032e8:	f7fe fdee 	bl	8001ec8 <HAL_GetTick>
 80032ec:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80032ee:	e00a      	b.n	8003306 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80032f0:	f7fe fdea 	bl	8001ec8 <HAL_GetTick>
 80032f4:	4602      	mov	r2, r0
 80032f6:	68fb      	ldr	r3, [r7, #12]
 80032f8:	1ad3      	subs	r3, r2, r3
 80032fa:	f241 3288 	movw	r2, #5000	; 0x1388
 80032fe:	4293      	cmp	r3, r2
 8003300:	d901      	bls.n	8003306 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003302:	2303      	movs	r3, #3
 8003304:	e053      	b.n	80033ae <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003306:	4b2d      	ldr	r3, [pc, #180]	; (80033bc <HAL_RCC_ClockConfig+0x1c4>)
 8003308:	685b      	ldr	r3, [r3, #4]
 800330a:	f003 020c 	and.w	r2, r3, #12
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	685b      	ldr	r3, [r3, #4]
 8003312:	009b      	lsls	r3, r3, #2
 8003314:	429a      	cmp	r2, r3
 8003316:	d1eb      	bne.n	80032f0 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003318:	4b27      	ldr	r3, [pc, #156]	; (80033b8 <HAL_RCC_ClockConfig+0x1c0>)
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	f003 0307 	and.w	r3, r3, #7
 8003320:	683a      	ldr	r2, [r7, #0]
 8003322:	429a      	cmp	r2, r3
 8003324:	d210      	bcs.n	8003348 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003326:	4b24      	ldr	r3, [pc, #144]	; (80033b8 <HAL_RCC_ClockConfig+0x1c0>)
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	f023 0207 	bic.w	r2, r3, #7
 800332e:	4922      	ldr	r1, [pc, #136]	; (80033b8 <HAL_RCC_ClockConfig+0x1c0>)
 8003330:	683b      	ldr	r3, [r7, #0]
 8003332:	4313      	orrs	r3, r2
 8003334:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003336:	4b20      	ldr	r3, [pc, #128]	; (80033b8 <HAL_RCC_ClockConfig+0x1c0>)
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	f003 0307 	and.w	r3, r3, #7
 800333e:	683a      	ldr	r2, [r7, #0]
 8003340:	429a      	cmp	r2, r3
 8003342:	d001      	beq.n	8003348 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8003344:	2301      	movs	r3, #1
 8003346:	e032      	b.n	80033ae <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	f003 0304 	and.w	r3, r3, #4
 8003350:	2b00      	cmp	r3, #0
 8003352:	d008      	beq.n	8003366 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003354:	4b19      	ldr	r3, [pc, #100]	; (80033bc <HAL_RCC_ClockConfig+0x1c4>)
 8003356:	685b      	ldr	r3, [r3, #4]
 8003358:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	68db      	ldr	r3, [r3, #12]
 8003360:	4916      	ldr	r1, [pc, #88]	; (80033bc <HAL_RCC_ClockConfig+0x1c4>)
 8003362:	4313      	orrs	r3, r2
 8003364:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	f003 0308 	and.w	r3, r3, #8
 800336e:	2b00      	cmp	r3, #0
 8003370:	d009      	beq.n	8003386 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003372:	4b12      	ldr	r3, [pc, #72]	; (80033bc <HAL_RCC_ClockConfig+0x1c4>)
 8003374:	685b      	ldr	r3, [r3, #4]
 8003376:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	691b      	ldr	r3, [r3, #16]
 800337e:	00db      	lsls	r3, r3, #3
 8003380:	490e      	ldr	r1, [pc, #56]	; (80033bc <HAL_RCC_ClockConfig+0x1c4>)
 8003382:	4313      	orrs	r3, r2
 8003384:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003386:	f000 f82d 	bl	80033e4 <HAL_RCC_GetSysClockFreq>
 800338a:	4601      	mov	r1, r0
 800338c:	4b0b      	ldr	r3, [pc, #44]	; (80033bc <HAL_RCC_ClockConfig+0x1c4>)
 800338e:	685b      	ldr	r3, [r3, #4]
 8003390:	091b      	lsrs	r3, r3, #4
 8003392:	f003 030f 	and.w	r3, r3, #15
 8003396:	4a0a      	ldr	r2, [pc, #40]	; (80033c0 <HAL_RCC_ClockConfig+0x1c8>)
 8003398:	5cd3      	ldrb	r3, [r2, r3]
 800339a:	fa21 f303 	lsr.w	r3, r1, r3
 800339e:	4a09      	ldr	r2, [pc, #36]	; (80033c4 <HAL_RCC_ClockConfig+0x1cc>)
 80033a0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80033a2:	4b09      	ldr	r3, [pc, #36]	; (80033c8 <HAL_RCC_ClockConfig+0x1d0>)
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	4618      	mov	r0, r3
 80033a8:	f7fe fd4c 	bl	8001e44 <HAL_InitTick>

  return HAL_OK;
 80033ac:	2300      	movs	r3, #0
}
 80033ae:	4618      	mov	r0, r3
 80033b0:	3710      	adds	r7, #16
 80033b2:	46bd      	mov	sp, r7
 80033b4:	bd80      	pop	{r7, pc}
 80033b6:	bf00      	nop
 80033b8:	40022000 	.word	0x40022000
 80033bc:	40021000 	.word	0x40021000
 80033c0:	080087ec 	.word	0x080087ec
 80033c4:	20000008 	.word	0x20000008
 80033c8:	2000000c 	.word	0x2000000c

080033cc <HAL_RCC_EnableCSS>:
  *         allowing the MCU to perform rescue operations. The CSSI is linked to
  *         the Cortex-M3 NMI (Non-Maskable Interrupt) exception vector.
  * @retval None
  */
void HAL_RCC_EnableCSS(void)
{
 80033cc:	b480      	push	{r7}
 80033ce:	af00      	add	r7, sp, #0
  *(__IO uint32_t *) RCC_CR_CSSON_BB = (uint32_t)ENABLE;
 80033d0:	4b03      	ldr	r3, [pc, #12]	; (80033e0 <HAL_RCC_EnableCSS+0x14>)
 80033d2:	2201      	movs	r2, #1
 80033d4:	601a      	str	r2, [r3, #0]
}
 80033d6:	bf00      	nop
 80033d8:	46bd      	mov	sp, r7
 80033da:	bc80      	pop	{r7}
 80033dc:	4770      	bx	lr
 80033de:	bf00      	nop
 80033e0:	4242004c 	.word	0x4242004c

080033e4 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80033e4:	b490      	push	{r4, r7}
 80033e6:	b08a      	sub	sp, #40	; 0x28
 80033e8:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80033ea:	4b2a      	ldr	r3, [pc, #168]	; (8003494 <HAL_RCC_GetSysClockFreq+0xb0>)
 80033ec:	1d3c      	adds	r4, r7, #4
 80033ee:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80033f0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80033f4:	4b28      	ldr	r3, [pc, #160]	; (8003498 <HAL_RCC_GetSysClockFreq+0xb4>)
 80033f6:	881b      	ldrh	r3, [r3, #0]
 80033f8:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80033fa:	2300      	movs	r3, #0
 80033fc:	61fb      	str	r3, [r7, #28]
 80033fe:	2300      	movs	r3, #0
 8003400:	61bb      	str	r3, [r7, #24]
 8003402:	2300      	movs	r3, #0
 8003404:	627b      	str	r3, [r7, #36]	; 0x24
 8003406:	2300      	movs	r3, #0
 8003408:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 800340a:	2300      	movs	r3, #0
 800340c:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800340e:	4b23      	ldr	r3, [pc, #140]	; (800349c <HAL_RCC_GetSysClockFreq+0xb8>)
 8003410:	685b      	ldr	r3, [r3, #4]
 8003412:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003414:	69fb      	ldr	r3, [r7, #28]
 8003416:	f003 030c 	and.w	r3, r3, #12
 800341a:	2b04      	cmp	r3, #4
 800341c:	d002      	beq.n	8003424 <HAL_RCC_GetSysClockFreq+0x40>
 800341e:	2b08      	cmp	r3, #8
 8003420:	d003      	beq.n	800342a <HAL_RCC_GetSysClockFreq+0x46>
 8003422:	e02d      	b.n	8003480 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003424:	4b1e      	ldr	r3, [pc, #120]	; (80034a0 <HAL_RCC_GetSysClockFreq+0xbc>)
 8003426:	623b      	str	r3, [r7, #32]
      break;
 8003428:	e02d      	b.n	8003486 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800342a:	69fb      	ldr	r3, [r7, #28]
 800342c:	0c9b      	lsrs	r3, r3, #18
 800342e:	f003 030f 	and.w	r3, r3, #15
 8003432:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8003436:	4413      	add	r3, r2
 8003438:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 800343c:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800343e:	69fb      	ldr	r3, [r7, #28]
 8003440:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003444:	2b00      	cmp	r3, #0
 8003446:	d013      	beq.n	8003470 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8003448:	4b14      	ldr	r3, [pc, #80]	; (800349c <HAL_RCC_GetSysClockFreq+0xb8>)
 800344a:	685b      	ldr	r3, [r3, #4]
 800344c:	0c5b      	lsrs	r3, r3, #17
 800344e:	f003 0301 	and.w	r3, r3, #1
 8003452:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8003456:	4413      	add	r3, r2
 8003458:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 800345c:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800345e:	697b      	ldr	r3, [r7, #20]
 8003460:	4a0f      	ldr	r2, [pc, #60]	; (80034a0 <HAL_RCC_GetSysClockFreq+0xbc>)
 8003462:	fb02 f203 	mul.w	r2, r2, r3
 8003466:	69bb      	ldr	r3, [r7, #24]
 8003468:	fbb2 f3f3 	udiv	r3, r2, r3
 800346c:	627b      	str	r3, [r7, #36]	; 0x24
 800346e:	e004      	b.n	800347a <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003470:	697b      	ldr	r3, [r7, #20]
 8003472:	4a0c      	ldr	r2, [pc, #48]	; (80034a4 <HAL_RCC_GetSysClockFreq+0xc0>)
 8003474:	fb02 f303 	mul.w	r3, r2, r3
 8003478:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 800347a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800347c:	623b      	str	r3, [r7, #32]
      break;
 800347e:	e002      	b.n	8003486 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003480:	4b07      	ldr	r3, [pc, #28]	; (80034a0 <HAL_RCC_GetSysClockFreq+0xbc>)
 8003482:	623b      	str	r3, [r7, #32]
      break;
 8003484:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003486:	6a3b      	ldr	r3, [r7, #32]
}
 8003488:	4618      	mov	r0, r3
 800348a:	3728      	adds	r7, #40	; 0x28
 800348c:	46bd      	mov	sp, r7
 800348e:	bc90      	pop	{r4, r7}
 8003490:	4770      	bx	lr
 8003492:	bf00      	nop
 8003494:	080087c4 	.word	0x080087c4
 8003498:	080087d4 	.word	0x080087d4
 800349c:	40021000 	.word	0x40021000
 80034a0:	007a1200 	.word	0x007a1200
 80034a4:	003d0900 	.word	0x003d0900

080034a8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80034a8:	b480      	push	{r7}
 80034aa:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80034ac:	4b02      	ldr	r3, [pc, #8]	; (80034b8 <HAL_RCC_GetHCLKFreq+0x10>)
 80034ae:	681b      	ldr	r3, [r3, #0]
}
 80034b0:	4618      	mov	r0, r3
 80034b2:	46bd      	mov	sp, r7
 80034b4:	bc80      	pop	{r7}
 80034b6:	4770      	bx	lr
 80034b8:	20000008 	.word	0x20000008

080034bc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80034bc:	b580      	push	{r7, lr}
 80034be:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80034c0:	f7ff fff2 	bl	80034a8 <HAL_RCC_GetHCLKFreq>
 80034c4:	4601      	mov	r1, r0
 80034c6:	4b05      	ldr	r3, [pc, #20]	; (80034dc <HAL_RCC_GetPCLK1Freq+0x20>)
 80034c8:	685b      	ldr	r3, [r3, #4]
 80034ca:	0a1b      	lsrs	r3, r3, #8
 80034cc:	f003 0307 	and.w	r3, r3, #7
 80034d0:	4a03      	ldr	r2, [pc, #12]	; (80034e0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80034d2:	5cd3      	ldrb	r3, [r2, r3]
 80034d4:	fa21 f303 	lsr.w	r3, r1, r3
}
 80034d8:	4618      	mov	r0, r3
 80034da:	bd80      	pop	{r7, pc}
 80034dc:	40021000 	.word	0x40021000
 80034e0:	080087fc 	.word	0x080087fc

080034e4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80034e4:	b580      	push	{r7, lr}
 80034e6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80034e8:	f7ff ffde 	bl	80034a8 <HAL_RCC_GetHCLKFreq>
 80034ec:	4601      	mov	r1, r0
 80034ee:	4b05      	ldr	r3, [pc, #20]	; (8003504 <HAL_RCC_GetPCLK2Freq+0x20>)
 80034f0:	685b      	ldr	r3, [r3, #4]
 80034f2:	0adb      	lsrs	r3, r3, #11
 80034f4:	f003 0307 	and.w	r3, r3, #7
 80034f8:	4a03      	ldr	r2, [pc, #12]	; (8003508 <HAL_RCC_GetPCLK2Freq+0x24>)
 80034fa:	5cd3      	ldrb	r3, [r2, r3]
 80034fc:	fa21 f303 	lsr.w	r3, r1, r3
}
 8003500:	4618      	mov	r0, r3
 8003502:	bd80      	pop	{r7, pc}
 8003504:	40021000 	.word	0x40021000
 8003508:	080087fc 	.word	0x080087fc

0800350c <HAL_RCC_NMI_IRQHandler>:
  * @brief This function handles the RCC CSS interrupt request.
  * @note This API should be called under the NMI_Handler().
  * @retval None
  */
void HAL_RCC_NMI_IRQHandler(void)
{
 800350c:	b580      	push	{r7, lr}
 800350e:	af00      	add	r7, sp, #0
  /* Check RCC CSSF flag  */
  if (__HAL_RCC_GET_IT(RCC_IT_CSS))
 8003510:	4b06      	ldr	r3, [pc, #24]	; (800352c <HAL_RCC_NMI_IRQHandler+0x20>)
 8003512:	689b      	ldr	r3, [r3, #8]
 8003514:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003518:	2b80      	cmp	r3, #128	; 0x80
 800351a:	d104      	bne.n	8003526 <HAL_RCC_NMI_IRQHandler+0x1a>
  {
    /* RCC Clock Security System interrupt user callback */
    HAL_RCC_CSSCallback();
 800351c:	f000 f828 	bl	8003570 <HAL_RCC_CSSCallback>

    /* Clear RCC CSS pending bit */
    __HAL_RCC_CLEAR_IT(RCC_IT_CSS);
 8003520:	4b03      	ldr	r3, [pc, #12]	; (8003530 <HAL_RCC_NMI_IRQHandler+0x24>)
 8003522:	2280      	movs	r2, #128	; 0x80
 8003524:	701a      	strb	r2, [r3, #0]
  }
}
 8003526:	bf00      	nop
 8003528:	bd80      	pop	{r7, pc}
 800352a:	bf00      	nop
 800352c:	40021000 	.word	0x40021000
 8003530:	4002100a 	.word	0x4002100a

08003534 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8003534:	b480      	push	{r7}
 8003536:	b085      	sub	sp, #20
 8003538:	af00      	add	r7, sp, #0
 800353a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 800353c:	4b0a      	ldr	r3, [pc, #40]	; (8003568 <RCC_Delay+0x34>)
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	4a0a      	ldr	r2, [pc, #40]	; (800356c <RCC_Delay+0x38>)
 8003542:	fba2 2303 	umull	r2, r3, r2, r3
 8003546:	0a5b      	lsrs	r3, r3, #9
 8003548:	687a      	ldr	r2, [r7, #4]
 800354a:	fb02 f303 	mul.w	r3, r2, r3
 800354e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8003550:	bf00      	nop
  }
  while (Delay --);
 8003552:	68fb      	ldr	r3, [r7, #12]
 8003554:	1e5a      	subs	r2, r3, #1
 8003556:	60fa      	str	r2, [r7, #12]
 8003558:	2b00      	cmp	r3, #0
 800355a:	d1f9      	bne.n	8003550 <RCC_Delay+0x1c>
}
 800355c:	bf00      	nop
 800355e:	3714      	adds	r7, #20
 8003560:	46bd      	mov	sp, r7
 8003562:	bc80      	pop	{r7}
 8003564:	4770      	bx	lr
 8003566:	bf00      	nop
 8003568:	20000008 	.word	0x20000008
 800356c:	10624dd3 	.word	0x10624dd3

08003570 <HAL_RCC_CSSCallback>:
/**
  * @brief  RCC Clock Security System interrupt callback
  * @retval none
  */
__weak void HAL_RCC_CSSCallback(void)
{
 8003570:	b480      	push	{r7}
 8003572:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
    the HAL_RCC_CSSCallback could be implemented in the user file
    */
}
 8003574:	bf00      	nop
 8003576:	46bd      	mov	sp, r7
 8003578:	bc80      	pop	{r7}
 800357a:	4770      	bx	lr

0800357c <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800357c:	b580      	push	{r7, lr}
 800357e:	b086      	sub	sp, #24
 8003580:	af00      	add	r7, sp, #0
 8003582:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8003584:	2300      	movs	r3, #0
 8003586:	613b      	str	r3, [r7, #16]
 8003588:	2300      	movs	r3, #0
 800358a:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	f003 0301 	and.w	r3, r3, #1
 8003594:	2b00      	cmp	r3, #0
 8003596:	d07d      	beq.n	8003694 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    FlagStatus       pwrclkchanged = RESET;
 8003598:	2300      	movs	r3, #0
 800359a:	75fb      	strb	r3, [r7, #23]

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800359c:	4b4f      	ldr	r3, [pc, #316]	; (80036dc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800359e:	69db      	ldr	r3, [r3, #28]
 80035a0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80035a4:	2b00      	cmp	r3, #0
 80035a6:	d10d      	bne.n	80035c4 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80035a8:	4b4c      	ldr	r3, [pc, #304]	; (80036dc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80035aa:	69db      	ldr	r3, [r3, #28]
 80035ac:	4a4b      	ldr	r2, [pc, #300]	; (80036dc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80035ae:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80035b2:	61d3      	str	r3, [r2, #28]
 80035b4:	4b49      	ldr	r3, [pc, #292]	; (80036dc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80035b6:	69db      	ldr	r3, [r3, #28]
 80035b8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80035bc:	60bb      	str	r3, [r7, #8]
 80035be:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80035c0:	2301      	movs	r3, #1
 80035c2:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80035c4:	4b46      	ldr	r3, [pc, #280]	; (80036e0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80035cc:	2b00      	cmp	r3, #0
 80035ce:	d118      	bne.n	8003602 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80035d0:	4b43      	ldr	r3, [pc, #268]	; (80036e0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	4a42      	ldr	r2, [pc, #264]	; (80036e0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80035d6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80035da:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80035dc:	f7fe fc74 	bl	8001ec8 <HAL_GetTick>
 80035e0:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80035e2:	e008      	b.n	80035f6 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80035e4:	f7fe fc70 	bl	8001ec8 <HAL_GetTick>
 80035e8:	4602      	mov	r2, r0
 80035ea:	693b      	ldr	r3, [r7, #16]
 80035ec:	1ad3      	subs	r3, r2, r3
 80035ee:	2b64      	cmp	r3, #100	; 0x64
 80035f0:	d901      	bls.n	80035f6 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 80035f2:	2303      	movs	r3, #3
 80035f4:	e06d      	b.n	80036d2 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80035f6:	4b3a      	ldr	r3, [pc, #232]	; (80036e0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80035fe:	2b00      	cmp	r3, #0
 8003600:	d0f0      	beq.n	80035e4 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003602:	4b36      	ldr	r3, [pc, #216]	; (80036dc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003604:	6a1b      	ldr	r3, [r3, #32]
 8003606:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800360a:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800360c:	68fb      	ldr	r3, [r7, #12]
 800360e:	2b00      	cmp	r3, #0
 8003610:	d02e      	beq.n	8003670 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	685b      	ldr	r3, [r3, #4]
 8003616:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800361a:	68fa      	ldr	r2, [r7, #12]
 800361c:	429a      	cmp	r2, r3
 800361e:	d027      	beq.n	8003670 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003620:	4b2e      	ldr	r3, [pc, #184]	; (80036dc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003622:	6a1b      	ldr	r3, [r3, #32]
 8003624:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003628:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800362a:	4b2e      	ldr	r3, [pc, #184]	; (80036e4 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 800362c:	2201      	movs	r2, #1
 800362e:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003630:	4b2c      	ldr	r3, [pc, #176]	; (80036e4 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003632:	2200      	movs	r2, #0
 8003634:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8003636:	4a29      	ldr	r2, [pc, #164]	; (80036dc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003638:	68fb      	ldr	r3, [r7, #12]
 800363a:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 800363c:	68fb      	ldr	r3, [r7, #12]
 800363e:	f003 0301 	and.w	r3, r3, #1
 8003642:	2b00      	cmp	r3, #0
 8003644:	d014      	beq.n	8003670 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003646:	f7fe fc3f 	bl	8001ec8 <HAL_GetTick>
 800364a:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800364c:	e00a      	b.n	8003664 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800364e:	f7fe fc3b 	bl	8001ec8 <HAL_GetTick>
 8003652:	4602      	mov	r2, r0
 8003654:	693b      	ldr	r3, [r7, #16]
 8003656:	1ad3      	subs	r3, r2, r3
 8003658:	f241 3288 	movw	r2, #5000	; 0x1388
 800365c:	4293      	cmp	r3, r2
 800365e:	d901      	bls.n	8003664 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8003660:	2303      	movs	r3, #3
 8003662:	e036      	b.n	80036d2 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003664:	4b1d      	ldr	r3, [pc, #116]	; (80036dc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003666:	6a1b      	ldr	r3, [r3, #32]
 8003668:	f003 0302 	and.w	r3, r3, #2
 800366c:	2b00      	cmp	r3, #0
 800366e:	d0ee      	beq.n	800364e <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003670:	4b1a      	ldr	r3, [pc, #104]	; (80036dc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003672:	6a1b      	ldr	r3, [r3, #32]
 8003674:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	685b      	ldr	r3, [r3, #4]
 800367c:	4917      	ldr	r1, [pc, #92]	; (80036dc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800367e:	4313      	orrs	r3, r2
 8003680:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003682:	7dfb      	ldrb	r3, [r7, #23]
 8003684:	2b01      	cmp	r3, #1
 8003686:	d105      	bne.n	8003694 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003688:	4b14      	ldr	r3, [pc, #80]	; (80036dc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800368a:	69db      	ldr	r3, [r3, #28]
 800368c:	4a13      	ldr	r2, [pc, #76]	; (80036dc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800368e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003692:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	f003 0302 	and.w	r3, r3, #2
 800369c:	2b00      	cmp	r3, #0
 800369e:	d008      	beq.n	80036b2 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80036a0:	4b0e      	ldr	r3, [pc, #56]	; (80036dc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80036a2:	685b      	ldr	r3, [r3, #4]
 80036a4:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	689b      	ldr	r3, [r3, #8]
 80036ac:	490b      	ldr	r1, [pc, #44]	; (80036dc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80036ae:	4313      	orrs	r3, r2
 80036b0:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	f003 0310 	and.w	r3, r3, #16
 80036ba:	2b00      	cmp	r3, #0
 80036bc:	d008      	beq.n	80036d0 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80036be:	4b07      	ldr	r3, [pc, #28]	; (80036dc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80036c0:	685b      	ldr	r3, [r3, #4]
 80036c2:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	68db      	ldr	r3, [r3, #12]
 80036ca:	4904      	ldr	r1, [pc, #16]	; (80036dc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80036cc:	4313      	orrs	r3, r2
 80036ce:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 80036d0:	2300      	movs	r3, #0
}
 80036d2:	4618      	mov	r0, r3
 80036d4:	3718      	adds	r7, #24
 80036d6:	46bd      	mov	sp, r7
 80036d8:	bd80      	pop	{r7, pc}
 80036da:	bf00      	nop
 80036dc:	40021000 	.word	0x40021000
 80036e0:	40007000 	.word	0x40007000
 80036e4:	42420440 	.word	0x42420440

080036e8 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 80036e8:	b590      	push	{r4, r7, lr}
 80036ea:	b08d      	sub	sp, #52	; 0x34
 80036ec:	af00      	add	r7, sp, #0
 80036ee:	6078      	str	r0, [r7, #4]
  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
  uint32_t pll2mul = 0U, pll3mul = 0U, prediv2 = 0U;
#endif /* STM32F105xC || STM32F107xC */
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80036f0:	4b55      	ldr	r3, [pc, #340]	; (8003848 <HAL_RCCEx_GetPeriphCLKFreq+0x160>)
 80036f2:	f107 040c 	add.w	r4, r7, #12
 80036f6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80036f8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80036fc:	4b53      	ldr	r3, [pc, #332]	; (800384c <HAL_RCCEx_GetPeriphCLKFreq+0x164>)
 80036fe:	881b      	ldrh	r3, [r3, #0]
 8003700:	813b      	strh	r3, [r7, #8]

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 8003702:	2300      	movs	r3, #0
 8003704:	627b      	str	r3, [r7, #36]	; 0x24
 8003706:	2300      	movs	r3, #0
 8003708:	62fb      	str	r3, [r7, #44]	; 0x2c
 800370a:	2300      	movs	r3, #0
 800370c:	623b      	str	r3, [r7, #32]
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 800370e:	2300      	movs	r3, #0
 8003710:	61fb      	str	r3, [r7, #28]
 8003712:	2300      	movs	r3, #0
 8003714:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	2b02      	cmp	r3, #2
 800371a:	d07f      	beq.n	800381c <HAL_RCCEx_GetPeriphCLKFreq+0x134>
 800371c:	2b10      	cmp	r3, #16
 800371e:	d002      	beq.n	8003726 <HAL_RCCEx_GetPeriphCLKFreq+0x3e>
 8003720:	2b01      	cmp	r3, #1
 8003722:	d048      	beq.n	80037b6 <HAL_RCCEx_GetPeriphCLKFreq+0xce>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
      break;
    }
    default:
    {
      break;
 8003724:	e08b      	b.n	800383e <HAL_RCCEx_GetPeriphCLKFreq+0x156>
      temp_reg = RCC->CFGR;
 8003726:	4b4a      	ldr	r3, [pc, #296]	; (8003850 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 8003728:	685b      	ldr	r3, [r3, #4]
 800372a:	61fb      	str	r3, [r7, #28]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 800372c:	4b48      	ldr	r3, [pc, #288]	; (8003850 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003734:	2b00      	cmp	r3, #0
 8003736:	d07f      	beq.n	8003838 <HAL_RCCEx_GetPeriphCLKFreq+0x150>
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8003738:	69fb      	ldr	r3, [r7, #28]
 800373a:	0c9b      	lsrs	r3, r3, #18
 800373c:	f003 030f 	and.w	r3, r3, #15
 8003740:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8003744:	4413      	add	r3, r2
 8003746:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 800374a:	623b      	str	r3, [r7, #32]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800374c:	69fb      	ldr	r3, [r7, #28]
 800374e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003752:	2b00      	cmp	r3, #0
 8003754:	d018      	beq.n	8003788 <HAL_RCCEx_GetPeriphCLKFreq+0xa0>
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8003756:	4b3e      	ldr	r3, [pc, #248]	; (8003850 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 8003758:	685b      	ldr	r3, [r3, #4]
 800375a:	0c5b      	lsrs	r3, r3, #17
 800375c:	f003 0301 	and.w	r3, r3, #1
 8003760:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8003764:	4413      	add	r3, r2
 8003766:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 800376a:	627b      	str	r3, [r7, #36]	; 0x24
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800376c:	69fb      	ldr	r3, [r7, #28]
 800376e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003772:	2b00      	cmp	r3, #0
 8003774:	d00d      	beq.n	8003792 <HAL_RCCEx_GetPeriphCLKFreq+0xaa>
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 8003776:	4a37      	ldr	r2, [pc, #220]	; (8003854 <HAL_RCCEx_GetPeriphCLKFreq+0x16c>)
 8003778:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800377a:	fbb2 f2f3 	udiv	r2, r2, r3
 800377e:	6a3b      	ldr	r3, [r7, #32]
 8003780:	fb02 f303 	mul.w	r3, r2, r3
 8003784:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003786:	e004      	b.n	8003792 <HAL_RCCEx_GetPeriphCLKFreq+0xaa>
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003788:	6a3b      	ldr	r3, [r7, #32]
 800378a:	4a33      	ldr	r2, [pc, #204]	; (8003858 <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 800378c:	fb02 f303 	mul.w	r3, r2, r3
 8003790:	62fb      	str	r3, [r7, #44]	; 0x2c
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 8003792:	4b2f      	ldr	r3, [pc, #188]	; (8003850 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 8003794:	685b      	ldr	r3, [r3, #4]
 8003796:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800379a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800379e:	d102      	bne.n	80037a6 <HAL_RCCEx_GetPeriphCLKFreq+0xbe>
          frequency = pllclk;
 80037a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80037a2:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 80037a4:	e048      	b.n	8003838 <HAL_RCCEx_GetPeriphCLKFreq+0x150>
          frequency = (pllclk * 2) / 3;
 80037a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80037a8:	005b      	lsls	r3, r3, #1
 80037aa:	4a2c      	ldr	r2, [pc, #176]	; (800385c <HAL_RCCEx_GetPeriphCLKFreq+0x174>)
 80037ac:	fba2 2303 	umull	r2, r3, r2, r3
 80037b0:	085b      	lsrs	r3, r3, #1
 80037b2:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 80037b4:	e040      	b.n	8003838 <HAL_RCCEx_GetPeriphCLKFreq+0x150>
      temp_reg = RCC->BDCR;
 80037b6:	4b26      	ldr	r3, [pc, #152]	; (8003850 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 80037b8:	6a1b      	ldr	r3, [r3, #32]
 80037ba:	61fb      	str	r3, [r7, #28]
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 80037bc:	69fb      	ldr	r3, [r7, #28]
 80037be:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80037c2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80037c6:	d108      	bne.n	80037da <HAL_RCCEx_GetPeriphCLKFreq+0xf2>
 80037c8:	69fb      	ldr	r3, [r7, #28]
 80037ca:	f003 0302 	and.w	r3, r3, #2
 80037ce:	2b00      	cmp	r3, #0
 80037d0:	d003      	beq.n	80037da <HAL_RCCEx_GetPeriphCLKFreq+0xf2>
        frequency = LSE_VALUE;
 80037d2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80037d6:	62bb      	str	r3, [r7, #40]	; 0x28
 80037d8:	e01f      	b.n	800381a <HAL_RCCEx_GetPeriphCLKFreq+0x132>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 80037da:	69fb      	ldr	r3, [r7, #28]
 80037dc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80037e0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80037e4:	d109      	bne.n	80037fa <HAL_RCCEx_GetPeriphCLKFreq+0x112>
 80037e6:	4b1a      	ldr	r3, [pc, #104]	; (8003850 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 80037e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037ea:	f003 0302 	and.w	r3, r3, #2
 80037ee:	2b00      	cmp	r3, #0
 80037f0:	d003      	beq.n	80037fa <HAL_RCCEx_GetPeriphCLKFreq+0x112>
        frequency = LSI_VALUE;
 80037f2:	f649 4340 	movw	r3, #40000	; 0x9c40
 80037f6:	62bb      	str	r3, [r7, #40]	; 0x28
 80037f8:	e00f      	b.n	800381a <HAL_RCCEx_GetPeriphCLKFreq+0x132>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 80037fa:	69fb      	ldr	r3, [r7, #28]
 80037fc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003800:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003804:	d11a      	bne.n	800383c <HAL_RCCEx_GetPeriphCLKFreq+0x154>
 8003806:	4b12      	ldr	r3, [pc, #72]	; (8003850 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800380e:	2b00      	cmp	r3, #0
 8003810:	d014      	beq.n	800383c <HAL_RCCEx_GetPeriphCLKFreq+0x154>
        frequency = HSE_VALUE / 128U;
 8003812:	f24f 4324 	movw	r3, #62500	; 0xf424
 8003816:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8003818:	e010      	b.n	800383c <HAL_RCCEx_GetPeriphCLKFreq+0x154>
 800381a:	e00f      	b.n	800383c <HAL_RCCEx_GetPeriphCLKFreq+0x154>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 800381c:	f7ff fe62 	bl	80034e4 <HAL_RCC_GetPCLK2Freq>
 8003820:	4602      	mov	r2, r0
 8003822:	4b0b      	ldr	r3, [pc, #44]	; (8003850 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 8003824:	685b      	ldr	r3, [r3, #4]
 8003826:	0b9b      	lsrs	r3, r3, #14
 8003828:	f003 0303 	and.w	r3, r3, #3
 800382c:	3301      	adds	r3, #1
 800382e:	005b      	lsls	r3, r3, #1
 8003830:	fbb2 f3f3 	udiv	r3, r2, r3
 8003834:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8003836:	e002      	b.n	800383e <HAL_RCCEx_GetPeriphCLKFreq+0x156>
      break;
 8003838:	bf00      	nop
 800383a:	e000      	b.n	800383e <HAL_RCCEx_GetPeriphCLKFreq+0x156>
      break;
 800383c:	bf00      	nop
    }
  }
  return (frequency);
 800383e:	6abb      	ldr	r3, [r7, #40]	; 0x28
}
 8003840:	4618      	mov	r0, r3
 8003842:	3734      	adds	r7, #52	; 0x34
 8003844:	46bd      	mov	sp, r7
 8003846:	bd90      	pop	{r4, r7, pc}
 8003848:	080087d8 	.word	0x080087d8
 800384c:	080087e8 	.word	0x080087e8
 8003850:	40021000 	.word	0x40021000
 8003854:	007a1200 	.word	0x007a1200
 8003858:	003d0900 	.word	0x003d0900
 800385c:	aaaaaaab 	.word	0xaaaaaaab

08003860 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003860:	b580      	push	{r7, lr}
 8003862:	b082      	sub	sp, #8
 8003864:	af00      	add	r7, sp, #0
 8003866:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	2b00      	cmp	r3, #0
 800386c:	d101      	bne.n	8003872 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800386e:	2301      	movs	r3, #1
 8003870:	e01d      	b.n	80038ae <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003878:	b2db      	uxtb	r3, r3
 800387a:	2b00      	cmp	r3, #0
 800387c:	d106      	bne.n	800388c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	2200      	movs	r2, #0
 8003882:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003886:	6878      	ldr	r0, [r7, #4]
 8003888:	f7fe fa06 	bl	8001c98 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	2202      	movs	r2, #2
 8003890:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	681a      	ldr	r2, [r3, #0]
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	3304      	adds	r3, #4
 800389c:	4619      	mov	r1, r3
 800389e:	4610      	mov	r0, r2
 80038a0:	f000 fa10 	bl	8003cc4 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	2201      	movs	r2, #1
 80038a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80038ac:	2300      	movs	r3, #0
}
 80038ae:	4618      	mov	r0, r3
 80038b0:	3708      	adds	r7, #8
 80038b2:	46bd      	mov	sp, r7
 80038b4:	bd80      	pop	{r7, pc}

080038b6 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80038b6:	b480      	push	{r7}
 80038b8:	b085      	sub	sp, #20
 80038ba:	af00      	add	r7, sp, #0
 80038bc:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	68da      	ldr	r2, [r3, #12]
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	f042 0201 	orr.w	r2, r2, #1
 80038cc:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	689b      	ldr	r3, [r3, #8]
 80038d4:	f003 0307 	and.w	r3, r3, #7
 80038d8:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80038da:	68fb      	ldr	r3, [r7, #12]
 80038dc:	2b06      	cmp	r3, #6
 80038de:	d007      	beq.n	80038f0 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	681a      	ldr	r2, [r3, #0]
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	f042 0201 	orr.w	r2, r2, #1
 80038ee:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80038f0:	2300      	movs	r3, #0
}
 80038f2:	4618      	mov	r0, r3
 80038f4:	3714      	adds	r7, #20
 80038f6:	46bd      	mov	sp, r7
 80038f8:	bc80      	pop	{r7}
 80038fa:	4770      	bx	lr

080038fc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80038fc:	b580      	push	{r7, lr}
 80038fe:	b082      	sub	sp, #8
 8003900:	af00      	add	r7, sp, #0
 8003902:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	691b      	ldr	r3, [r3, #16]
 800390a:	f003 0302 	and.w	r3, r3, #2
 800390e:	2b02      	cmp	r3, #2
 8003910:	d122      	bne.n	8003958 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	68db      	ldr	r3, [r3, #12]
 8003918:	f003 0302 	and.w	r3, r3, #2
 800391c:	2b02      	cmp	r3, #2
 800391e:	d11b      	bne.n	8003958 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	f06f 0202 	mvn.w	r2, #2
 8003928:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	2201      	movs	r2, #1
 800392e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	699b      	ldr	r3, [r3, #24]
 8003936:	f003 0303 	and.w	r3, r3, #3
 800393a:	2b00      	cmp	r3, #0
 800393c:	d003      	beq.n	8003946 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800393e:	6878      	ldr	r0, [r7, #4]
 8003940:	f000 f9a4 	bl	8003c8c <HAL_TIM_IC_CaptureCallback>
 8003944:	e005      	b.n	8003952 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003946:	6878      	ldr	r0, [r7, #4]
 8003948:	f000 f997 	bl	8003c7a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800394c:	6878      	ldr	r0, [r7, #4]
 800394e:	f000 f9a6 	bl	8003c9e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	2200      	movs	r2, #0
 8003956:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	691b      	ldr	r3, [r3, #16]
 800395e:	f003 0304 	and.w	r3, r3, #4
 8003962:	2b04      	cmp	r3, #4
 8003964:	d122      	bne.n	80039ac <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	68db      	ldr	r3, [r3, #12]
 800396c:	f003 0304 	and.w	r3, r3, #4
 8003970:	2b04      	cmp	r3, #4
 8003972:	d11b      	bne.n	80039ac <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	f06f 0204 	mvn.w	r2, #4
 800397c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	2202      	movs	r2, #2
 8003982:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	699b      	ldr	r3, [r3, #24]
 800398a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800398e:	2b00      	cmp	r3, #0
 8003990:	d003      	beq.n	800399a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003992:	6878      	ldr	r0, [r7, #4]
 8003994:	f000 f97a 	bl	8003c8c <HAL_TIM_IC_CaptureCallback>
 8003998:	e005      	b.n	80039a6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800399a:	6878      	ldr	r0, [r7, #4]
 800399c:	f000 f96d 	bl	8003c7a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80039a0:	6878      	ldr	r0, [r7, #4]
 80039a2:	f000 f97c 	bl	8003c9e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	2200      	movs	r2, #0
 80039aa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	691b      	ldr	r3, [r3, #16]
 80039b2:	f003 0308 	and.w	r3, r3, #8
 80039b6:	2b08      	cmp	r3, #8
 80039b8:	d122      	bne.n	8003a00 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	68db      	ldr	r3, [r3, #12]
 80039c0:	f003 0308 	and.w	r3, r3, #8
 80039c4:	2b08      	cmp	r3, #8
 80039c6:	d11b      	bne.n	8003a00 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	f06f 0208 	mvn.w	r2, #8
 80039d0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	2204      	movs	r2, #4
 80039d6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	69db      	ldr	r3, [r3, #28]
 80039de:	f003 0303 	and.w	r3, r3, #3
 80039e2:	2b00      	cmp	r3, #0
 80039e4:	d003      	beq.n	80039ee <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80039e6:	6878      	ldr	r0, [r7, #4]
 80039e8:	f000 f950 	bl	8003c8c <HAL_TIM_IC_CaptureCallback>
 80039ec:	e005      	b.n	80039fa <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80039ee:	6878      	ldr	r0, [r7, #4]
 80039f0:	f000 f943 	bl	8003c7a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80039f4:	6878      	ldr	r0, [r7, #4]
 80039f6:	f000 f952 	bl	8003c9e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	2200      	movs	r2, #0
 80039fe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	691b      	ldr	r3, [r3, #16]
 8003a06:	f003 0310 	and.w	r3, r3, #16
 8003a0a:	2b10      	cmp	r3, #16
 8003a0c:	d122      	bne.n	8003a54 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	68db      	ldr	r3, [r3, #12]
 8003a14:	f003 0310 	and.w	r3, r3, #16
 8003a18:	2b10      	cmp	r3, #16
 8003a1a:	d11b      	bne.n	8003a54 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	f06f 0210 	mvn.w	r2, #16
 8003a24:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	2208      	movs	r2, #8
 8003a2a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	69db      	ldr	r3, [r3, #28]
 8003a32:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003a36:	2b00      	cmp	r3, #0
 8003a38:	d003      	beq.n	8003a42 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003a3a:	6878      	ldr	r0, [r7, #4]
 8003a3c:	f000 f926 	bl	8003c8c <HAL_TIM_IC_CaptureCallback>
 8003a40:	e005      	b.n	8003a4e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003a42:	6878      	ldr	r0, [r7, #4]
 8003a44:	f000 f919 	bl	8003c7a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003a48:	6878      	ldr	r0, [r7, #4]
 8003a4a:	f000 f928 	bl	8003c9e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	2200      	movs	r2, #0
 8003a52:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	691b      	ldr	r3, [r3, #16]
 8003a5a:	f003 0301 	and.w	r3, r3, #1
 8003a5e:	2b01      	cmp	r3, #1
 8003a60:	d10e      	bne.n	8003a80 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	68db      	ldr	r3, [r3, #12]
 8003a68:	f003 0301 	and.w	r3, r3, #1
 8003a6c:	2b01      	cmp	r3, #1
 8003a6e:	d107      	bne.n	8003a80 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	f06f 0201 	mvn.w	r2, #1
 8003a78:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003a7a:	6878      	ldr	r0, [r7, #4]
 8003a7c:	f7fd fc58 	bl	8001330 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	691b      	ldr	r3, [r3, #16]
 8003a86:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003a8a:	2b80      	cmp	r3, #128	; 0x80
 8003a8c:	d10e      	bne.n	8003aac <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	68db      	ldr	r3, [r3, #12]
 8003a94:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003a98:	2b80      	cmp	r3, #128	; 0x80
 8003a9a:	d107      	bne.n	8003aac <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003aa4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003aa6:	6878      	ldr	r0, [r7, #4]
 8003aa8:	f000 fa51 	bl	8003f4e <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	691b      	ldr	r3, [r3, #16]
 8003ab2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003ab6:	2b40      	cmp	r3, #64	; 0x40
 8003ab8:	d10e      	bne.n	8003ad8 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	68db      	ldr	r3, [r3, #12]
 8003ac0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003ac4:	2b40      	cmp	r3, #64	; 0x40
 8003ac6:	d107      	bne.n	8003ad8 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003ad0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003ad2:	6878      	ldr	r0, [r7, #4]
 8003ad4:	f000 f8ec 	bl	8003cb0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	691b      	ldr	r3, [r3, #16]
 8003ade:	f003 0320 	and.w	r3, r3, #32
 8003ae2:	2b20      	cmp	r3, #32
 8003ae4:	d10e      	bne.n	8003b04 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	68db      	ldr	r3, [r3, #12]
 8003aec:	f003 0320 	and.w	r3, r3, #32
 8003af0:	2b20      	cmp	r3, #32
 8003af2:	d107      	bne.n	8003b04 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	f06f 0220 	mvn.w	r2, #32
 8003afc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003afe:	6878      	ldr	r0, [r7, #4]
 8003b00:	f000 fa1c 	bl	8003f3c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003b04:	bf00      	nop
 8003b06:	3708      	adds	r7, #8
 8003b08:	46bd      	mov	sp, r7
 8003b0a:	bd80      	pop	{r7, pc}

08003b0c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003b0c:	b580      	push	{r7, lr}
 8003b0e:	b084      	sub	sp, #16
 8003b10:	af00      	add	r7, sp, #0
 8003b12:	6078      	str	r0, [r7, #4]
 8003b14:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003b1c:	2b01      	cmp	r3, #1
 8003b1e:	d101      	bne.n	8003b24 <HAL_TIM_ConfigClockSource+0x18>
 8003b20:	2302      	movs	r3, #2
 8003b22:	e0a6      	b.n	8003c72 <HAL_TIM_ConfigClockSource+0x166>
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	2201      	movs	r2, #1
 8003b28:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	2202      	movs	r2, #2
 8003b30:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	689b      	ldr	r3, [r3, #8]
 8003b3a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003b3c:	68fb      	ldr	r3, [r7, #12]
 8003b3e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8003b42:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003b44:	68fb      	ldr	r3, [r7, #12]
 8003b46:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003b4a:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	68fa      	ldr	r2, [r7, #12]
 8003b52:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003b54:	683b      	ldr	r3, [r7, #0]
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	2b40      	cmp	r3, #64	; 0x40
 8003b5a:	d067      	beq.n	8003c2c <HAL_TIM_ConfigClockSource+0x120>
 8003b5c:	2b40      	cmp	r3, #64	; 0x40
 8003b5e:	d80b      	bhi.n	8003b78 <HAL_TIM_ConfigClockSource+0x6c>
 8003b60:	2b10      	cmp	r3, #16
 8003b62:	d073      	beq.n	8003c4c <HAL_TIM_ConfigClockSource+0x140>
 8003b64:	2b10      	cmp	r3, #16
 8003b66:	d802      	bhi.n	8003b6e <HAL_TIM_ConfigClockSource+0x62>
 8003b68:	2b00      	cmp	r3, #0
 8003b6a:	d06f      	beq.n	8003c4c <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 8003b6c:	e078      	b.n	8003c60 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8003b6e:	2b20      	cmp	r3, #32
 8003b70:	d06c      	beq.n	8003c4c <HAL_TIM_ConfigClockSource+0x140>
 8003b72:	2b30      	cmp	r3, #48	; 0x30
 8003b74:	d06a      	beq.n	8003c4c <HAL_TIM_ConfigClockSource+0x140>
      break;
 8003b76:	e073      	b.n	8003c60 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8003b78:	2b70      	cmp	r3, #112	; 0x70
 8003b7a:	d00d      	beq.n	8003b98 <HAL_TIM_ConfigClockSource+0x8c>
 8003b7c:	2b70      	cmp	r3, #112	; 0x70
 8003b7e:	d804      	bhi.n	8003b8a <HAL_TIM_ConfigClockSource+0x7e>
 8003b80:	2b50      	cmp	r3, #80	; 0x50
 8003b82:	d033      	beq.n	8003bec <HAL_TIM_ConfigClockSource+0xe0>
 8003b84:	2b60      	cmp	r3, #96	; 0x60
 8003b86:	d041      	beq.n	8003c0c <HAL_TIM_ConfigClockSource+0x100>
      break;
 8003b88:	e06a      	b.n	8003c60 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8003b8a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003b8e:	d066      	beq.n	8003c5e <HAL_TIM_ConfigClockSource+0x152>
 8003b90:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003b94:	d017      	beq.n	8003bc6 <HAL_TIM_ConfigClockSource+0xba>
      break;
 8003b96:	e063      	b.n	8003c60 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	6818      	ldr	r0, [r3, #0]
 8003b9c:	683b      	ldr	r3, [r7, #0]
 8003b9e:	6899      	ldr	r1, [r3, #8]
 8003ba0:	683b      	ldr	r3, [r7, #0]
 8003ba2:	685a      	ldr	r2, [r3, #4]
 8003ba4:	683b      	ldr	r3, [r7, #0]
 8003ba6:	68db      	ldr	r3, [r3, #12]
 8003ba8:	f000 f965 	bl	8003e76 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	689b      	ldr	r3, [r3, #8]
 8003bb2:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003bb4:	68fb      	ldr	r3, [r7, #12]
 8003bb6:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003bba:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	68fa      	ldr	r2, [r7, #12]
 8003bc2:	609a      	str	r2, [r3, #8]
      break;
 8003bc4:	e04c      	b.n	8003c60 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	6818      	ldr	r0, [r3, #0]
 8003bca:	683b      	ldr	r3, [r7, #0]
 8003bcc:	6899      	ldr	r1, [r3, #8]
 8003bce:	683b      	ldr	r3, [r7, #0]
 8003bd0:	685a      	ldr	r2, [r3, #4]
 8003bd2:	683b      	ldr	r3, [r7, #0]
 8003bd4:	68db      	ldr	r3, [r3, #12]
 8003bd6:	f000 f94e 	bl	8003e76 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	689a      	ldr	r2, [r3, #8]
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003be8:	609a      	str	r2, [r3, #8]
      break;
 8003bea:	e039      	b.n	8003c60 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	6818      	ldr	r0, [r3, #0]
 8003bf0:	683b      	ldr	r3, [r7, #0]
 8003bf2:	6859      	ldr	r1, [r3, #4]
 8003bf4:	683b      	ldr	r3, [r7, #0]
 8003bf6:	68db      	ldr	r3, [r3, #12]
 8003bf8:	461a      	mov	r2, r3
 8003bfa:	f000 f8c5 	bl	8003d88 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	2150      	movs	r1, #80	; 0x50
 8003c04:	4618      	mov	r0, r3
 8003c06:	f000 f91c 	bl	8003e42 <TIM_ITRx_SetConfig>
      break;
 8003c0a:	e029      	b.n	8003c60 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	6818      	ldr	r0, [r3, #0]
 8003c10:	683b      	ldr	r3, [r7, #0]
 8003c12:	6859      	ldr	r1, [r3, #4]
 8003c14:	683b      	ldr	r3, [r7, #0]
 8003c16:	68db      	ldr	r3, [r3, #12]
 8003c18:	461a      	mov	r2, r3
 8003c1a:	f000 f8e3 	bl	8003de4 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	2160      	movs	r1, #96	; 0x60
 8003c24:	4618      	mov	r0, r3
 8003c26:	f000 f90c 	bl	8003e42 <TIM_ITRx_SetConfig>
      break;
 8003c2a:	e019      	b.n	8003c60 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	6818      	ldr	r0, [r3, #0]
 8003c30:	683b      	ldr	r3, [r7, #0]
 8003c32:	6859      	ldr	r1, [r3, #4]
 8003c34:	683b      	ldr	r3, [r7, #0]
 8003c36:	68db      	ldr	r3, [r3, #12]
 8003c38:	461a      	mov	r2, r3
 8003c3a:	f000 f8a5 	bl	8003d88 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	2140      	movs	r1, #64	; 0x40
 8003c44:	4618      	mov	r0, r3
 8003c46:	f000 f8fc 	bl	8003e42 <TIM_ITRx_SetConfig>
      break;
 8003c4a:	e009      	b.n	8003c60 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	681a      	ldr	r2, [r3, #0]
 8003c50:	683b      	ldr	r3, [r7, #0]
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	4619      	mov	r1, r3
 8003c56:	4610      	mov	r0, r2
 8003c58:	f000 f8f3 	bl	8003e42 <TIM_ITRx_SetConfig>
      break;
 8003c5c:	e000      	b.n	8003c60 <HAL_TIM_ConfigClockSource+0x154>
      break;
 8003c5e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	2201      	movs	r2, #1
 8003c64:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	2200      	movs	r2, #0
 8003c6c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003c70:	2300      	movs	r3, #0
}
 8003c72:	4618      	mov	r0, r3
 8003c74:	3710      	adds	r7, #16
 8003c76:	46bd      	mov	sp, r7
 8003c78:	bd80      	pop	{r7, pc}

08003c7a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003c7a:	b480      	push	{r7}
 8003c7c:	b083      	sub	sp, #12
 8003c7e:	af00      	add	r7, sp, #0
 8003c80:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003c82:	bf00      	nop
 8003c84:	370c      	adds	r7, #12
 8003c86:	46bd      	mov	sp, r7
 8003c88:	bc80      	pop	{r7}
 8003c8a:	4770      	bx	lr

08003c8c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003c8c:	b480      	push	{r7}
 8003c8e:	b083      	sub	sp, #12
 8003c90:	af00      	add	r7, sp, #0
 8003c92:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003c94:	bf00      	nop
 8003c96:	370c      	adds	r7, #12
 8003c98:	46bd      	mov	sp, r7
 8003c9a:	bc80      	pop	{r7}
 8003c9c:	4770      	bx	lr

08003c9e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003c9e:	b480      	push	{r7}
 8003ca0:	b083      	sub	sp, #12
 8003ca2:	af00      	add	r7, sp, #0
 8003ca4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003ca6:	bf00      	nop
 8003ca8:	370c      	adds	r7, #12
 8003caa:	46bd      	mov	sp, r7
 8003cac:	bc80      	pop	{r7}
 8003cae:	4770      	bx	lr

08003cb0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003cb0:	b480      	push	{r7}
 8003cb2:	b083      	sub	sp, #12
 8003cb4:	af00      	add	r7, sp, #0
 8003cb6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003cb8:	bf00      	nop
 8003cba:	370c      	adds	r7, #12
 8003cbc:	46bd      	mov	sp, r7
 8003cbe:	bc80      	pop	{r7}
 8003cc0:	4770      	bx	lr
	...

08003cc4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003cc4:	b480      	push	{r7}
 8003cc6:	b085      	sub	sp, #20
 8003cc8:	af00      	add	r7, sp, #0
 8003cca:	6078      	str	r0, [r7, #4]
 8003ccc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	4a29      	ldr	r2, [pc, #164]	; (8003d7c <TIM_Base_SetConfig+0xb8>)
 8003cd8:	4293      	cmp	r3, r2
 8003cda:	d00b      	beq.n	8003cf4 <TIM_Base_SetConfig+0x30>
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003ce2:	d007      	beq.n	8003cf4 <TIM_Base_SetConfig+0x30>
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	4a26      	ldr	r2, [pc, #152]	; (8003d80 <TIM_Base_SetConfig+0xbc>)
 8003ce8:	4293      	cmp	r3, r2
 8003cea:	d003      	beq.n	8003cf4 <TIM_Base_SetConfig+0x30>
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	4a25      	ldr	r2, [pc, #148]	; (8003d84 <TIM_Base_SetConfig+0xc0>)
 8003cf0:	4293      	cmp	r3, r2
 8003cf2:	d108      	bne.n	8003d06 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003cf4:	68fb      	ldr	r3, [r7, #12]
 8003cf6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003cfa:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003cfc:	683b      	ldr	r3, [r7, #0]
 8003cfe:	685b      	ldr	r3, [r3, #4]
 8003d00:	68fa      	ldr	r2, [r7, #12]
 8003d02:	4313      	orrs	r3, r2
 8003d04:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	4a1c      	ldr	r2, [pc, #112]	; (8003d7c <TIM_Base_SetConfig+0xb8>)
 8003d0a:	4293      	cmp	r3, r2
 8003d0c:	d00b      	beq.n	8003d26 <TIM_Base_SetConfig+0x62>
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003d14:	d007      	beq.n	8003d26 <TIM_Base_SetConfig+0x62>
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	4a19      	ldr	r2, [pc, #100]	; (8003d80 <TIM_Base_SetConfig+0xbc>)
 8003d1a:	4293      	cmp	r3, r2
 8003d1c:	d003      	beq.n	8003d26 <TIM_Base_SetConfig+0x62>
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	4a18      	ldr	r2, [pc, #96]	; (8003d84 <TIM_Base_SetConfig+0xc0>)
 8003d22:	4293      	cmp	r3, r2
 8003d24:	d108      	bne.n	8003d38 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003d26:	68fb      	ldr	r3, [r7, #12]
 8003d28:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003d2c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003d2e:	683b      	ldr	r3, [r7, #0]
 8003d30:	68db      	ldr	r3, [r3, #12]
 8003d32:	68fa      	ldr	r2, [r7, #12]
 8003d34:	4313      	orrs	r3, r2
 8003d36:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003d38:	68fb      	ldr	r3, [r7, #12]
 8003d3a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003d3e:	683b      	ldr	r3, [r7, #0]
 8003d40:	695b      	ldr	r3, [r3, #20]
 8003d42:	4313      	orrs	r3, r2
 8003d44:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	68fa      	ldr	r2, [r7, #12]
 8003d4a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003d4c:	683b      	ldr	r3, [r7, #0]
 8003d4e:	689a      	ldr	r2, [r3, #8]
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003d54:	683b      	ldr	r3, [r7, #0]
 8003d56:	681a      	ldr	r2, [r3, #0]
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	4a07      	ldr	r2, [pc, #28]	; (8003d7c <TIM_Base_SetConfig+0xb8>)
 8003d60:	4293      	cmp	r3, r2
 8003d62:	d103      	bne.n	8003d6c <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003d64:	683b      	ldr	r3, [r7, #0]
 8003d66:	691a      	ldr	r2, [r3, #16]
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	2201      	movs	r2, #1
 8003d70:	615a      	str	r2, [r3, #20]
}
 8003d72:	bf00      	nop
 8003d74:	3714      	adds	r7, #20
 8003d76:	46bd      	mov	sp, r7
 8003d78:	bc80      	pop	{r7}
 8003d7a:	4770      	bx	lr
 8003d7c:	40012c00 	.word	0x40012c00
 8003d80:	40000400 	.word	0x40000400
 8003d84:	40000800 	.word	0x40000800

08003d88 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003d88:	b480      	push	{r7}
 8003d8a:	b087      	sub	sp, #28
 8003d8c:	af00      	add	r7, sp, #0
 8003d8e:	60f8      	str	r0, [r7, #12]
 8003d90:	60b9      	str	r1, [r7, #8]
 8003d92:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003d94:	68fb      	ldr	r3, [r7, #12]
 8003d96:	6a1b      	ldr	r3, [r3, #32]
 8003d98:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003d9a:	68fb      	ldr	r3, [r7, #12]
 8003d9c:	6a1b      	ldr	r3, [r3, #32]
 8003d9e:	f023 0201 	bic.w	r2, r3, #1
 8003da2:	68fb      	ldr	r3, [r7, #12]
 8003da4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003da6:	68fb      	ldr	r3, [r7, #12]
 8003da8:	699b      	ldr	r3, [r3, #24]
 8003daa:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003dac:	693b      	ldr	r3, [r7, #16]
 8003dae:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003db2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	011b      	lsls	r3, r3, #4
 8003db8:	693a      	ldr	r2, [r7, #16]
 8003dba:	4313      	orrs	r3, r2
 8003dbc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003dbe:	697b      	ldr	r3, [r7, #20]
 8003dc0:	f023 030a 	bic.w	r3, r3, #10
 8003dc4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003dc6:	697a      	ldr	r2, [r7, #20]
 8003dc8:	68bb      	ldr	r3, [r7, #8]
 8003dca:	4313      	orrs	r3, r2
 8003dcc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003dce:	68fb      	ldr	r3, [r7, #12]
 8003dd0:	693a      	ldr	r2, [r7, #16]
 8003dd2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003dd4:	68fb      	ldr	r3, [r7, #12]
 8003dd6:	697a      	ldr	r2, [r7, #20]
 8003dd8:	621a      	str	r2, [r3, #32]
}
 8003dda:	bf00      	nop
 8003ddc:	371c      	adds	r7, #28
 8003dde:	46bd      	mov	sp, r7
 8003de0:	bc80      	pop	{r7}
 8003de2:	4770      	bx	lr

08003de4 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003de4:	b480      	push	{r7}
 8003de6:	b087      	sub	sp, #28
 8003de8:	af00      	add	r7, sp, #0
 8003dea:	60f8      	str	r0, [r7, #12]
 8003dec:	60b9      	str	r1, [r7, #8]
 8003dee:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003df0:	68fb      	ldr	r3, [r7, #12]
 8003df2:	6a1b      	ldr	r3, [r3, #32]
 8003df4:	f023 0210 	bic.w	r2, r3, #16
 8003df8:	68fb      	ldr	r3, [r7, #12]
 8003dfa:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003dfc:	68fb      	ldr	r3, [r7, #12]
 8003dfe:	699b      	ldr	r3, [r3, #24]
 8003e00:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003e02:	68fb      	ldr	r3, [r7, #12]
 8003e04:	6a1b      	ldr	r3, [r3, #32]
 8003e06:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003e08:	697b      	ldr	r3, [r7, #20]
 8003e0a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003e0e:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	031b      	lsls	r3, r3, #12
 8003e14:	697a      	ldr	r2, [r7, #20]
 8003e16:	4313      	orrs	r3, r2
 8003e18:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003e1a:	693b      	ldr	r3, [r7, #16]
 8003e1c:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003e20:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003e22:	68bb      	ldr	r3, [r7, #8]
 8003e24:	011b      	lsls	r3, r3, #4
 8003e26:	693a      	ldr	r2, [r7, #16]
 8003e28:	4313      	orrs	r3, r2
 8003e2a:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003e2c:	68fb      	ldr	r3, [r7, #12]
 8003e2e:	697a      	ldr	r2, [r7, #20]
 8003e30:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003e32:	68fb      	ldr	r3, [r7, #12]
 8003e34:	693a      	ldr	r2, [r7, #16]
 8003e36:	621a      	str	r2, [r3, #32]
}
 8003e38:	bf00      	nop
 8003e3a:	371c      	adds	r7, #28
 8003e3c:	46bd      	mov	sp, r7
 8003e3e:	bc80      	pop	{r7}
 8003e40:	4770      	bx	lr

08003e42 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003e42:	b480      	push	{r7}
 8003e44:	b085      	sub	sp, #20
 8003e46:	af00      	add	r7, sp, #0
 8003e48:	6078      	str	r0, [r7, #4]
 8003e4a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	689b      	ldr	r3, [r3, #8]
 8003e50:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003e52:	68fb      	ldr	r3, [r7, #12]
 8003e54:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003e58:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003e5a:	683a      	ldr	r2, [r7, #0]
 8003e5c:	68fb      	ldr	r3, [r7, #12]
 8003e5e:	4313      	orrs	r3, r2
 8003e60:	f043 0307 	orr.w	r3, r3, #7
 8003e64:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	68fa      	ldr	r2, [r7, #12]
 8003e6a:	609a      	str	r2, [r3, #8]
}
 8003e6c:	bf00      	nop
 8003e6e:	3714      	adds	r7, #20
 8003e70:	46bd      	mov	sp, r7
 8003e72:	bc80      	pop	{r7}
 8003e74:	4770      	bx	lr

08003e76 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003e76:	b480      	push	{r7}
 8003e78:	b087      	sub	sp, #28
 8003e7a:	af00      	add	r7, sp, #0
 8003e7c:	60f8      	str	r0, [r7, #12]
 8003e7e:	60b9      	str	r1, [r7, #8]
 8003e80:	607a      	str	r2, [r7, #4]
 8003e82:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003e84:	68fb      	ldr	r3, [r7, #12]
 8003e86:	689b      	ldr	r3, [r3, #8]
 8003e88:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003e8a:	697b      	ldr	r3, [r7, #20]
 8003e8c:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003e90:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003e92:	683b      	ldr	r3, [r7, #0]
 8003e94:	021a      	lsls	r2, r3, #8
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	431a      	orrs	r2, r3
 8003e9a:	68bb      	ldr	r3, [r7, #8]
 8003e9c:	4313      	orrs	r3, r2
 8003e9e:	697a      	ldr	r2, [r7, #20]
 8003ea0:	4313      	orrs	r3, r2
 8003ea2:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003ea4:	68fb      	ldr	r3, [r7, #12]
 8003ea6:	697a      	ldr	r2, [r7, #20]
 8003ea8:	609a      	str	r2, [r3, #8]
}
 8003eaa:	bf00      	nop
 8003eac:	371c      	adds	r7, #28
 8003eae:	46bd      	mov	sp, r7
 8003eb0:	bc80      	pop	{r7}
 8003eb2:	4770      	bx	lr

08003eb4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003eb4:	b480      	push	{r7}
 8003eb6:	b085      	sub	sp, #20
 8003eb8:	af00      	add	r7, sp, #0
 8003eba:	6078      	str	r0, [r7, #4]
 8003ebc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003ec4:	2b01      	cmp	r3, #1
 8003ec6:	d101      	bne.n	8003ecc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003ec8:	2302      	movs	r3, #2
 8003eca:	e032      	b.n	8003f32 <HAL_TIMEx_MasterConfigSynchronization+0x7e>
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	2201      	movs	r2, #1
 8003ed0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	2202      	movs	r2, #2
 8003ed8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	685b      	ldr	r3, [r3, #4]
 8003ee2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	689b      	ldr	r3, [r3, #8]
 8003eea:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003eec:	68fb      	ldr	r3, [r7, #12]
 8003eee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003ef2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003ef4:	683b      	ldr	r3, [r7, #0]
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	68fa      	ldr	r2, [r7, #12]
 8003efa:	4313      	orrs	r3, r2
 8003efc:	60fb      	str	r3, [r7, #12]

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
 8003efe:	68bb      	ldr	r3, [r7, #8]
 8003f00:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003f04:	60bb      	str	r3, [r7, #8]
  /* Set master mode */
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003f06:	683b      	ldr	r3, [r7, #0]
 8003f08:	685b      	ldr	r3, [r3, #4]
 8003f0a:	68ba      	ldr	r2, [r7, #8]
 8003f0c:	4313      	orrs	r3, r2
 8003f0e:	60bb      	str	r3, [r7, #8]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	68fa      	ldr	r2, [r7, #12]
 8003f16:	605a      	str	r2, [r3, #4]

  /* Update TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	68ba      	ldr	r2, [r7, #8]
 8003f1e:	609a      	str	r2, [r3, #8]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	2201      	movs	r2, #1
 8003f24:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	2200      	movs	r2, #0
 8003f2c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003f30:	2300      	movs	r3, #0
}
 8003f32:	4618      	mov	r0, r3
 8003f34:	3714      	adds	r7, #20
 8003f36:	46bd      	mov	sp, r7
 8003f38:	bc80      	pop	{r7}
 8003f3a:	4770      	bx	lr

08003f3c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003f3c:	b480      	push	{r7}
 8003f3e:	b083      	sub	sp, #12
 8003f40:	af00      	add	r7, sp, #0
 8003f42:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003f44:	bf00      	nop
 8003f46:	370c      	adds	r7, #12
 8003f48:	46bd      	mov	sp, r7
 8003f4a:	bc80      	pop	{r7}
 8003f4c:	4770      	bx	lr

08003f4e <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003f4e:	b480      	push	{r7}
 8003f50:	b083      	sub	sp, #12
 8003f52:	af00      	add	r7, sp, #0
 8003f54:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003f56:	bf00      	nop
 8003f58:	370c      	adds	r7, #12
 8003f5a:	46bd      	mov	sp, r7
 8003f5c:	bc80      	pop	{r7}
 8003f5e:	4770      	bx	lr

08003f60 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003f60:	b580      	push	{r7, lr}
 8003f62:	b082      	sub	sp, #8
 8003f64:	af00      	add	r7, sp, #0
 8003f66:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	2b00      	cmp	r3, #0
 8003f6c:	d101      	bne.n	8003f72 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003f6e:	2301      	movs	r3, #1
 8003f70:	e03f      	b.n	8003ff2 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8003f78:	b2db      	uxtb	r3, r3
 8003f7a:	2b00      	cmp	r3, #0
 8003f7c:	d106      	bne.n	8003f8c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	2200      	movs	r2, #0
 8003f82:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003f86:	6878      	ldr	r0, [r7, #4]
 8003f88:	f7fd fed4 	bl	8001d34 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	2224      	movs	r2, #36	; 0x24
 8003f90:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	68da      	ldr	r2, [r3, #12]
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003fa2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003fa4:	6878      	ldr	r0, [r7, #4]
 8003fa6:	f000 f90b 	bl	80041c0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	691a      	ldr	r2, [r3, #16]
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003fb8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	695a      	ldr	r2, [r3, #20]
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003fc8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	68da      	ldr	r2, [r3, #12]
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003fd8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	2200      	movs	r2, #0
 8003fde:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	2220      	movs	r2, #32
 8003fe4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	2220      	movs	r2, #32
 8003fec:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8003ff0:	2300      	movs	r3, #0
}
 8003ff2:	4618      	mov	r0, r3
 8003ff4:	3708      	adds	r7, #8
 8003ff6:	46bd      	mov	sp, r7
 8003ff8:	bd80      	pop	{r7, pc}

08003ffa <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003ffa:	b580      	push	{r7, lr}
 8003ffc:	b088      	sub	sp, #32
 8003ffe:	af02      	add	r7, sp, #8
 8004000:	60f8      	str	r0, [r7, #12]
 8004002:	60b9      	str	r1, [r7, #8]
 8004004:	603b      	str	r3, [r7, #0]
 8004006:	4613      	mov	r3, r2
 8004008:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 800400a:	2300      	movs	r3, #0
 800400c:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800400e:	68fb      	ldr	r3, [r7, #12]
 8004010:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8004014:	b2db      	uxtb	r3, r3
 8004016:	2b20      	cmp	r3, #32
 8004018:	f040 8083 	bne.w	8004122 <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 800401c:	68bb      	ldr	r3, [r7, #8]
 800401e:	2b00      	cmp	r3, #0
 8004020:	d002      	beq.n	8004028 <HAL_UART_Transmit+0x2e>
 8004022:	88fb      	ldrh	r3, [r7, #6]
 8004024:	2b00      	cmp	r3, #0
 8004026:	d101      	bne.n	800402c <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 8004028:	2301      	movs	r3, #1
 800402a:	e07b      	b.n	8004124 <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800402c:	68fb      	ldr	r3, [r7, #12]
 800402e:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8004032:	2b01      	cmp	r3, #1
 8004034:	d101      	bne.n	800403a <HAL_UART_Transmit+0x40>
 8004036:	2302      	movs	r3, #2
 8004038:	e074      	b.n	8004124 <HAL_UART_Transmit+0x12a>
 800403a:	68fb      	ldr	r3, [r7, #12]
 800403c:	2201      	movs	r2, #1
 800403e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004042:	68fb      	ldr	r3, [r7, #12]
 8004044:	2200      	movs	r2, #0
 8004046:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004048:	68fb      	ldr	r3, [r7, #12]
 800404a:	2221      	movs	r2, #33	; 0x21
 800404c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8004050:	f7fd ff3a 	bl	8001ec8 <HAL_GetTick>
 8004054:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8004056:	68fb      	ldr	r3, [r7, #12]
 8004058:	88fa      	ldrh	r2, [r7, #6]
 800405a:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800405c:	68fb      	ldr	r3, [r7, #12]
 800405e:	88fa      	ldrh	r2, [r7, #6]
 8004060:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8004062:	e042      	b.n	80040ea <HAL_UART_Transmit+0xf0>
    {
      huart->TxXferCount--;
 8004064:	68fb      	ldr	r3, [r7, #12]
 8004066:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004068:	b29b      	uxth	r3, r3
 800406a:	3b01      	subs	r3, #1
 800406c:	b29a      	uxth	r2, r3
 800406e:	68fb      	ldr	r3, [r7, #12]
 8004070:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8004072:	68fb      	ldr	r3, [r7, #12]
 8004074:	689b      	ldr	r3, [r3, #8]
 8004076:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800407a:	d122      	bne.n	80040c2 <HAL_UART_Transmit+0xc8>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800407c:	683b      	ldr	r3, [r7, #0]
 800407e:	9300      	str	r3, [sp, #0]
 8004080:	697b      	ldr	r3, [r7, #20]
 8004082:	2200      	movs	r2, #0
 8004084:	2180      	movs	r1, #128	; 0x80
 8004086:	68f8      	ldr	r0, [r7, #12]
 8004088:	f000 f850 	bl	800412c <UART_WaitOnFlagUntilTimeout>
 800408c:	4603      	mov	r3, r0
 800408e:	2b00      	cmp	r3, #0
 8004090:	d001      	beq.n	8004096 <HAL_UART_Transmit+0x9c>
        {
          return HAL_TIMEOUT;
 8004092:	2303      	movs	r3, #3
 8004094:	e046      	b.n	8004124 <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 8004096:	68bb      	ldr	r3, [r7, #8]
 8004098:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 800409a:	693b      	ldr	r3, [r7, #16]
 800409c:	881b      	ldrh	r3, [r3, #0]
 800409e:	461a      	mov	r2, r3
 80040a0:	68fb      	ldr	r3, [r7, #12]
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80040a8:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 80040aa:	68fb      	ldr	r3, [r7, #12]
 80040ac:	691b      	ldr	r3, [r3, #16]
 80040ae:	2b00      	cmp	r3, #0
 80040b0:	d103      	bne.n	80040ba <HAL_UART_Transmit+0xc0>
        {
          pData += 2U;
 80040b2:	68bb      	ldr	r3, [r7, #8]
 80040b4:	3302      	adds	r3, #2
 80040b6:	60bb      	str	r3, [r7, #8]
 80040b8:	e017      	b.n	80040ea <HAL_UART_Transmit+0xf0>
        }
        else
        {
          pData += 1U;
 80040ba:	68bb      	ldr	r3, [r7, #8]
 80040bc:	3301      	adds	r3, #1
 80040be:	60bb      	str	r3, [r7, #8]
 80040c0:	e013      	b.n	80040ea <HAL_UART_Transmit+0xf0>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80040c2:	683b      	ldr	r3, [r7, #0]
 80040c4:	9300      	str	r3, [sp, #0]
 80040c6:	697b      	ldr	r3, [r7, #20]
 80040c8:	2200      	movs	r2, #0
 80040ca:	2180      	movs	r1, #128	; 0x80
 80040cc:	68f8      	ldr	r0, [r7, #12]
 80040ce:	f000 f82d 	bl	800412c <UART_WaitOnFlagUntilTimeout>
 80040d2:	4603      	mov	r3, r0
 80040d4:	2b00      	cmp	r3, #0
 80040d6:	d001      	beq.n	80040dc <HAL_UART_Transmit+0xe2>
        {
          return HAL_TIMEOUT;
 80040d8:	2303      	movs	r3, #3
 80040da:	e023      	b.n	8004124 <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 80040dc:	68bb      	ldr	r3, [r7, #8]
 80040de:	1c5a      	adds	r2, r3, #1
 80040e0:	60ba      	str	r2, [r7, #8]
 80040e2:	781a      	ldrb	r2, [r3, #0]
 80040e4:	68fb      	ldr	r3, [r7, #12]
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 80040ea:	68fb      	ldr	r3, [r7, #12]
 80040ec:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80040ee:	b29b      	uxth	r3, r3
 80040f0:	2b00      	cmp	r3, #0
 80040f2:	d1b7      	bne.n	8004064 <HAL_UART_Transmit+0x6a>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80040f4:	683b      	ldr	r3, [r7, #0]
 80040f6:	9300      	str	r3, [sp, #0]
 80040f8:	697b      	ldr	r3, [r7, #20]
 80040fa:	2200      	movs	r2, #0
 80040fc:	2140      	movs	r1, #64	; 0x40
 80040fe:	68f8      	ldr	r0, [r7, #12]
 8004100:	f000 f814 	bl	800412c <UART_WaitOnFlagUntilTimeout>
 8004104:	4603      	mov	r3, r0
 8004106:	2b00      	cmp	r3, #0
 8004108:	d001      	beq.n	800410e <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 800410a:	2303      	movs	r3, #3
 800410c:	e00a      	b.n	8004124 <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800410e:	68fb      	ldr	r3, [r7, #12]
 8004110:	2220      	movs	r2, #32
 8004112:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8004116:	68fb      	ldr	r3, [r7, #12]
 8004118:	2200      	movs	r2, #0
 800411a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    return HAL_OK;
 800411e:	2300      	movs	r3, #0
 8004120:	e000      	b.n	8004124 <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 8004122:	2302      	movs	r3, #2
  }
}
 8004124:	4618      	mov	r0, r3
 8004126:	3718      	adds	r7, #24
 8004128:	46bd      	mov	sp, r7
 800412a:	bd80      	pop	{r7, pc}

0800412c <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 800412c:	b580      	push	{r7, lr}
 800412e:	b084      	sub	sp, #16
 8004130:	af00      	add	r7, sp, #0
 8004132:	60f8      	str	r0, [r7, #12]
 8004134:	60b9      	str	r1, [r7, #8]
 8004136:	603b      	str	r3, [r7, #0]
 8004138:	4613      	mov	r3, r2
 800413a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800413c:	e02c      	b.n	8004198 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800413e:	69bb      	ldr	r3, [r7, #24]
 8004140:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004144:	d028      	beq.n	8004198 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8004146:	69bb      	ldr	r3, [r7, #24]
 8004148:	2b00      	cmp	r3, #0
 800414a:	d007      	beq.n	800415c <UART_WaitOnFlagUntilTimeout+0x30>
 800414c:	f7fd febc 	bl	8001ec8 <HAL_GetTick>
 8004150:	4602      	mov	r2, r0
 8004152:	683b      	ldr	r3, [r7, #0]
 8004154:	1ad3      	subs	r3, r2, r3
 8004156:	69ba      	ldr	r2, [r7, #24]
 8004158:	429a      	cmp	r2, r3
 800415a:	d21d      	bcs.n	8004198 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800415c:	68fb      	ldr	r3, [r7, #12]
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	68da      	ldr	r2, [r3, #12]
 8004162:	68fb      	ldr	r3, [r7, #12]
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800416a:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800416c:	68fb      	ldr	r3, [r7, #12]
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	695a      	ldr	r2, [r3, #20]
 8004172:	68fb      	ldr	r3, [r7, #12]
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	f022 0201 	bic.w	r2, r2, #1
 800417a:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 800417c:	68fb      	ldr	r3, [r7, #12]
 800417e:	2220      	movs	r2, #32
 8004180:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8004184:	68fb      	ldr	r3, [r7, #12]
 8004186:	2220      	movs	r2, #32
 8004188:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800418c:	68fb      	ldr	r3, [r7, #12]
 800418e:	2200      	movs	r2, #0
 8004190:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 8004194:	2303      	movs	r3, #3
 8004196:	e00f      	b.n	80041b8 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004198:	68fb      	ldr	r3, [r7, #12]
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	681a      	ldr	r2, [r3, #0]
 800419e:	68bb      	ldr	r3, [r7, #8]
 80041a0:	4013      	ands	r3, r2
 80041a2:	68ba      	ldr	r2, [r7, #8]
 80041a4:	429a      	cmp	r2, r3
 80041a6:	bf0c      	ite	eq
 80041a8:	2301      	moveq	r3, #1
 80041aa:	2300      	movne	r3, #0
 80041ac:	b2db      	uxtb	r3, r3
 80041ae:	461a      	mov	r2, r3
 80041b0:	79fb      	ldrb	r3, [r7, #7]
 80041b2:	429a      	cmp	r2, r3
 80041b4:	d0c3      	beq.n	800413e <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80041b6:	2300      	movs	r3, #0
}
 80041b8:	4618      	mov	r0, r3
 80041ba:	3710      	adds	r7, #16
 80041bc:	46bd      	mov	sp, r7
 80041be:	bd80      	pop	{r7, pc}

080041c0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80041c0:	b580      	push	{r7, lr}
 80041c2:	b084      	sub	sp, #16
 80041c4:	af00      	add	r7, sp, #0
 80041c6:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	691b      	ldr	r3, [r3, #16]
 80041ce:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	68da      	ldr	r2, [r3, #12]
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	430a      	orrs	r2, r1
 80041dc:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	689a      	ldr	r2, [r3, #8]
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	691b      	ldr	r3, [r3, #16]
 80041e6:	431a      	orrs	r2, r3
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	695b      	ldr	r3, [r3, #20]
 80041ec:	4313      	orrs	r3, r2
 80041ee:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	68db      	ldr	r3, [r3, #12]
 80041f6:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 80041fa:	f023 030c 	bic.w	r3, r3, #12
 80041fe:	687a      	ldr	r2, [r7, #4]
 8004200:	6812      	ldr	r2, [r2, #0]
 8004202:	68f9      	ldr	r1, [r7, #12]
 8004204:	430b      	orrs	r3, r1
 8004206:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	695b      	ldr	r3, [r3, #20]
 800420e:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	699a      	ldr	r2, [r3, #24]
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	430a      	orrs	r2, r1
 800421c:	615a      	str	r2, [r3, #20]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
#else
  /*-------------------------- USART BRR Configuration ---------------------*/
  if(huart->Instance == USART1)
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	4a52      	ldr	r2, [pc, #328]	; (800436c <UART_SetConfig+0x1ac>)
 8004224:	4293      	cmp	r3, r2
 8004226:	d14e      	bne.n	80042c6 <UART_SetConfig+0x106>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8004228:	f7ff f95c 	bl	80034e4 <HAL_RCC_GetPCLK2Freq>
 800422c:	60b8      	str	r0, [r7, #8]
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800422e:	68ba      	ldr	r2, [r7, #8]
 8004230:	4613      	mov	r3, r2
 8004232:	009b      	lsls	r3, r3, #2
 8004234:	4413      	add	r3, r2
 8004236:	009a      	lsls	r2, r3, #2
 8004238:	441a      	add	r2, r3
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	685b      	ldr	r3, [r3, #4]
 800423e:	009b      	lsls	r3, r3, #2
 8004240:	fbb2 f3f3 	udiv	r3, r2, r3
 8004244:	4a4a      	ldr	r2, [pc, #296]	; (8004370 <UART_SetConfig+0x1b0>)
 8004246:	fba2 2303 	umull	r2, r3, r2, r3
 800424a:	095b      	lsrs	r3, r3, #5
 800424c:	0119      	lsls	r1, r3, #4
 800424e:	68ba      	ldr	r2, [r7, #8]
 8004250:	4613      	mov	r3, r2
 8004252:	009b      	lsls	r3, r3, #2
 8004254:	4413      	add	r3, r2
 8004256:	009a      	lsls	r2, r3, #2
 8004258:	441a      	add	r2, r3
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	685b      	ldr	r3, [r3, #4]
 800425e:	009b      	lsls	r3, r3, #2
 8004260:	fbb2 f2f3 	udiv	r2, r2, r3
 8004264:	4b42      	ldr	r3, [pc, #264]	; (8004370 <UART_SetConfig+0x1b0>)
 8004266:	fba3 0302 	umull	r0, r3, r3, r2
 800426a:	095b      	lsrs	r3, r3, #5
 800426c:	2064      	movs	r0, #100	; 0x64
 800426e:	fb00 f303 	mul.w	r3, r0, r3
 8004272:	1ad3      	subs	r3, r2, r3
 8004274:	011b      	lsls	r3, r3, #4
 8004276:	3332      	adds	r3, #50	; 0x32
 8004278:	4a3d      	ldr	r2, [pc, #244]	; (8004370 <UART_SetConfig+0x1b0>)
 800427a:	fba2 2303 	umull	r2, r3, r2, r3
 800427e:	095b      	lsrs	r3, r3, #5
 8004280:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004284:	4419      	add	r1, r3
 8004286:	68ba      	ldr	r2, [r7, #8]
 8004288:	4613      	mov	r3, r2
 800428a:	009b      	lsls	r3, r3, #2
 800428c:	4413      	add	r3, r2
 800428e:	009a      	lsls	r2, r3, #2
 8004290:	441a      	add	r2, r3
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	685b      	ldr	r3, [r3, #4]
 8004296:	009b      	lsls	r3, r3, #2
 8004298:	fbb2 f2f3 	udiv	r2, r2, r3
 800429c:	4b34      	ldr	r3, [pc, #208]	; (8004370 <UART_SetConfig+0x1b0>)
 800429e:	fba3 0302 	umull	r0, r3, r3, r2
 80042a2:	095b      	lsrs	r3, r3, #5
 80042a4:	2064      	movs	r0, #100	; 0x64
 80042a6:	fb00 f303 	mul.w	r3, r0, r3
 80042aa:	1ad3      	subs	r3, r2, r3
 80042ac:	011b      	lsls	r3, r3, #4
 80042ae:	3332      	adds	r3, #50	; 0x32
 80042b0:	4a2f      	ldr	r2, [pc, #188]	; (8004370 <UART_SetConfig+0x1b0>)
 80042b2:	fba2 2303 	umull	r2, r3, r2, r3
 80042b6:	095b      	lsrs	r3, r3, #5
 80042b8:	f003 020f 	and.w	r2, r3, #15
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	440a      	add	r2, r1
 80042c2:	609a      	str	r2, [r3, #8]
  {
    pclk = HAL_RCC_GetPCLK1Freq();
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#endif /* USART_CR1_OVER8 */
}
 80042c4:	e04d      	b.n	8004362 <UART_SetConfig+0x1a2>
    pclk = HAL_RCC_GetPCLK1Freq();
 80042c6:	f7ff f8f9 	bl	80034bc <HAL_RCC_GetPCLK1Freq>
 80042ca:	60b8      	str	r0, [r7, #8]
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80042cc:	68ba      	ldr	r2, [r7, #8]
 80042ce:	4613      	mov	r3, r2
 80042d0:	009b      	lsls	r3, r3, #2
 80042d2:	4413      	add	r3, r2
 80042d4:	009a      	lsls	r2, r3, #2
 80042d6:	441a      	add	r2, r3
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	685b      	ldr	r3, [r3, #4]
 80042dc:	009b      	lsls	r3, r3, #2
 80042de:	fbb2 f3f3 	udiv	r3, r2, r3
 80042e2:	4a23      	ldr	r2, [pc, #140]	; (8004370 <UART_SetConfig+0x1b0>)
 80042e4:	fba2 2303 	umull	r2, r3, r2, r3
 80042e8:	095b      	lsrs	r3, r3, #5
 80042ea:	0119      	lsls	r1, r3, #4
 80042ec:	68ba      	ldr	r2, [r7, #8]
 80042ee:	4613      	mov	r3, r2
 80042f0:	009b      	lsls	r3, r3, #2
 80042f2:	4413      	add	r3, r2
 80042f4:	009a      	lsls	r2, r3, #2
 80042f6:	441a      	add	r2, r3
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	685b      	ldr	r3, [r3, #4]
 80042fc:	009b      	lsls	r3, r3, #2
 80042fe:	fbb2 f2f3 	udiv	r2, r2, r3
 8004302:	4b1b      	ldr	r3, [pc, #108]	; (8004370 <UART_SetConfig+0x1b0>)
 8004304:	fba3 0302 	umull	r0, r3, r3, r2
 8004308:	095b      	lsrs	r3, r3, #5
 800430a:	2064      	movs	r0, #100	; 0x64
 800430c:	fb00 f303 	mul.w	r3, r0, r3
 8004310:	1ad3      	subs	r3, r2, r3
 8004312:	011b      	lsls	r3, r3, #4
 8004314:	3332      	adds	r3, #50	; 0x32
 8004316:	4a16      	ldr	r2, [pc, #88]	; (8004370 <UART_SetConfig+0x1b0>)
 8004318:	fba2 2303 	umull	r2, r3, r2, r3
 800431c:	095b      	lsrs	r3, r3, #5
 800431e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004322:	4419      	add	r1, r3
 8004324:	68ba      	ldr	r2, [r7, #8]
 8004326:	4613      	mov	r3, r2
 8004328:	009b      	lsls	r3, r3, #2
 800432a:	4413      	add	r3, r2
 800432c:	009a      	lsls	r2, r3, #2
 800432e:	441a      	add	r2, r3
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	685b      	ldr	r3, [r3, #4]
 8004334:	009b      	lsls	r3, r3, #2
 8004336:	fbb2 f2f3 	udiv	r2, r2, r3
 800433a:	4b0d      	ldr	r3, [pc, #52]	; (8004370 <UART_SetConfig+0x1b0>)
 800433c:	fba3 0302 	umull	r0, r3, r3, r2
 8004340:	095b      	lsrs	r3, r3, #5
 8004342:	2064      	movs	r0, #100	; 0x64
 8004344:	fb00 f303 	mul.w	r3, r0, r3
 8004348:	1ad3      	subs	r3, r2, r3
 800434a:	011b      	lsls	r3, r3, #4
 800434c:	3332      	adds	r3, #50	; 0x32
 800434e:	4a08      	ldr	r2, [pc, #32]	; (8004370 <UART_SetConfig+0x1b0>)
 8004350:	fba2 2303 	umull	r2, r3, r2, r3
 8004354:	095b      	lsrs	r3, r3, #5
 8004356:	f003 020f 	and.w	r2, r3, #15
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	440a      	add	r2, r1
 8004360:	609a      	str	r2, [r3, #8]
}
 8004362:	bf00      	nop
 8004364:	3710      	adds	r7, #16
 8004366:	46bd      	mov	sp, r7
 8004368:	bd80      	pop	{r7, pc}
 800436a:	bf00      	nop
 800436c:	40013800 	.word	0x40013800
 8004370:	51eb851f 	.word	0x51eb851f

08004374 <__errno>:
 8004374:	4b01      	ldr	r3, [pc, #4]	; (800437c <__errno+0x8>)
 8004376:	6818      	ldr	r0, [r3, #0]
 8004378:	4770      	bx	lr
 800437a:	bf00      	nop
 800437c:	20000014 	.word	0x20000014

08004380 <__libc_init_array>:
 8004380:	b570      	push	{r4, r5, r6, lr}
 8004382:	2500      	movs	r5, #0
 8004384:	4e0c      	ldr	r6, [pc, #48]	; (80043b8 <__libc_init_array+0x38>)
 8004386:	4c0d      	ldr	r4, [pc, #52]	; (80043bc <__libc_init_array+0x3c>)
 8004388:	1ba4      	subs	r4, r4, r6
 800438a:	10a4      	asrs	r4, r4, #2
 800438c:	42a5      	cmp	r5, r4
 800438e:	d109      	bne.n	80043a4 <__libc_init_array+0x24>
 8004390:	f004 fa02 	bl	8008798 <_init>
 8004394:	2500      	movs	r5, #0
 8004396:	4e0a      	ldr	r6, [pc, #40]	; (80043c0 <__libc_init_array+0x40>)
 8004398:	4c0a      	ldr	r4, [pc, #40]	; (80043c4 <__libc_init_array+0x44>)
 800439a:	1ba4      	subs	r4, r4, r6
 800439c:	10a4      	asrs	r4, r4, #2
 800439e:	42a5      	cmp	r5, r4
 80043a0:	d105      	bne.n	80043ae <__libc_init_array+0x2e>
 80043a2:	bd70      	pop	{r4, r5, r6, pc}
 80043a4:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80043a8:	4798      	blx	r3
 80043aa:	3501      	adds	r5, #1
 80043ac:	e7ee      	b.n	800438c <__libc_init_array+0xc>
 80043ae:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80043b2:	4798      	blx	r3
 80043b4:	3501      	adds	r5, #1
 80043b6:	e7f2      	b.n	800439e <__libc_init_array+0x1e>
 80043b8:	08008b28 	.word	0x08008b28
 80043bc:	08008b28 	.word	0x08008b28
 80043c0:	08008b28 	.word	0x08008b28
 80043c4:	08008b2c 	.word	0x08008b2c

080043c8 <memset>:
 80043c8:	4603      	mov	r3, r0
 80043ca:	4402      	add	r2, r0
 80043cc:	4293      	cmp	r3, r2
 80043ce:	d100      	bne.n	80043d2 <memset+0xa>
 80043d0:	4770      	bx	lr
 80043d2:	f803 1b01 	strb.w	r1, [r3], #1
 80043d6:	e7f9      	b.n	80043cc <memset+0x4>

080043d8 <__cvt>:
 80043d8:	2b00      	cmp	r3, #0
 80043da:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80043de:	461e      	mov	r6, r3
 80043e0:	bfbb      	ittet	lt
 80043e2:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 80043e6:	461e      	movlt	r6, r3
 80043e8:	2300      	movge	r3, #0
 80043ea:	232d      	movlt	r3, #45	; 0x2d
 80043ec:	b088      	sub	sp, #32
 80043ee:	9f14      	ldr	r7, [sp, #80]	; 0x50
 80043f0:	e9dd 1a12 	ldrd	r1, sl, [sp, #72]	; 0x48
 80043f4:	f027 0720 	bic.w	r7, r7, #32
 80043f8:	2f46      	cmp	r7, #70	; 0x46
 80043fa:	4614      	mov	r4, r2
 80043fc:	9d10      	ldr	r5, [sp, #64]	; 0x40
 80043fe:	700b      	strb	r3, [r1, #0]
 8004400:	d004      	beq.n	800440c <__cvt+0x34>
 8004402:	2f45      	cmp	r7, #69	; 0x45
 8004404:	d100      	bne.n	8004408 <__cvt+0x30>
 8004406:	3501      	adds	r5, #1
 8004408:	2302      	movs	r3, #2
 800440a:	e000      	b.n	800440e <__cvt+0x36>
 800440c:	2303      	movs	r3, #3
 800440e:	aa07      	add	r2, sp, #28
 8004410:	9204      	str	r2, [sp, #16]
 8004412:	aa06      	add	r2, sp, #24
 8004414:	e9cd a202 	strd	sl, r2, [sp, #8]
 8004418:	e9cd 3500 	strd	r3, r5, [sp]
 800441c:	4622      	mov	r2, r4
 800441e:	4633      	mov	r3, r6
 8004420:	f001 fd96 	bl	8005f50 <_dtoa_r>
 8004424:	2f47      	cmp	r7, #71	; 0x47
 8004426:	4680      	mov	r8, r0
 8004428:	d102      	bne.n	8004430 <__cvt+0x58>
 800442a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800442c:	07db      	lsls	r3, r3, #31
 800442e:	d526      	bpl.n	800447e <__cvt+0xa6>
 8004430:	2f46      	cmp	r7, #70	; 0x46
 8004432:	eb08 0905 	add.w	r9, r8, r5
 8004436:	d111      	bne.n	800445c <__cvt+0x84>
 8004438:	f898 3000 	ldrb.w	r3, [r8]
 800443c:	2b30      	cmp	r3, #48	; 0x30
 800443e:	d10a      	bne.n	8004456 <__cvt+0x7e>
 8004440:	2200      	movs	r2, #0
 8004442:	2300      	movs	r3, #0
 8004444:	4620      	mov	r0, r4
 8004446:	4631      	mov	r1, r6
 8004448:	f7fc faae 	bl	80009a8 <__aeabi_dcmpeq>
 800444c:	b918      	cbnz	r0, 8004456 <__cvt+0x7e>
 800444e:	f1c5 0501 	rsb	r5, r5, #1
 8004452:	f8ca 5000 	str.w	r5, [sl]
 8004456:	f8da 3000 	ldr.w	r3, [sl]
 800445a:	4499      	add	r9, r3
 800445c:	2200      	movs	r2, #0
 800445e:	2300      	movs	r3, #0
 8004460:	4620      	mov	r0, r4
 8004462:	4631      	mov	r1, r6
 8004464:	f7fc faa0 	bl	80009a8 <__aeabi_dcmpeq>
 8004468:	b938      	cbnz	r0, 800447a <__cvt+0xa2>
 800446a:	2230      	movs	r2, #48	; 0x30
 800446c:	9b07      	ldr	r3, [sp, #28]
 800446e:	454b      	cmp	r3, r9
 8004470:	d205      	bcs.n	800447e <__cvt+0xa6>
 8004472:	1c59      	adds	r1, r3, #1
 8004474:	9107      	str	r1, [sp, #28]
 8004476:	701a      	strb	r2, [r3, #0]
 8004478:	e7f8      	b.n	800446c <__cvt+0x94>
 800447a:	f8cd 901c 	str.w	r9, [sp, #28]
 800447e:	4640      	mov	r0, r8
 8004480:	9b07      	ldr	r3, [sp, #28]
 8004482:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8004484:	eba3 0308 	sub.w	r3, r3, r8
 8004488:	6013      	str	r3, [r2, #0]
 800448a:	b008      	add	sp, #32
 800448c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08004490 <__exponent>:
 8004490:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004492:	2900      	cmp	r1, #0
 8004494:	bfb4      	ite	lt
 8004496:	232d      	movlt	r3, #45	; 0x2d
 8004498:	232b      	movge	r3, #43	; 0x2b
 800449a:	4604      	mov	r4, r0
 800449c:	bfb8      	it	lt
 800449e:	4249      	neglt	r1, r1
 80044a0:	2909      	cmp	r1, #9
 80044a2:	f804 2b02 	strb.w	r2, [r4], #2
 80044a6:	7043      	strb	r3, [r0, #1]
 80044a8:	dd21      	ble.n	80044ee <__exponent+0x5e>
 80044aa:	f10d 0307 	add.w	r3, sp, #7
 80044ae:	461f      	mov	r7, r3
 80044b0:	260a      	movs	r6, #10
 80044b2:	fb91 f5f6 	sdiv	r5, r1, r6
 80044b6:	fb06 1115 	mls	r1, r6, r5, r1
 80044ba:	2d09      	cmp	r5, #9
 80044bc:	f101 0130 	add.w	r1, r1, #48	; 0x30
 80044c0:	f803 1c01 	strb.w	r1, [r3, #-1]
 80044c4:	f103 32ff 	add.w	r2, r3, #4294967295
 80044c8:	4629      	mov	r1, r5
 80044ca:	dc09      	bgt.n	80044e0 <__exponent+0x50>
 80044cc:	3130      	adds	r1, #48	; 0x30
 80044ce:	3b02      	subs	r3, #2
 80044d0:	f802 1c01 	strb.w	r1, [r2, #-1]
 80044d4:	42bb      	cmp	r3, r7
 80044d6:	4622      	mov	r2, r4
 80044d8:	d304      	bcc.n	80044e4 <__exponent+0x54>
 80044da:	1a10      	subs	r0, r2, r0
 80044dc:	b003      	add	sp, #12
 80044de:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80044e0:	4613      	mov	r3, r2
 80044e2:	e7e6      	b.n	80044b2 <__exponent+0x22>
 80044e4:	f813 2b01 	ldrb.w	r2, [r3], #1
 80044e8:	f804 2b01 	strb.w	r2, [r4], #1
 80044ec:	e7f2      	b.n	80044d4 <__exponent+0x44>
 80044ee:	2330      	movs	r3, #48	; 0x30
 80044f0:	4419      	add	r1, r3
 80044f2:	7083      	strb	r3, [r0, #2]
 80044f4:	1d02      	adds	r2, r0, #4
 80044f6:	70c1      	strb	r1, [r0, #3]
 80044f8:	e7ef      	b.n	80044da <__exponent+0x4a>
	...

080044fc <_printf_float>:
 80044fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004500:	b091      	sub	sp, #68	; 0x44
 8004502:	460c      	mov	r4, r1
 8004504:	9f1a      	ldr	r7, [sp, #104]	; 0x68
 8004506:	4693      	mov	fp, r2
 8004508:	461e      	mov	r6, r3
 800450a:	4605      	mov	r5, r0
 800450c:	f002 fecc 	bl	80072a8 <_localeconv_r>
 8004510:	6803      	ldr	r3, [r0, #0]
 8004512:	4618      	mov	r0, r3
 8004514:	9309      	str	r3, [sp, #36]	; 0x24
 8004516:	f7fb fe1b 	bl	8000150 <strlen>
 800451a:	2300      	movs	r3, #0
 800451c:	930e      	str	r3, [sp, #56]	; 0x38
 800451e:	683b      	ldr	r3, [r7, #0]
 8004520:	900a      	str	r0, [sp, #40]	; 0x28
 8004522:	3307      	adds	r3, #7
 8004524:	f023 0307 	bic.w	r3, r3, #7
 8004528:	f103 0208 	add.w	r2, r3, #8
 800452c:	f894 8018 	ldrb.w	r8, [r4, #24]
 8004530:	f8d4 a000 	ldr.w	sl, [r4]
 8004534:	603a      	str	r2, [r7, #0]
 8004536:	e9d3 2300 	ldrd	r2, r3, [r3]
 800453a:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800453e:	e9d4 7912 	ldrd	r7, r9, [r4, #72]	; 0x48
 8004542:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8004546:	930b      	str	r3, [sp, #44]	; 0x2c
 8004548:	f04f 32ff 	mov.w	r2, #4294967295
 800454c:	4ba6      	ldr	r3, [pc, #664]	; (80047e8 <_printf_float+0x2ec>)
 800454e:	4638      	mov	r0, r7
 8004550:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8004552:	f7fc fa5b 	bl	8000a0c <__aeabi_dcmpun>
 8004556:	bb68      	cbnz	r0, 80045b4 <_printf_float+0xb8>
 8004558:	f04f 32ff 	mov.w	r2, #4294967295
 800455c:	4ba2      	ldr	r3, [pc, #648]	; (80047e8 <_printf_float+0x2ec>)
 800455e:	4638      	mov	r0, r7
 8004560:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8004562:	f7fc fa35 	bl	80009d0 <__aeabi_dcmple>
 8004566:	bb28      	cbnz	r0, 80045b4 <_printf_float+0xb8>
 8004568:	2200      	movs	r2, #0
 800456a:	2300      	movs	r3, #0
 800456c:	4638      	mov	r0, r7
 800456e:	4649      	mov	r1, r9
 8004570:	f7fc fa24 	bl	80009bc <__aeabi_dcmplt>
 8004574:	b110      	cbz	r0, 800457c <_printf_float+0x80>
 8004576:	232d      	movs	r3, #45	; 0x2d
 8004578:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800457c:	4f9b      	ldr	r7, [pc, #620]	; (80047ec <_printf_float+0x2f0>)
 800457e:	4b9c      	ldr	r3, [pc, #624]	; (80047f0 <_printf_float+0x2f4>)
 8004580:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8004584:	bf98      	it	ls
 8004586:	461f      	movls	r7, r3
 8004588:	2303      	movs	r3, #3
 800458a:	f04f 0900 	mov.w	r9, #0
 800458e:	6123      	str	r3, [r4, #16]
 8004590:	f02a 0304 	bic.w	r3, sl, #4
 8004594:	6023      	str	r3, [r4, #0]
 8004596:	9600      	str	r6, [sp, #0]
 8004598:	465b      	mov	r3, fp
 800459a:	aa0f      	add	r2, sp, #60	; 0x3c
 800459c:	4621      	mov	r1, r4
 800459e:	4628      	mov	r0, r5
 80045a0:	f000 f9e2 	bl	8004968 <_printf_common>
 80045a4:	3001      	adds	r0, #1
 80045a6:	f040 8090 	bne.w	80046ca <_printf_float+0x1ce>
 80045aa:	f04f 30ff 	mov.w	r0, #4294967295
 80045ae:	b011      	add	sp, #68	; 0x44
 80045b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80045b4:	463a      	mov	r2, r7
 80045b6:	464b      	mov	r3, r9
 80045b8:	4638      	mov	r0, r7
 80045ba:	4649      	mov	r1, r9
 80045bc:	f7fc fa26 	bl	8000a0c <__aeabi_dcmpun>
 80045c0:	b110      	cbz	r0, 80045c8 <_printf_float+0xcc>
 80045c2:	4f8c      	ldr	r7, [pc, #560]	; (80047f4 <_printf_float+0x2f8>)
 80045c4:	4b8c      	ldr	r3, [pc, #560]	; (80047f8 <_printf_float+0x2fc>)
 80045c6:	e7db      	b.n	8004580 <_printf_float+0x84>
 80045c8:	6863      	ldr	r3, [r4, #4]
 80045ca:	f44a 6280 	orr.w	r2, sl, #1024	; 0x400
 80045ce:	1c59      	adds	r1, r3, #1
 80045d0:	a80d      	add	r0, sp, #52	; 0x34
 80045d2:	a90e      	add	r1, sp, #56	; 0x38
 80045d4:	d140      	bne.n	8004658 <_printf_float+0x15c>
 80045d6:	2306      	movs	r3, #6
 80045d8:	6063      	str	r3, [r4, #4]
 80045da:	f04f 0c00 	mov.w	ip, #0
 80045de:	f10d 0333 	add.w	r3, sp, #51	; 0x33
 80045e2:	e9cd 2301 	strd	r2, r3, [sp, #4]
 80045e6:	6863      	ldr	r3, [r4, #4]
 80045e8:	6022      	str	r2, [r4, #0]
 80045ea:	e9cd 0803 	strd	r0, r8, [sp, #12]
 80045ee:	9300      	str	r3, [sp, #0]
 80045f0:	463a      	mov	r2, r7
 80045f2:	464b      	mov	r3, r9
 80045f4:	e9cd 1c05 	strd	r1, ip, [sp, #20]
 80045f8:	4628      	mov	r0, r5
 80045fa:	f7ff feed 	bl	80043d8 <__cvt>
 80045fe:	f008 03df 	and.w	r3, r8, #223	; 0xdf
 8004602:	2b47      	cmp	r3, #71	; 0x47
 8004604:	4607      	mov	r7, r0
 8004606:	d109      	bne.n	800461c <_printf_float+0x120>
 8004608:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800460a:	1cd8      	adds	r0, r3, #3
 800460c:	db02      	blt.n	8004614 <_printf_float+0x118>
 800460e:	6862      	ldr	r2, [r4, #4]
 8004610:	4293      	cmp	r3, r2
 8004612:	dd47      	ble.n	80046a4 <_printf_float+0x1a8>
 8004614:	f1a8 0802 	sub.w	r8, r8, #2
 8004618:	fa5f f888 	uxtb.w	r8, r8
 800461c:	f1b8 0f65 	cmp.w	r8, #101	; 0x65
 8004620:	990d      	ldr	r1, [sp, #52]	; 0x34
 8004622:	d824      	bhi.n	800466e <_printf_float+0x172>
 8004624:	3901      	subs	r1, #1
 8004626:	4642      	mov	r2, r8
 8004628:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800462c:	910d      	str	r1, [sp, #52]	; 0x34
 800462e:	f7ff ff2f 	bl	8004490 <__exponent>
 8004632:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8004634:	4681      	mov	r9, r0
 8004636:	1813      	adds	r3, r2, r0
 8004638:	2a01      	cmp	r2, #1
 800463a:	6123      	str	r3, [r4, #16]
 800463c:	dc02      	bgt.n	8004644 <_printf_float+0x148>
 800463e:	6822      	ldr	r2, [r4, #0]
 8004640:	07d1      	lsls	r1, r2, #31
 8004642:	d501      	bpl.n	8004648 <_printf_float+0x14c>
 8004644:	3301      	adds	r3, #1
 8004646:	6123      	str	r3, [r4, #16]
 8004648:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 800464c:	2b00      	cmp	r3, #0
 800464e:	d0a2      	beq.n	8004596 <_printf_float+0x9a>
 8004650:	232d      	movs	r3, #45	; 0x2d
 8004652:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004656:	e79e      	b.n	8004596 <_printf_float+0x9a>
 8004658:	f1b8 0f67 	cmp.w	r8, #103	; 0x67
 800465c:	f000 816e 	beq.w	800493c <_printf_float+0x440>
 8004660:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8004664:	d1b9      	bne.n	80045da <_printf_float+0xde>
 8004666:	2b00      	cmp	r3, #0
 8004668:	d1b7      	bne.n	80045da <_printf_float+0xde>
 800466a:	2301      	movs	r3, #1
 800466c:	e7b4      	b.n	80045d8 <_printf_float+0xdc>
 800466e:	f1b8 0f66 	cmp.w	r8, #102	; 0x66
 8004672:	d119      	bne.n	80046a8 <_printf_float+0x1ac>
 8004674:	2900      	cmp	r1, #0
 8004676:	6863      	ldr	r3, [r4, #4]
 8004678:	dd0c      	ble.n	8004694 <_printf_float+0x198>
 800467a:	6121      	str	r1, [r4, #16]
 800467c:	b913      	cbnz	r3, 8004684 <_printf_float+0x188>
 800467e:	6822      	ldr	r2, [r4, #0]
 8004680:	07d2      	lsls	r2, r2, #31
 8004682:	d502      	bpl.n	800468a <_printf_float+0x18e>
 8004684:	3301      	adds	r3, #1
 8004686:	440b      	add	r3, r1
 8004688:	6123      	str	r3, [r4, #16]
 800468a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800468c:	f04f 0900 	mov.w	r9, #0
 8004690:	65a3      	str	r3, [r4, #88]	; 0x58
 8004692:	e7d9      	b.n	8004648 <_printf_float+0x14c>
 8004694:	b913      	cbnz	r3, 800469c <_printf_float+0x1a0>
 8004696:	6822      	ldr	r2, [r4, #0]
 8004698:	07d0      	lsls	r0, r2, #31
 800469a:	d501      	bpl.n	80046a0 <_printf_float+0x1a4>
 800469c:	3302      	adds	r3, #2
 800469e:	e7f3      	b.n	8004688 <_printf_float+0x18c>
 80046a0:	2301      	movs	r3, #1
 80046a2:	e7f1      	b.n	8004688 <_printf_float+0x18c>
 80046a4:	f04f 0867 	mov.w	r8, #103	; 0x67
 80046a8:	e9dd 320d 	ldrd	r3, r2, [sp, #52]	; 0x34
 80046ac:	4293      	cmp	r3, r2
 80046ae:	db05      	blt.n	80046bc <_printf_float+0x1c0>
 80046b0:	6822      	ldr	r2, [r4, #0]
 80046b2:	6123      	str	r3, [r4, #16]
 80046b4:	07d1      	lsls	r1, r2, #31
 80046b6:	d5e8      	bpl.n	800468a <_printf_float+0x18e>
 80046b8:	3301      	adds	r3, #1
 80046ba:	e7e5      	b.n	8004688 <_printf_float+0x18c>
 80046bc:	2b00      	cmp	r3, #0
 80046be:	bfcc      	ite	gt
 80046c0:	2301      	movgt	r3, #1
 80046c2:	f1c3 0302 	rsble	r3, r3, #2
 80046c6:	4413      	add	r3, r2
 80046c8:	e7de      	b.n	8004688 <_printf_float+0x18c>
 80046ca:	6823      	ldr	r3, [r4, #0]
 80046cc:	055a      	lsls	r2, r3, #21
 80046ce:	d407      	bmi.n	80046e0 <_printf_float+0x1e4>
 80046d0:	6923      	ldr	r3, [r4, #16]
 80046d2:	463a      	mov	r2, r7
 80046d4:	4659      	mov	r1, fp
 80046d6:	4628      	mov	r0, r5
 80046d8:	47b0      	blx	r6
 80046da:	3001      	adds	r0, #1
 80046dc:	d129      	bne.n	8004732 <_printf_float+0x236>
 80046de:	e764      	b.n	80045aa <_printf_float+0xae>
 80046e0:	f1b8 0f65 	cmp.w	r8, #101	; 0x65
 80046e4:	f240 80d7 	bls.w	8004896 <_printf_float+0x39a>
 80046e8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80046ec:	2200      	movs	r2, #0
 80046ee:	2300      	movs	r3, #0
 80046f0:	f7fc f95a 	bl	80009a8 <__aeabi_dcmpeq>
 80046f4:	b388      	cbz	r0, 800475a <_printf_float+0x25e>
 80046f6:	2301      	movs	r3, #1
 80046f8:	4a40      	ldr	r2, [pc, #256]	; (80047fc <_printf_float+0x300>)
 80046fa:	4659      	mov	r1, fp
 80046fc:	4628      	mov	r0, r5
 80046fe:	47b0      	blx	r6
 8004700:	3001      	adds	r0, #1
 8004702:	f43f af52 	beq.w	80045aa <_printf_float+0xae>
 8004706:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 800470a:	429a      	cmp	r2, r3
 800470c:	db02      	blt.n	8004714 <_printf_float+0x218>
 800470e:	6823      	ldr	r3, [r4, #0]
 8004710:	07d8      	lsls	r0, r3, #31
 8004712:	d50e      	bpl.n	8004732 <_printf_float+0x236>
 8004714:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004718:	4659      	mov	r1, fp
 800471a:	4628      	mov	r0, r5
 800471c:	47b0      	blx	r6
 800471e:	3001      	adds	r0, #1
 8004720:	f43f af43 	beq.w	80045aa <_printf_float+0xae>
 8004724:	2700      	movs	r7, #0
 8004726:	f104 081a 	add.w	r8, r4, #26
 800472a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800472c:	3b01      	subs	r3, #1
 800472e:	42bb      	cmp	r3, r7
 8004730:	dc09      	bgt.n	8004746 <_printf_float+0x24a>
 8004732:	6823      	ldr	r3, [r4, #0]
 8004734:	079f      	lsls	r7, r3, #30
 8004736:	f100 80fd 	bmi.w	8004934 <_printf_float+0x438>
 800473a:	68e0      	ldr	r0, [r4, #12]
 800473c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800473e:	4298      	cmp	r0, r3
 8004740:	bfb8      	it	lt
 8004742:	4618      	movlt	r0, r3
 8004744:	e733      	b.n	80045ae <_printf_float+0xb2>
 8004746:	2301      	movs	r3, #1
 8004748:	4642      	mov	r2, r8
 800474a:	4659      	mov	r1, fp
 800474c:	4628      	mov	r0, r5
 800474e:	47b0      	blx	r6
 8004750:	3001      	adds	r0, #1
 8004752:	f43f af2a 	beq.w	80045aa <_printf_float+0xae>
 8004756:	3701      	adds	r7, #1
 8004758:	e7e7      	b.n	800472a <_printf_float+0x22e>
 800475a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800475c:	2b00      	cmp	r3, #0
 800475e:	dc2b      	bgt.n	80047b8 <_printf_float+0x2bc>
 8004760:	2301      	movs	r3, #1
 8004762:	4a26      	ldr	r2, [pc, #152]	; (80047fc <_printf_float+0x300>)
 8004764:	4659      	mov	r1, fp
 8004766:	4628      	mov	r0, r5
 8004768:	47b0      	blx	r6
 800476a:	3001      	adds	r0, #1
 800476c:	f43f af1d 	beq.w	80045aa <_printf_float+0xae>
 8004770:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004772:	b923      	cbnz	r3, 800477e <_printf_float+0x282>
 8004774:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004776:	b913      	cbnz	r3, 800477e <_printf_float+0x282>
 8004778:	6823      	ldr	r3, [r4, #0]
 800477a:	07d9      	lsls	r1, r3, #31
 800477c:	d5d9      	bpl.n	8004732 <_printf_float+0x236>
 800477e:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004782:	4659      	mov	r1, fp
 8004784:	4628      	mov	r0, r5
 8004786:	47b0      	blx	r6
 8004788:	3001      	adds	r0, #1
 800478a:	f43f af0e 	beq.w	80045aa <_printf_float+0xae>
 800478e:	f04f 0800 	mov.w	r8, #0
 8004792:	f104 091a 	add.w	r9, r4, #26
 8004796:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004798:	425b      	negs	r3, r3
 800479a:	4543      	cmp	r3, r8
 800479c:	dc01      	bgt.n	80047a2 <_printf_float+0x2a6>
 800479e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80047a0:	e797      	b.n	80046d2 <_printf_float+0x1d6>
 80047a2:	2301      	movs	r3, #1
 80047a4:	464a      	mov	r2, r9
 80047a6:	4659      	mov	r1, fp
 80047a8:	4628      	mov	r0, r5
 80047aa:	47b0      	blx	r6
 80047ac:	3001      	adds	r0, #1
 80047ae:	f43f aefc 	beq.w	80045aa <_printf_float+0xae>
 80047b2:	f108 0801 	add.w	r8, r8, #1
 80047b6:	e7ee      	b.n	8004796 <_printf_float+0x29a>
 80047b8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80047ba:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80047bc:	429a      	cmp	r2, r3
 80047be:	bfa8      	it	ge
 80047c0:	461a      	movge	r2, r3
 80047c2:	2a00      	cmp	r2, #0
 80047c4:	4690      	mov	r8, r2
 80047c6:	dd07      	ble.n	80047d8 <_printf_float+0x2dc>
 80047c8:	4613      	mov	r3, r2
 80047ca:	4659      	mov	r1, fp
 80047cc:	463a      	mov	r2, r7
 80047ce:	4628      	mov	r0, r5
 80047d0:	47b0      	blx	r6
 80047d2:	3001      	adds	r0, #1
 80047d4:	f43f aee9 	beq.w	80045aa <_printf_float+0xae>
 80047d8:	f104 031a 	add.w	r3, r4, #26
 80047dc:	f04f 0a00 	mov.w	sl, #0
 80047e0:	ea28 78e8 	bic.w	r8, r8, r8, asr #31
 80047e4:	930b      	str	r3, [sp, #44]	; 0x2c
 80047e6:	e015      	b.n	8004814 <_printf_float+0x318>
 80047e8:	7fefffff 	.word	0x7fefffff
 80047ec:	0800880c 	.word	0x0800880c
 80047f0:	08008808 	.word	0x08008808
 80047f4:	08008814 	.word	0x08008814
 80047f8:	08008810 	.word	0x08008810
 80047fc:	08008818 	.word	0x08008818
 8004800:	2301      	movs	r3, #1
 8004802:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8004804:	4659      	mov	r1, fp
 8004806:	4628      	mov	r0, r5
 8004808:	47b0      	blx	r6
 800480a:	3001      	adds	r0, #1
 800480c:	f43f aecd 	beq.w	80045aa <_printf_float+0xae>
 8004810:	f10a 0a01 	add.w	sl, sl, #1
 8004814:	f8d4 9058 	ldr.w	r9, [r4, #88]	; 0x58
 8004818:	eba9 0308 	sub.w	r3, r9, r8
 800481c:	4553      	cmp	r3, sl
 800481e:	dcef      	bgt.n	8004800 <_printf_float+0x304>
 8004820:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8004824:	429a      	cmp	r2, r3
 8004826:	444f      	add	r7, r9
 8004828:	db14      	blt.n	8004854 <_printf_float+0x358>
 800482a:	6823      	ldr	r3, [r4, #0]
 800482c:	07da      	lsls	r2, r3, #31
 800482e:	d411      	bmi.n	8004854 <_printf_float+0x358>
 8004830:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004832:	990d      	ldr	r1, [sp, #52]	; 0x34
 8004834:	eba3 0209 	sub.w	r2, r3, r9
 8004838:	eba3 0901 	sub.w	r9, r3, r1
 800483c:	4591      	cmp	r9, r2
 800483e:	bfa8      	it	ge
 8004840:	4691      	movge	r9, r2
 8004842:	f1b9 0f00 	cmp.w	r9, #0
 8004846:	dc0d      	bgt.n	8004864 <_printf_float+0x368>
 8004848:	2700      	movs	r7, #0
 800484a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800484e:	f104 081a 	add.w	r8, r4, #26
 8004852:	e018      	b.n	8004886 <_printf_float+0x38a>
 8004854:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004858:	4659      	mov	r1, fp
 800485a:	4628      	mov	r0, r5
 800485c:	47b0      	blx	r6
 800485e:	3001      	adds	r0, #1
 8004860:	d1e6      	bne.n	8004830 <_printf_float+0x334>
 8004862:	e6a2      	b.n	80045aa <_printf_float+0xae>
 8004864:	464b      	mov	r3, r9
 8004866:	463a      	mov	r2, r7
 8004868:	4659      	mov	r1, fp
 800486a:	4628      	mov	r0, r5
 800486c:	47b0      	blx	r6
 800486e:	3001      	adds	r0, #1
 8004870:	d1ea      	bne.n	8004848 <_printf_float+0x34c>
 8004872:	e69a      	b.n	80045aa <_printf_float+0xae>
 8004874:	2301      	movs	r3, #1
 8004876:	4642      	mov	r2, r8
 8004878:	4659      	mov	r1, fp
 800487a:	4628      	mov	r0, r5
 800487c:	47b0      	blx	r6
 800487e:	3001      	adds	r0, #1
 8004880:	f43f ae93 	beq.w	80045aa <_printf_float+0xae>
 8004884:	3701      	adds	r7, #1
 8004886:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 800488a:	1a9b      	subs	r3, r3, r2
 800488c:	eba3 0309 	sub.w	r3, r3, r9
 8004890:	42bb      	cmp	r3, r7
 8004892:	dcef      	bgt.n	8004874 <_printf_float+0x378>
 8004894:	e74d      	b.n	8004732 <_printf_float+0x236>
 8004896:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8004898:	2a01      	cmp	r2, #1
 800489a:	dc01      	bgt.n	80048a0 <_printf_float+0x3a4>
 800489c:	07db      	lsls	r3, r3, #31
 800489e:	d538      	bpl.n	8004912 <_printf_float+0x416>
 80048a0:	2301      	movs	r3, #1
 80048a2:	463a      	mov	r2, r7
 80048a4:	4659      	mov	r1, fp
 80048a6:	4628      	mov	r0, r5
 80048a8:	47b0      	blx	r6
 80048aa:	3001      	adds	r0, #1
 80048ac:	f43f ae7d 	beq.w	80045aa <_printf_float+0xae>
 80048b0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80048b4:	4659      	mov	r1, fp
 80048b6:	4628      	mov	r0, r5
 80048b8:	47b0      	blx	r6
 80048ba:	3001      	adds	r0, #1
 80048bc:	f107 0701 	add.w	r7, r7, #1
 80048c0:	f43f ae73 	beq.w	80045aa <_printf_float+0xae>
 80048c4:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80048c8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80048ca:	2200      	movs	r2, #0
 80048cc:	f103 38ff 	add.w	r8, r3, #4294967295
 80048d0:	2300      	movs	r3, #0
 80048d2:	f7fc f869 	bl	80009a8 <__aeabi_dcmpeq>
 80048d6:	b9c0      	cbnz	r0, 800490a <_printf_float+0x40e>
 80048d8:	4643      	mov	r3, r8
 80048da:	463a      	mov	r2, r7
 80048dc:	4659      	mov	r1, fp
 80048de:	4628      	mov	r0, r5
 80048e0:	47b0      	blx	r6
 80048e2:	3001      	adds	r0, #1
 80048e4:	d10d      	bne.n	8004902 <_printf_float+0x406>
 80048e6:	e660      	b.n	80045aa <_printf_float+0xae>
 80048e8:	2301      	movs	r3, #1
 80048ea:	4642      	mov	r2, r8
 80048ec:	4659      	mov	r1, fp
 80048ee:	4628      	mov	r0, r5
 80048f0:	47b0      	blx	r6
 80048f2:	3001      	adds	r0, #1
 80048f4:	f43f ae59 	beq.w	80045aa <_printf_float+0xae>
 80048f8:	3701      	adds	r7, #1
 80048fa:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80048fc:	3b01      	subs	r3, #1
 80048fe:	42bb      	cmp	r3, r7
 8004900:	dcf2      	bgt.n	80048e8 <_printf_float+0x3ec>
 8004902:	464b      	mov	r3, r9
 8004904:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8004908:	e6e4      	b.n	80046d4 <_printf_float+0x1d8>
 800490a:	2700      	movs	r7, #0
 800490c:	f104 081a 	add.w	r8, r4, #26
 8004910:	e7f3      	b.n	80048fa <_printf_float+0x3fe>
 8004912:	2301      	movs	r3, #1
 8004914:	e7e1      	b.n	80048da <_printf_float+0x3de>
 8004916:	2301      	movs	r3, #1
 8004918:	4642      	mov	r2, r8
 800491a:	4659      	mov	r1, fp
 800491c:	4628      	mov	r0, r5
 800491e:	47b0      	blx	r6
 8004920:	3001      	adds	r0, #1
 8004922:	f43f ae42 	beq.w	80045aa <_printf_float+0xae>
 8004926:	3701      	adds	r7, #1
 8004928:	68e3      	ldr	r3, [r4, #12]
 800492a:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800492c:	1a9b      	subs	r3, r3, r2
 800492e:	42bb      	cmp	r3, r7
 8004930:	dcf1      	bgt.n	8004916 <_printf_float+0x41a>
 8004932:	e702      	b.n	800473a <_printf_float+0x23e>
 8004934:	2700      	movs	r7, #0
 8004936:	f104 0819 	add.w	r8, r4, #25
 800493a:	e7f5      	b.n	8004928 <_printf_float+0x42c>
 800493c:	2b00      	cmp	r3, #0
 800493e:	f43f ae94 	beq.w	800466a <_printf_float+0x16e>
 8004942:	f04f 0c00 	mov.w	ip, #0
 8004946:	e9cd 1c05 	strd	r1, ip, [sp, #20]
 800494a:	f10d 0133 	add.w	r1, sp, #51	; 0x33
 800494e:	6022      	str	r2, [r4, #0]
 8004950:	e9cd 0803 	strd	r0, r8, [sp, #12]
 8004954:	e9cd 2101 	strd	r2, r1, [sp, #4]
 8004958:	9300      	str	r3, [sp, #0]
 800495a:	463a      	mov	r2, r7
 800495c:	464b      	mov	r3, r9
 800495e:	4628      	mov	r0, r5
 8004960:	f7ff fd3a 	bl	80043d8 <__cvt>
 8004964:	4607      	mov	r7, r0
 8004966:	e64f      	b.n	8004608 <_printf_float+0x10c>

08004968 <_printf_common>:
 8004968:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800496c:	4691      	mov	r9, r2
 800496e:	461f      	mov	r7, r3
 8004970:	688a      	ldr	r2, [r1, #8]
 8004972:	690b      	ldr	r3, [r1, #16]
 8004974:	4606      	mov	r6, r0
 8004976:	4293      	cmp	r3, r2
 8004978:	bfb8      	it	lt
 800497a:	4613      	movlt	r3, r2
 800497c:	f8c9 3000 	str.w	r3, [r9]
 8004980:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004984:	460c      	mov	r4, r1
 8004986:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800498a:	b112      	cbz	r2, 8004992 <_printf_common+0x2a>
 800498c:	3301      	adds	r3, #1
 800498e:	f8c9 3000 	str.w	r3, [r9]
 8004992:	6823      	ldr	r3, [r4, #0]
 8004994:	0699      	lsls	r1, r3, #26
 8004996:	bf42      	ittt	mi
 8004998:	f8d9 3000 	ldrmi.w	r3, [r9]
 800499c:	3302      	addmi	r3, #2
 800499e:	f8c9 3000 	strmi.w	r3, [r9]
 80049a2:	6825      	ldr	r5, [r4, #0]
 80049a4:	f015 0506 	ands.w	r5, r5, #6
 80049a8:	d107      	bne.n	80049ba <_printf_common+0x52>
 80049aa:	f104 0a19 	add.w	sl, r4, #25
 80049ae:	68e3      	ldr	r3, [r4, #12]
 80049b0:	f8d9 2000 	ldr.w	r2, [r9]
 80049b4:	1a9b      	subs	r3, r3, r2
 80049b6:	42ab      	cmp	r3, r5
 80049b8:	dc29      	bgt.n	8004a0e <_printf_common+0xa6>
 80049ba:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 80049be:	6822      	ldr	r2, [r4, #0]
 80049c0:	3300      	adds	r3, #0
 80049c2:	bf18      	it	ne
 80049c4:	2301      	movne	r3, #1
 80049c6:	0692      	lsls	r2, r2, #26
 80049c8:	d42e      	bmi.n	8004a28 <_printf_common+0xc0>
 80049ca:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80049ce:	4639      	mov	r1, r7
 80049d0:	4630      	mov	r0, r6
 80049d2:	47c0      	blx	r8
 80049d4:	3001      	adds	r0, #1
 80049d6:	d021      	beq.n	8004a1c <_printf_common+0xb4>
 80049d8:	6823      	ldr	r3, [r4, #0]
 80049da:	68e5      	ldr	r5, [r4, #12]
 80049dc:	f003 0306 	and.w	r3, r3, #6
 80049e0:	2b04      	cmp	r3, #4
 80049e2:	bf18      	it	ne
 80049e4:	2500      	movne	r5, #0
 80049e6:	f8d9 2000 	ldr.w	r2, [r9]
 80049ea:	f04f 0900 	mov.w	r9, #0
 80049ee:	bf08      	it	eq
 80049f0:	1aad      	subeq	r5, r5, r2
 80049f2:	68a3      	ldr	r3, [r4, #8]
 80049f4:	6922      	ldr	r2, [r4, #16]
 80049f6:	bf08      	it	eq
 80049f8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80049fc:	4293      	cmp	r3, r2
 80049fe:	bfc4      	itt	gt
 8004a00:	1a9b      	subgt	r3, r3, r2
 8004a02:	18ed      	addgt	r5, r5, r3
 8004a04:	341a      	adds	r4, #26
 8004a06:	454d      	cmp	r5, r9
 8004a08:	d11a      	bne.n	8004a40 <_printf_common+0xd8>
 8004a0a:	2000      	movs	r0, #0
 8004a0c:	e008      	b.n	8004a20 <_printf_common+0xb8>
 8004a0e:	2301      	movs	r3, #1
 8004a10:	4652      	mov	r2, sl
 8004a12:	4639      	mov	r1, r7
 8004a14:	4630      	mov	r0, r6
 8004a16:	47c0      	blx	r8
 8004a18:	3001      	adds	r0, #1
 8004a1a:	d103      	bne.n	8004a24 <_printf_common+0xbc>
 8004a1c:	f04f 30ff 	mov.w	r0, #4294967295
 8004a20:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004a24:	3501      	adds	r5, #1
 8004a26:	e7c2      	b.n	80049ae <_printf_common+0x46>
 8004a28:	2030      	movs	r0, #48	; 0x30
 8004a2a:	18e1      	adds	r1, r4, r3
 8004a2c:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004a30:	1c5a      	adds	r2, r3, #1
 8004a32:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004a36:	4422      	add	r2, r4
 8004a38:	3302      	adds	r3, #2
 8004a3a:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004a3e:	e7c4      	b.n	80049ca <_printf_common+0x62>
 8004a40:	2301      	movs	r3, #1
 8004a42:	4622      	mov	r2, r4
 8004a44:	4639      	mov	r1, r7
 8004a46:	4630      	mov	r0, r6
 8004a48:	47c0      	blx	r8
 8004a4a:	3001      	adds	r0, #1
 8004a4c:	d0e6      	beq.n	8004a1c <_printf_common+0xb4>
 8004a4e:	f109 0901 	add.w	r9, r9, #1
 8004a52:	e7d8      	b.n	8004a06 <_printf_common+0x9e>

08004a54 <_printf_i>:
 8004a54:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8004a58:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8004a5c:	460c      	mov	r4, r1
 8004a5e:	7e09      	ldrb	r1, [r1, #24]
 8004a60:	b085      	sub	sp, #20
 8004a62:	296e      	cmp	r1, #110	; 0x6e
 8004a64:	4617      	mov	r7, r2
 8004a66:	4606      	mov	r6, r0
 8004a68:	4698      	mov	r8, r3
 8004a6a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8004a6c:	f000 80b3 	beq.w	8004bd6 <_printf_i+0x182>
 8004a70:	d822      	bhi.n	8004ab8 <_printf_i+0x64>
 8004a72:	2963      	cmp	r1, #99	; 0x63
 8004a74:	d036      	beq.n	8004ae4 <_printf_i+0x90>
 8004a76:	d80a      	bhi.n	8004a8e <_printf_i+0x3a>
 8004a78:	2900      	cmp	r1, #0
 8004a7a:	f000 80b9 	beq.w	8004bf0 <_printf_i+0x19c>
 8004a7e:	2958      	cmp	r1, #88	; 0x58
 8004a80:	f000 8083 	beq.w	8004b8a <_printf_i+0x136>
 8004a84:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004a88:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8004a8c:	e032      	b.n	8004af4 <_printf_i+0xa0>
 8004a8e:	2964      	cmp	r1, #100	; 0x64
 8004a90:	d001      	beq.n	8004a96 <_printf_i+0x42>
 8004a92:	2969      	cmp	r1, #105	; 0x69
 8004a94:	d1f6      	bne.n	8004a84 <_printf_i+0x30>
 8004a96:	6820      	ldr	r0, [r4, #0]
 8004a98:	6813      	ldr	r3, [r2, #0]
 8004a9a:	0605      	lsls	r5, r0, #24
 8004a9c:	f103 0104 	add.w	r1, r3, #4
 8004aa0:	d52a      	bpl.n	8004af8 <_printf_i+0xa4>
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	6011      	str	r1, [r2, #0]
 8004aa6:	2b00      	cmp	r3, #0
 8004aa8:	da03      	bge.n	8004ab2 <_printf_i+0x5e>
 8004aaa:	222d      	movs	r2, #45	; 0x2d
 8004aac:	425b      	negs	r3, r3
 8004aae:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8004ab2:	486f      	ldr	r0, [pc, #444]	; (8004c70 <_printf_i+0x21c>)
 8004ab4:	220a      	movs	r2, #10
 8004ab6:	e039      	b.n	8004b2c <_printf_i+0xd8>
 8004ab8:	2973      	cmp	r1, #115	; 0x73
 8004aba:	f000 809d 	beq.w	8004bf8 <_printf_i+0x1a4>
 8004abe:	d808      	bhi.n	8004ad2 <_printf_i+0x7e>
 8004ac0:	296f      	cmp	r1, #111	; 0x6f
 8004ac2:	d020      	beq.n	8004b06 <_printf_i+0xb2>
 8004ac4:	2970      	cmp	r1, #112	; 0x70
 8004ac6:	d1dd      	bne.n	8004a84 <_printf_i+0x30>
 8004ac8:	6823      	ldr	r3, [r4, #0]
 8004aca:	f043 0320 	orr.w	r3, r3, #32
 8004ace:	6023      	str	r3, [r4, #0]
 8004ad0:	e003      	b.n	8004ada <_printf_i+0x86>
 8004ad2:	2975      	cmp	r1, #117	; 0x75
 8004ad4:	d017      	beq.n	8004b06 <_printf_i+0xb2>
 8004ad6:	2978      	cmp	r1, #120	; 0x78
 8004ad8:	d1d4      	bne.n	8004a84 <_printf_i+0x30>
 8004ada:	2378      	movs	r3, #120	; 0x78
 8004adc:	4865      	ldr	r0, [pc, #404]	; (8004c74 <_printf_i+0x220>)
 8004ade:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8004ae2:	e055      	b.n	8004b90 <_printf_i+0x13c>
 8004ae4:	6813      	ldr	r3, [r2, #0]
 8004ae6:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004aea:	1d19      	adds	r1, r3, #4
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	6011      	str	r1, [r2, #0]
 8004af0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004af4:	2301      	movs	r3, #1
 8004af6:	e08c      	b.n	8004c12 <_printf_i+0x1be>
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	f010 0f40 	tst.w	r0, #64	; 0x40
 8004afe:	6011      	str	r1, [r2, #0]
 8004b00:	bf18      	it	ne
 8004b02:	b21b      	sxthne	r3, r3
 8004b04:	e7cf      	b.n	8004aa6 <_printf_i+0x52>
 8004b06:	6813      	ldr	r3, [r2, #0]
 8004b08:	6825      	ldr	r5, [r4, #0]
 8004b0a:	1d18      	adds	r0, r3, #4
 8004b0c:	6010      	str	r0, [r2, #0]
 8004b0e:	0628      	lsls	r0, r5, #24
 8004b10:	d501      	bpl.n	8004b16 <_printf_i+0xc2>
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	e002      	b.n	8004b1c <_printf_i+0xc8>
 8004b16:	0668      	lsls	r0, r5, #25
 8004b18:	d5fb      	bpl.n	8004b12 <_printf_i+0xbe>
 8004b1a:	881b      	ldrh	r3, [r3, #0]
 8004b1c:	296f      	cmp	r1, #111	; 0x6f
 8004b1e:	bf14      	ite	ne
 8004b20:	220a      	movne	r2, #10
 8004b22:	2208      	moveq	r2, #8
 8004b24:	4852      	ldr	r0, [pc, #328]	; (8004c70 <_printf_i+0x21c>)
 8004b26:	2100      	movs	r1, #0
 8004b28:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004b2c:	6865      	ldr	r5, [r4, #4]
 8004b2e:	2d00      	cmp	r5, #0
 8004b30:	60a5      	str	r5, [r4, #8]
 8004b32:	f2c0 8095 	blt.w	8004c60 <_printf_i+0x20c>
 8004b36:	6821      	ldr	r1, [r4, #0]
 8004b38:	f021 0104 	bic.w	r1, r1, #4
 8004b3c:	6021      	str	r1, [r4, #0]
 8004b3e:	2b00      	cmp	r3, #0
 8004b40:	d13d      	bne.n	8004bbe <_printf_i+0x16a>
 8004b42:	2d00      	cmp	r5, #0
 8004b44:	f040 808e 	bne.w	8004c64 <_printf_i+0x210>
 8004b48:	4665      	mov	r5, ip
 8004b4a:	2a08      	cmp	r2, #8
 8004b4c:	d10b      	bne.n	8004b66 <_printf_i+0x112>
 8004b4e:	6823      	ldr	r3, [r4, #0]
 8004b50:	07db      	lsls	r3, r3, #31
 8004b52:	d508      	bpl.n	8004b66 <_printf_i+0x112>
 8004b54:	6923      	ldr	r3, [r4, #16]
 8004b56:	6862      	ldr	r2, [r4, #4]
 8004b58:	429a      	cmp	r2, r3
 8004b5a:	bfde      	ittt	le
 8004b5c:	2330      	movle	r3, #48	; 0x30
 8004b5e:	f805 3c01 	strble.w	r3, [r5, #-1]
 8004b62:	f105 35ff 	addle.w	r5, r5, #4294967295
 8004b66:	ebac 0305 	sub.w	r3, ip, r5
 8004b6a:	6123      	str	r3, [r4, #16]
 8004b6c:	f8cd 8000 	str.w	r8, [sp]
 8004b70:	463b      	mov	r3, r7
 8004b72:	aa03      	add	r2, sp, #12
 8004b74:	4621      	mov	r1, r4
 8004b76:	4630      	mov	r0, r6
 8004b78:	f7ff fef6 	bl	8004968 <_printf_common>
 8004b7c:	3001      	adds	r0, #1
 8004b7e:	d14d      	bne.n	8004c1c <_printf_i+0x1c8>
 8004b80:	f04f 30ff 	mov.w	r0, #4294967295
 8004b84:	b005      	add	sp, #20
 8004b86:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8004b8a:	4839      	ldr	r0, [pc, #228]	; (8004c70 <_printf_i+0x21c>)
 8004b8c:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8004b90:	6813      	ldr	r3, [r2, #0]
 8004b92:	6821      	ldr	r1, [r4, #0]
 8004b94:	1d1d      	adds	r5, r3, #4
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	6015      	str	r5, [r2, #0]
 8004b9a:	060a      	lsls	r2, r1, #24
 8004b9c:	d50b      	bpl.n	8004bb6 <_printf_i+0x162>
 8004b9e:	07ca      	lsls	r2, r1, #31
 8004ba0:	bf44      	itt	mi
 8004ba2:	f041 0120 	orrmi.w	r1, r1, #32
 8004ba6:	6021      	strmi	r1, [r4, #0]
 8004ba8:	b91b      	cbnz	r3, 8004bb2 <_printf_i+0x15e>
 8004baa:	6822      	ldr	r2, [r4, #0]
 8004bac:	f022 0220 	bic.w	r2, r2, #32
 8004bb0:	6022      	str	r2, [r4, #0]
 8004bb2:	2210      	movs	r2, #16
 8004bb4:	e7b7      	b.n	8004b26 <_printf_i+0xd2>
 8004bb6:	064d      	lsls	r5, r1, #25
 8004bb8:	bf48      	it	mi
 8004bba:	b29b      	uxthmi	r3, r3
 8004bbc:	e7ef      	b.n	8004b9e <_printf_i+0x14a>
 8004bbe:	4665      	mov	r5, ip
 8004bc0:	fbb3 f1f2 	udiv	r1, r3, r2
 8004bc4:	fb02 3311 	mls	r3, r2, r1, r3
 8004bc8:	5cc3      	ldrb	r3, [r0, r3]
 8004bca:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8004bce:	460b      	mov	r3, r1
 8004bd0:	2900      	cmp	r1, #0
 8004bd2:	d1f5      	bne.n	8004bc0 <_printf_i+0x16c>
 8004bd4:	e7b9      	b.n	8004b4a <_printf_i+0xf6>
 8004bd6:	6813      	ldr	r3, [r2, #0]
 8004bd8:	6825      	ldr	r5, [r4, #0]
 8004bda:	1d18      	adds	r0, r3, #4
 8004bdc:	6961      	ldr	r1, [r4, #20]
 8004bde:	6010      	str	r0, [r2, #0]
 8004be0:	0628      	lsls	r0, r5, #24
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	d501      	bpl.n	8004bea <_printf_i+0x196>
 8004be6:	6019      	str	r1, [r3, #0]
 8004be8:	e002      	b.n	8004bf0 <_printf_i+0x19c>
 8004bea:	066a      	lsls	r2, r5, #25
 8004bec:	d5fb      	bpl.n	8004be6 <_printf_i+0x192>
 8004bee:	8019      	strh	r1, [r3, #0]
 8004bf0:	2300      	movs	r3, #0
 8004bf2:	4665      	mov	r5, ip
 8004bf4:	6123      	str	r3, [r4, #16]
 8004bf6:	e7b9      	b.n	8004b6c <_printf_i+0x118>
 8004bf8:	6813      	ldr	r3, [r2, #0]
 8004bfa:	1d19      	adds	r1, r3, #4
 8004bfc:	6011      	str	r1, [r2, #0]
 8004bfe:	681d      	ldr	r5, [r3, #0]
 8004c00:	6862      	ldr	r2, [r4, #4]
 8004c02:	2100      	movs	r1, #0
 8004c04:	4628      	mov	r0, r5
 8004c06:	f002 fb77 	bl	80072f8 <memchr>
 8004c0a:	b108      	cbz	r0, 8004c10 <_printf_i+0x1bc>
 8004c0c:	1b40      	subs	r0, r0, r5
 8004c0e:	6060      	str	r0, [r4, #4]
 8004c10:	6863      	ldr	r3, [r4, #4]
 8004c12:	6123      	str	r3, [r4, #16]
 8004c14:	2300      	movs	r3, #0
 8004c16:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004c1a:	e7a7      	b.n	8004b6c <_printf_i+0x118>
 8004c1c:	6923      	ldr	r3, [r4, #16]
 8004c1e:	462a      	mov	r2, r5
 8004c20:	4639      	mov	r1, r7
 8004c22:	4630      	mov	r0, r6
 8004c24:	47c0      	blx	r8
 8004c26:	3001      	adds	r0, #1
 8004c28:	d0aa      	beq.n	8004b80 <_printf_i+0x12c>
 8004c2a:	6823      	ldr	r3, [r4, #0]
 8004c2c:	079b      	lsls	r3, r3, #30
 8004c2e:	d413      	bmi.n	8004c58 <_printf_i+0x204>
 8004c30:	68e0      	ldr	r0, [r4, #12]
 8004c32:	9b03      	ldr	r3, [sp, #12]
 8004c34:	4298      	cmp	r0, r3
 8004c36:	bfb8      	it	lt
 8004c38:	4618      	movlt	r0, r3
 8004c3a:	e7a3      	b.n	8004b84 <_printf_i+0x130>
 8004c3c:	2301      	movs	r3, #1
 8004c3e:	464a      	mov	r2, r9
 8004c40:	4639      	mov	r1, r7
 8004c42:	4630      	mov	r0, r6
 8004c44:	47c0      	blx	r8
 8004c46:	3001      	adds	r0, #1
 8004c48:	d09a      	beq.n	8004b80 <_printf_i+0x12c>
 8004c4a:	3501      	adds	r5, #1
 8004c4c:	68e3      	ldr	r3, [r4, #12]
 8004c4e:	9a03      	ldr	r2, [sp, #12]
 8004c50:	1a9b      	subs	r3, r3, r2
 8004c52:	42ab      	cmp	r3, r5
 8004c54:	dcf2      	bgt.n	8004c3c <_printf_i+0x1e8>
 8004c56:	e7eb      	b.n	8004c30 <_printf_i+0x1dc>
 8004c58:	2500      	movs	r5, #0
 8004c5a:	f104 0919 	add.w	r9, r4, #25
 8004c5e:	e7f5      	b.n	8004c4c <_printf_i+0x1f8>
 8004c60:	2b00      	cmp	r3, #0
 8004c62:	d1ac      	bne.n	8004bbe <_printf_i+0x16a>
 8004c64:	7803      	ldrb	r3, [r0, #0]
 8004c66:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004c6a:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004c6e:	e76c      	b.n	8004b4a <_printf_i+0xf6>
 8004c70:	0800881a 	.word	0x0800881a
 8004c74:	0800882b 	.word	0x0800882b

08004c78 <_scanf_float>:
 8004c78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004c7c:	469a      	mov	sl, r3
 8004c7e:	688b      	ldr	r3, [r1, #8]
 8004c80:	4616      	mov	r6, r2
 8004c82:	1e5a      	subs	r2, r3, #1
 8004c84:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8004c88:	bf88      	it	hi
 8004c8a:	f46f 72ae 	mvnhi.w	r2, #348	; 0x15c
 8004c8e:	b087      	sub	sp, #28
 8004c90:	bf85      	ittet	hi
 8004c92:	189b      	addhi	r3, r3, r2
 8004c94:	9301      	strhi	r3, [sp, #4]
 8004c96:	2300      	movls	r3, #0
 8004c98:	f240 135d 	movwhi	r3, #349	; 0x15d
 8004c9c:	4688      	mov	r8, r1
 8004c9e:	f04f 0b00 	mov.w	fp, #0
 8004ca2:	bf8c      	ite	hi
 8004ca4:	608b      	strhi	r3, [r1, #8]
 8004ca6:	9301      	strls	r3, [sp, #4]
 8004ca8:	680b      	ldr	r3, [r1, #0]
 8004caa:	4607      	mov	r7, r0
 8004cac:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 8004cb0:	f848 3b1c 	str.w	r3, [r8], #28
 8004cb4:	460c      	mov	r4, r1
 8004cb6:	4645      	mov	r5, r8
 8004cb8:	465a      	mov	r2, fp
 8004cba:	46d9      	mov	r9, fp
 8004cbc:	e9cd bb03 	strd	fp, fp, [sp, #12]
 8004cc0:	f8cd b008 	str.w	fp, [sp, #8]
 8004cc4:	68a1      	ldr	r1, [r4, #8]
 8004cc6:	b181      	cbz	r1, 8004cea <_scanf_float+0x72>
 8004cc8:	6833      	ldr	r3, [r6, #0]
 8004cca:	781b      	ldrb	r3, [r3, #0]
 8004ccc:	2b49      	cmp	r3, #73	; 0x49
 8004cce:	d071      	beq.n	8004db4 <_scanf_float+0x13c>
 8004cd0:	d84d      	bhi.n	8004d6e <_scanf_float+0xf6>
 8004cd2:	2b39      	cmp	r3, #57	; 0x39
 8004cd4:	d840      	bhi.n	8004d58 <_scanf_float+0xe0>
 8004cd6:	2b31      	cmp	r3, #49	; 0x31
 8004cd8:	f080 8088 	bcs.w	8004dec <_scanf_float+0x174>
 8004cdc:	2b2d      	cmp	r3, #45	; 0x2d
 8004cde:	f000 8090 	beq.w	8004e02 <_scanf_float+0x18a>
 8004ce2:	d815      	bhi.n	8004d10 <_scanf_float+0x98>
 8004ce4:	2b2b      	cmp	r3, #43	; 0x2b
 8004ce6:	f000 808c 	beq.w	8004e02 <_scanf_float+0x18a>
 8004cea:	f1b9 0f00 	cmp.w	r9, #0
 8004cee:	d003      	beq.n	8004cf8 <_scanf_float+0x80>
 8004cf0:	6823      	ldr	r3, [r4, #0]
 8004cf2:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004cf6:	6023      	str	r3, [r4, #0]
 8004cf8:	3a01      	subs	r2, #1
 8004cfa:	2a01      	cmp	r2, #1
 8004cfc:	f200 80ea 	bhi.w	8004ed4 <_scanf_float+0x25c>
 8004d00:	4545      	cmp	r5, r8
 8004d02:	f200 80dc 	bhi.w	8004ebe <_scanf_float+0x246>
 8004d06:	2601      	movs	r6, #1
 8004d08:	4630      	mov	r0, r6
 8004d0a:	b007      	add	sp, #28
 8004d0c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004d10:	2b2e      	cmp	r3, #46	; 0x2e
 8004d12:	f000 809f 	beq.w	8004e54 <_scanf_float+0x1dc>
 8004d16:	2b30      	cmp	r3, #48	; 0x30
 8004d18:	d1e7      	bne.n	8004cea <_scanf_float+0x72>
 8004d1a:	6820      	ldr	r0, [r4, #0]
 8004d1c:	f410 7f80 	tst.w	r0, #256	; 0x100
 8004d20:	d064      	beq.n	8004dec <_scanf_float+0x174>
 8004d22:	9b01      	ldr	r3, [sp, #4]
 8004d24:	f020 0080 	bic.w	r0, r0, #128	; 0x80
 8004d28:	6020      	str	r0, [r4, #0]
 8004d2a:	f109 0901 	add.w	r9, r9, #1
 8004d2e:	b11b      	cbz	r3, 8004d38 <_scanf_float+0xc0>
 8004d30:	3b01      	subs	r3, #1
 8004d32:	3101      	adds	r1, #1
 8004d34:	9301      	str	r3, [sp, #4]
 8004d36:	60a1      	str	r1, [r4, #8]
 8004d38:	68a3      	ldr	r3, [r4, #8]
 8004d3a:	3b01      	subs	r3, #1
 8004d3c:	60a3      	str	r3, [r4, #8]
 8004d3e:	6923      	ldr	r3, [r4, #16]
 8004d40:	3301      	adds	r3, #1
 8004d42:	6123      	str	r3, [r4, #16]
 8004d44:	6873      	ldr	r3, [r6, #4]
 8004d46:	3b01      	subs	r3, #1
 8004d48:	2b00      	cmp	r3, #0
 8004d4a:	6073      	str	r3, [r6, #4]
 8004d4c:	f340 80ac 	ble.w	8004ea8 <_scanf_float+0x230>
 8004d50:	6833      	ldr	r3, [r6, #0]
 8004d52:	3301      	adds	r3, #1
 8004d54:	6033      	str	r3, [r6, #0]
 8004d56:	e7b5      	b.n	8004cc4 <_scanf_float+0x4c>
 8004d58:	2b45      	cmp	r3, #69	; 0x45
 8004d5a:	f000 8085 	beq.w	8004e68 <_scanf_float+0x1f0>
 8004d5e:	2b46      	cmp	r3, #70	; 0x46
 8004d60:	d06a      	beq.n	8004e38 <_scanf_float+0x1c0>
 8004d62:	2b41      	cmp	r3, #65	; 0x41
 8004d64:	d1c1      	bne.n	8004cea <_scanf_float+0x72>
 8004d66:	2a01      	cmp	r2, #1
 8004d68:	d1bf      	bne.n	8004cea <_scanf_float+0x72>
 8004d6a:	2202      	movs	r2, #2
 8004d6c:	e046      	b.n	8004dfc <_scanf_float+0x184>
 8004d6e:	2b65      	cmp	r3, #101	; 0x65
 8004d70:	d07a      	beq.n	8004e68 <_scanf_float+0x1f0>
 8004d72:	d818      	bhi.n	8004da6 <_scanf_float+0x12e>
 8004d74:	2b54      	cmp	r3, #84	; 0x54
 8004d76:	d066      	beq.n	8004e46 <_scanf_float+0x1ce>
 8004d78:	d811      	bhi.n	8004d9e <_scanf_float+0x126>
 8004d7a:	2b4e      	cmp	r3, #78	; 0x4e
 8004d7c:	d1b5      	bne.n	8004cea <_scanf_float+0x72>
 8004d7e:	2a00      	cmp	r2, #0
 8004d80:	d146      	bne.n	8004e10 <_scanf_float+0x198>
 8004d82:	f1b9 0f00 	cmp.w	r9, #0
 8004d86:	d145      	bne.n	8004e14 <_scanf_float+0x19c>
 8004d88:	6821      	ldr	r1, [r4, #0]
 8004d8a:	f401 60e0 	and.w	r0, r1, #1792	; 0x700
 8004d8e:	f5b0 6fe0 	cmp.w	r0, #1792	; 0x700
 8004d92:	d13f      	bne.n	8004e14 <_scanf_float+0x19c>
 8004d94:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 8004d98:	6021      	str	r1, [r4, #0]
 8004d9a:	2201      	movs	r2, #1
 8004d9c:	e02e      	b.n	8004dfc <_scanf_float+0x184>
 8004d9e:	2b59      	cmp	r3, #89	; 0x59
 8004da0:	d01e      	beq.n	8004de0 <_scanf_float+0x168>
 8004da2:	2b61      	cmp	r3, #97	; 0x61
 8004da4:	e7de      	b.n	8004d64 <_scanf_float+0xec>
 8004da6:	2b6e      	cmp	r3, #110	; 0x6e
 8004da8:	d0e9      	beq.n	8004d7e <_scanf_float+0x106>
 8004daa:	d815      	bhi.n	8004dd8 <_scanf_float+0x160>
 8004dac:	2b66      	cmp	r3, #102	; 0x66
 8004dae:	d043      	beq.n	8004e38 <_scanf_float+0x1c0>
 8004db0:	2b69      	cmp	r3, #105	; 0x69
 8004db2:	d19a      	bne.n	8004cea <_scanf_float+0x72>
 8004db4:	f1bb 0f00 	cmp.w	fp, #0
 8004db8:	d138      	bne.n	8004e2c <_scanf_float+0x1b4>
 8004dba:	f1b9 0f00 	cmp.w	r9, #0
 8004dbe:	d197      	bne.n	8004cf0 <_scanf_float+0x78>
 8004dc0:	6821      	ldr	r1, [r4, #0]
 8004dc2:	f401 60e0 	and.w	r0, r1, #1792	; 0x700
 8004dc6:	f5b0 6fe0 	cmp.w	r0, #1792	; 0x700
 8004dca:	d195      	bne.n	8004cf8 <_scanf_float+0x80>
 8004dcc:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 8004dd0:	6021      	str	r1, [r4, #0]
 8004dd2:	f04f 0b01 	mov.w	fp, #1
 8004dd6:	e011      	b.n	8004dfc <_scanf_float+0x184>
 8004dd8:	2b74      	cmp	r3, #116	; 0x74
 8004dda:	d034      	beq.n	8004e46 <_scanf_float+0x1ce>
 8004ddc:	2b79      	cmp	r3, #121	; 0x79
 8004dde:	d184      	bne.n	8004cea <_scanf_float+0x72>
 8004de0:	f1bb 0f07 	cmp.w	fp, #7
 8004de4:	d181      	bne.n	8004cea <_scanf_float+0x72>
 8004de6:	f04f 0b08 	mov.w	fp, #8
 8004dea:	e007      	b.n	8004dfc <_scanf_float+0x184>
 8004dec:	eb12 0f0b 	cmn.w	r2, fp
 8004df0:	f47f af7b 	bne.w	8004cea <_scanf_float+0x72>
 8004df4:	6821      	ldr	r1, [r4, #0]
 8004df6:	f421 71c0 	bic.w	r1, r1, #384	; 0x180
 8004dfa:	6021      	str	r1, [r4, #0]
 8004dfc:	702b      	strb	r3, [r5, #0]
 8004dfe:	3501      	adds	r5, #1
 8004e00:	e79a      	b.n	8004d38 <_scanf_float+0xc0>
 8004e02:	6821      	ldr	r1, [r4, #0]
 8004e04:	0608      	lsls	r0, r1, #24
 8004e06:	f57f af70 	bpl.w	8004cea <_scanf_float+0x72>
 8004e0a:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8004e0e:	e7f4      	b.n	8004dfa <_scanf_float+0x182>
 8004e10:	2a02      	cmp	r2, #2
 8004e12:	d047      	beq.n	8004ea4 <_scanf_float+0x22c>
 8004e14:	f1bb 0f01 	cmp.w	fp, #1
 8004e18:	d003      	beq.n	8004e22 <_scanf_float+0x1aa>
 8004e1a:	f1bb 0f04 	cmp.w	fp, #4
 8004e1e:	f47f af64 	bne.w	8004cea <_scanf_float+0x72>
 8004e22:	f10b 0b01 	add.w	fp, fp, #1
 8004e26:	fa5f fb8b 	uxtb.w	fp, fp
 8004e2a:	e7e7      	b.n	8004dfc <_scanf_float+0x184>
 8004e2c:	f1bb 0f03 	cmp.w	fp, #3
 8004e30:	d0f7      	beq.n	8004e22 <_scanf_float+0x1aa>
 8004e32:	f1bb 0f05 	cmp.w	fp, #5
 8004e36:	e7f2      	b.n	8004e1e <_scanf_float+0x1a6>
 8004e38:	f1bb 0f02 	cmp.w	fp, #2
 8004e3c:	f47f af55 	bne.w	8004cea <_scanf_float+0x72>
 8004e40:	f04f 0b03 	mov.w	fp, #3
 8004e44:	e7da      	b.n	8004dfc <_scanf_float+0x184>
 8004e46:	f1bb 0f06 	cmp.w	fp, #6
 8004e4a:	f47f af4e 	bne.w	8004cea <_scanf_float+0x72>
 8004e4e:	f04f 0b07 	mov.w	fp, #7
 8004e52:	e7d3      	b.n	8004dfc <_scanf_float+0x184>
 8004e54:	6821      	ldr	r1, [r4, #0]
 8004e56:	0588      	lsls	r0, r1, #22
 8004e58:	f57f af47 	bpl.w	8004cea <_scanf_float+0x72>
 8004e5c:	f421 7120 	bic.w	r1, r1, #640	; 0x280
 8004e60:	6021      	str	r1, [r4, #0]
 8004e62:	f8cd 9008 	str.w	r9, [sp, #8]
 8004e66:	e7c9      	b.n	8004dfc <_scanf_float+0x184>
 8004e68:	6821      	ldr	r1, [r4, #0]
 8004e6a:	f401 60a0 	and.w	r0, r1, #1280	; 0x500
 8004e6e:	f5b0 6f80 	cmp.w	r0, #1024	; 0x400
 8004e72:	d006      	beq.n	8004e82 <_scanf_float+0x20a>
 8004e74:	0548      	lsls	r0, r1, #21
 8004e76:	f57f af38 	bpl.w	8004cea <_scanf_float+0x72>
 8004e7a:	f1b9 0f00 	cmp.w	r9, #0
 8004e7e:	f43f af3b 	beq.w	8004cf8 <_scanf_float+0x80>
 8004e82:	0588      	lsls	r0, r1, #22
 8004e84:	bf58      	it	pl
 8004e86:	9802      	ldrpl	r0, [sp, #8]
 8004e88:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 8004e8c:	bf58      	it	pl
 8004e8e:	eba9 0000 	subpl.w	r0, r9, r0
 8004e92:	f441 71c0 	orr.w	r1, r1, #384	; 0x180
 8004e96:	bf58      	it	pl
 8004e98:	e9cd 0503 	strdpl	r0, r5, [sp, #12]
 8004e9c:	6021      	str	r1, [r4, #0]
 8004e9e:	f04f 0900 	mov.w	r9, #0
 8004ea2:	e7ab      	b.n	8004dfc <_scanf_float+0x184>
 8004ea4:	2203      	movs	r2, #3
 8004ea6:	e7a9      	b.n	8004dfc <_scanf_float+0x184>
 8004ea8:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8004eac:	4631      	mov	r1, r6
 8004eae:	4638      	mov	r0, r7
 8004eb0:	9205      	str	r2, [sp, #20]
 8004eb2:	4798      	blx	r3
 8004eb4:	9a05      	ldr	r2, [sp, #20]
 8004eb6:	2800      	cmp	r0, #0
 8004eb8:	f43f af04 	beq.w	8004cc4 <_scanf_float+0x4c>
 8004ebc:	e715      	b.n	8004cea <_scanf_float+0x72>
 8004ebe:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8004ec2:	4632      	mov	r2, r6
 8004ec4:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 8004ec8:	4638      	mov	r0, r7
 8004eca:	4798      	blx	r3
 8004ecc:	6923      	ldr	r3, [r4, #16]
 8004ece:	3b01      	subs	r3, #1
 8004ed0:	6123      	str	r3, [r4, #16]
 8004ed2:	e715      	b.n	8004d00 <_scanf_float+0x88>
 8004ed4:	f10b 33ff 	add.w	r3, fp, #4294967295
 8004ed8:	2b06      	cmp	r3, #6
 8004eda:	d80a      	bhi.n	8004ef2 <_scanf_float+0x27a>
 8004edc:	f1bb 0f02 	cmp.w	fp, #2
 8004ee0:	d967      	bls.n	8004fb2 <_scanf_float+0x33a>
 8004ee2:	f1ab 0b03 	sub.w	fp, fp, #3
 8004ee6:	fa5f fb8b 	uxtb.w	fp, fp
 8004eea:	eba5 0b0b 	sub.w	fp, r5, fp
 8004eee:	455d      	cmp	r5, fp
 8004ef0:	d14a      	bne.n	8004f88 <_scanf_float+0x310>
 8004ef2:	6823      	ldr	r3, [r4, #0]
 8004ef4:	05da      	lsls	r2, r3, #23
 8004ef6:	d51f      	bpl.n	8004f38 <_scanf_float+0x2c0>
 8004ef8:	055b      	lsls	r3, r3, #21
 8004efa:	d467      	bmi.n	8004fcc <_scanf_float+0x354>
 8004efc:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 8004f00:	6923      	ldr	r3, [r4, #16]
 8004f02:	2965      	cmp	r1, #101	; 0x65
 8004f04:	f103 33ff 	add.w	r3, r3, #4294967295
 8004f08:	f105 3bff 	add.w	fp, r5, #4294967295
 8004f0c:	6123      	str	r3, [r4, #16]
 8004f0e:	d00d      	beq.n	8004f2c <_scanf_float+0x2b4>
 8004f10:	2945      	cmp	r1, #69	; 0x45
 8004f12:	d00b      	beq.n	8004f2c <_scanf_float+0x2b4>
 8004f14:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8004f18:	4632      	mov	r2, r6
 8004f1a:	4638      	mov	r0, r7
 8004f1c:	4798      	blx	r3
 8004f1e:	6923      	ldr	r3, [r4, #16]
 8004f20:	f815 1c02 	ldrb.w	r1, [r5, #-2]
 8004f24:	3b01      	subs	r3, #1
 8004f26:	f1a5 0b02 	sub.w	fp, r5, #2
 8004f2a:	6123      	str	r3, [r4, #16]
 8004f2c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8004f30:	4632      	mov	r2, r6
 8004f32:	4638      	mov	r0, r7
 8004f34:	4798      	blx	r3
 8004f36:	465d      	mov	r5, fp
 8004f38:	6826      	ldr	r6, [r4, #0]
 8004f3a:	f016 0610 	ands.w	r6, r6, #16
 8004f3e:	d176      	bne.n	800502e <_scanf_float+0x3b6>
 8004f40:	702e      	strb	r6, [r5, #0]
 8004f42:	6823      	ldr	r3, [r4, #0]
 8004f44:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8004f48:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004f4c:	d141      	bne.n	8004fd2 <_scanf_float+0x35a>
 8004f4e:	9b02      	ldr	r3, [sp, #8]
 8004f50:	eba9 0303 	sub.w	r3, r9, r3
 8004f54:	425a      	negs	r2, r3
 8004f56:	2b00      	cmp	r3, #0
 8004f58:	d148      	bne.n	8004fec <_scanf_float+0x374>
 8004f5a:	4641      	mov	r1, r8
 8004f5c:	2200      	movs	r2, #0
 8004f5e:	4638      	mov	r0, r7
 8004f60:	f000 feca 	bl	8005cf8 <_strtod_r>
 8004f64:	6825      	ldr	r5, [r4, #0]
 8004f66:	4680      	mov	r8, r0
 8004f68:	f015 0f02 	tst.w	r5, #2
 8004f6c:	4689      	mov	r9, r1
 8004f6e:	f8da 3000 	ldr.w	r3, [sl]
 8004f72:	d046      	beq.n	8005002 <_scanf_float+0x38a>
 8004f74:	1d1a      	adds	r2, r3, #4
 8004f76:	f8ca 2000 	str.w	r2, [sl]
 8004f7a:	681b      	ldr	r3, [r3, #0]
 8004f7c:	e9c3 8900 	strd	r8, r9, [r3]
 8004f80:	68e3      	ldr	r3, [r4, #12]
 8004f82:	3301      	adds	r3, #1
 8004f84:	60e3      	str	r3, [r4, #12]
 8004f86:	e6bf      	b.n	8004d08 <_scanf_float+0x90>
 8004f88:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8004f8c:	4632      	mov	r2, r6
 8004f8e:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 8004f92:	4638      	mov	r0, r7
 8004f94:	4798      	blx	r3
 8004f96:	6923      	ldr	r3, [r4, #16]
 8004f98:	3b01      	subs	r3, #1
 8004f9a:	6123      	str	r3, [r4, #16]
 8004f9c:	e7a7      	b.n	8004eee <_scanf_float+0x276>
 8004f9e:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8004fa2:	4632      	mov	r2, r6
 8004fa4:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 8004fa8:	4638      	mov	r0, r7
 8004faa:	4798      	blx	r3
 8004fac:	6923      	ldr	r3, [r4, #16]
 8004fae:	3b01      	subs	r3, #1
 8004fb0:	6123      	str	r3, [r4, #16]
 8004fb2:	4545      	cmp	r5, r8
 8004fb4:	d8f3      	bhi.n	8004f9e <_scanf_float+0x326>
 8004fb6:	e6a6      	b.n	8004d06 <_scanf_float+0x8e>
 8004fb8:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8004fbc:	4632      	mov	r2, r6
 8004fbe:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 8004fc2:	4638      	mov	r0, r7
 8004fc4:	4798      	blx	r3
 8004fc6:	6923      	ldr	r3, [r4, #16]
 8004fc8:	3b01      	subs	r3, #1
 8004fca:	6123      	str	r3, [r4, #16]
 8004fcc:	4545      	cmp	r5, r8
 8004fce:	d8f3      	bhi.n	8004fb8 <_scanf_float+0x340>
 8004fd0:	e699      	b.n	8004d06 <_scanf_float+0x8e>
 8004fd2:	9b03      	ldr	r3, [sp, #12]
 8004fd4:	2b00      	cmp	r3, #0
 8004fd6:	d0c0      	beq.n	8004f5a <_scanf_float+0x2e2>
 8004fd8:	9904      	ldr	r1, [sp, #16]
 8004fda:	230a      	movs	r3, #10
 8004fdc:	4632      	mov	r2, r6
 8004fde:	3101      	adds	r1, #1
 8004fe0:	4638      	mov	r0, r7
 8004fe2:	f000 ff15 	bl	8005e10 <_strtol_r>
 8004fe6:	9b03      	ldr	r3, [sp, #12]
 8004fe8:	9d04      	ldr	r5, [sp, #16]
 8004fea:	1ac2      	subs	r2, r0, r3
 8004fec:	f204 136f 	addw	r3, r4, #367	; 0x16f
 8004ff0:	429d      	cmp	r5, r3
 8004ff2:	bf28      	it	cs
 8004ff4:	f504 75b7 	addcs.w	r5, r4, #366	; 0x16e
 8004ff8:	490e      	ldr	r1, [pc, #56]	; (8005034 <_scanf_float+0x3bc>)
 8004ffa:	4628      	mov	r0, r5
 8004ffc:	f000 f838 	bl	8005070 <siprintf>
 8005000:	e7ab      	b.n	8004f5a <_scanf_float+0x2e2>
 8005002:	1d1f      	adds	r7, r3, #4
 8005004:	f015 0504 	ands.w	r5, r5, #4
 8005008:	f8ca 7000 	str.w	r7, [sl]
 800500c:	d1b5      	bne.n	8004f7a <_scanf_float+0x302>
 800500e:	681f      	ldr	r7, [r3, #0]
 8005010:	4602      	mov	r2, r0
 8005012:	460b      	mov	r3, r1
 8005014:	f7fb fcfa 	bl	8000a0c <__aeabi_dcmpun>
 8005018:	b120      	cbz	r0, 8005024 <_scanf_float+0x3ac>
 800501a:	4628      	mov	r0, r5
 800501c:	f000 f824 	bl	8005068 <nanf>
 8005020:	6038      	str	r0, [r7, #0]
 8005022:	e7ad      	b.n	8004f80 <_scanf_float+0x308>
 8005024:	4640      	mov	r0, r8
 8005026:	4649      	mov	r1, r9
 8005028:	f7fb fd4e 	bl	8000ac8 <__aeabi_d2f>
 800502c:	e7f8      	b.n	8005020 <_scanf_float+0x3a8>
 800502e:	2600      	movs	r6, #0
 8005030:	e66a      	b.n	8004d08 <_scanf_float+0x90>
 8005032:	bf00      	nop
 8005034:	0800883c 	.word	0x0800883c

08005038 <iprintf>:
 8005038:	b40f      	push	{r0, r1, r2, r3}
 800503a:	4b0a      	ldr	r3, [pc, #40]	; (8005064 <iprintf+0x2c>)
 800503c:	b513      	push	{r0, r1, r4, lr}
 800503e:	681c      	ldr	r4, [r3, #0]
 8005040:	b124      	cbz	r4, 800504c <iprintf+0x14>
 8005042:	69a3      	ldr	r3, [r4, #24]
 8005044:	b913      	cbnz	r3, 800504c <iprintf+0x14>
 8005046:	4620      	mov	r0, r4
 8005048:	f001 fd76 	bl	8006b38 <__sinit>
 800504c:	ab05      	add	r3, sp, #20
 800504e:	9a04      	ldr	r2, [sp, #16]
 8005050:	68a1      	ldr	r1, [r4, #8]
 8005052:	4620      	mov	r0, r4
 8005054:	9301      	str	r3, [sp, #4]
 8005056:	f002 ff8f 	bl	8007f78 <_vfiprintf_r>
 800505a:	b002      	add	sp, #8
 800505c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005060:	b004      	add	sp, #16
 8005062:	4770      	bx	lr
 8005064:	20000014 	.word	0x20000014

08005068 <nanf>:
 8005068:	4800      	ldr	r0, [pc, #0]	; (800506c <nanf+0x4>)
 800506a:	4770      	bx	lr
 800506c:	7fc00000 	.word	0x7fc00000

08005070 <siprintf>:
 8005070:	b40e      	push	{r1, r2, r3}
 8005072:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8005076:	b500      	push	{lr}
 8005078:	b09c      	sub	sp, #112	; 0x70
 800507a:	ab1d      	add	r3, sp, #116	; 0x74
 800507c:	9002      	str	r0, [sp, #8]
 800507e:	9006      	str	r0, [sp, #24]
 8005080:	9107      	str	r1, [sp, #28]
 8005082:	9104      	str	r1, [sp, #16]
 8005084:	4808      	ldr	r0, [pc, #32]	; (80050a8 <siprintf+0x38>)
 8005086:	4909      	ldr	r1, [pc, #36]	; (80050ac <siprintf+0x3c>)
 8005088:	f853 2b04 	ldr.w	r2, [r3], #4
 800508c:	9105      	str	r1, [sp, #20]
 800508e:	6800      	ldr	r0, [r0, #0]
 8005090:	a902      	add	r1, sp, #8
 8005092:	9301      	str	r3, [sp, #4]
 8005094:	f002 fe50 	bl	8007d38 <_svfiprintf_r>
 8005098:	2200      	movs	r2, #0
 800509a:	9b02      	ldr	r3, [sp, #8]
 800509c:	701a      	strb	r2, [r3, #0]
 800509e:	b01c      	add	sp, #112	; 0x70
 80050a0:	f85d eb04 	ldr.w	lr, [sp], #4
 80050a4:	b003      	add	sp, #12
 80050a6:	4770      	bx	lr
 80050a8:	20000014 	.word	0x20000014
 80050ac:	ffff0208 	.word	0xffff0208

080050b0 <sulp>:
 80050b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80050b4:	460f      	mov	r7, r1
 80050b6:	4690      	mov	r8, r2
 80050b8:	f002 fc02 	bl	80078c0 <__ulp>
 80050bc:	4604      	mov	r4, r0
 80050be:	460d      	mov	r5, r1
 80050c0:	f1b8 0f00 	cmp.w	r8, #0
 80050c4:	d011      	beq.n	80050ea <sulp+0x3a>
 80050c6:	f3c7 530a 	ubfx	r3, r7, #20, #11
 80050ca:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 80050ce:	2b00      	cmp	r3, #0
 80050d0:	dd0b      	ble.n	80050ea <sulp+0x3a>
 80050d2:	2400      	movs	r4, #0
 80050d4:	051b      	lsls	r3, r3, #20
 80050d6:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 80050da:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 80050de:	4622      	mov	r2, r4
 80050e0:	462b      	mov	r3, r5
 80050e2:	f7fb f9f9 	bl	80004d8 <__aeabi_dmul>
 80050e6:	4604      	mov	r4, r0
 80050e8:	460d      	mov	r5, r1
 80050ea:	4620      	mov	r0, r4
 80050ec:	4629      	mov	r1, r5
 80050ee:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80050f2:	0000      	movs	r0, r0
 80050f4:	0000      	movs	r0, r0
	...

080050f8 <_strtod_l>:
 80050f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80050fc:	461f      	mov	r7, r3
 80050fe:	2300      	movs	r3, #0
 8005100:	b0a1      	sub	sp, #132	; 0x84
 8005102:	4683      	mov	fp, r0
 8005104:	4638      	mov	r0, r7
 8005106:	460e      	mov	r6, r1
 8005108:	9217      	str	r2, [sp, #92]	; 0x5c
 800510a:	931c      	str	r3, [sp, #112]	; 0x70
 800510c:	f002 f8c9 	bl	80072a2 <__localeconv_l>
 8005110:	4680      	mov	r8, r0
 8005112:	6800      	ldr	r0, [r0, #0]
 8005114:	f7fb f81c 	bl	8000150 <strlen>
 8005118:	f04f 0900 	mov.w	r9, #0
 800511c:	4604      	mov	r4, r0
 800511e:	f04f 0a00 	mov.w	sl, #0
 8005122:	961b      	str	r6, [sp, #108]	; 0x6c
 8005124:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8005126:	781a      	ldrb	r2, [r3, #0]
 8005128:	2a0d      	cmp	r2, #13
 800512a:	d832      	bhi.n	8005192 <_strtod_l+0x9a>
 800512c:	2a09      	cmp	r2, #9
 800512e:	d236      	bcs.n	800519e <_strtod_l+0xa6>
 8005130:	2a00      	cmp	r2, #0
 8005132:	d03e      	beq.n	80051b2 <_strtod_l+0xba>
 8005134:	2300      	movs	r3, #0
 8005136:	930d      	str	r3, [sp, #52]	; 0x34
 8005138:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 800513a:	782b      	ldrb	r3, [r5, #0]
 800513c:	2b30      	cmp	r3, #48	; 0x30
 800513e:	f040 80ac 	bne.w	800529a <_strtod_l+0x1a2>
 8005142:	786b      	ldrb	r3, [r5, #1]
 8005144:	2b58      	cmp	r3, #88	; 0x58
 8005146:	d001      	beq.n	800514c <_strtod_l+0x54>
 8005148:	2b78      	cmp	r3, #120	; 0x78
 800514a:	d167      	bne.n	800521c <_strtod_l+0x124>
 800514c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800514e:	9702      	str	r7, [sp, #8]
 8005150:	9301      	str	r3, [sp, #4]
 8005152:	ab1c      	add	r3, sp, #112	; 0x70
 8005154:	9300      	str	r3, [sp, #0]
 8005156:	4a89      	ldr	r2, [pc, #548]	; (800537c <_strtod_l+0x284>)
 8005158:	ab1d      	add	r3, sp, #116	; 0x74
 800515a:	a91b      	add	r1, sp, #108	; 0x6c
 800515c:	4658      	mov	r0, fp
 800515e:	f001 fdc5 	bl	8006cec <__gethex>
 8005162:	f010 0407 	ands.w	r4, r0, #7
 8005166:	4606      	mov	r6, r0
 8005168:	d005      	beq.n	8005176 <_strtod_l+0x7e>
 800516a:	2c06      	cmp	r4, #6
 800516c:	d12b      	bne.n	80051c6 <_strtod_l+0xce>
 800516e:	2300      	movs	r3, #0
 8005170:	3501      	adds	r5, #1
 8005172:	951b      	str	r5, [sp, #108]	; 0x6c
 8005174:	930d      	str	r3, [sp, #52]	; 0x34
 8005176:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8005178:	2b00      	cmp	r3, #0
 800517a:	f040 85a6 	bne.w	8005cca <_strtod_l+0xbd2>
 800517e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005180:	b1e3      	cbz	r3, 80051bc <_strtod_l+0xc4>
 8005182:	464a      	mov	r2, r9
 8005184:	f10a 4300 	add.w	r3, sl, #2147483648	; 0x80000000
 8005188:	4610      	mov	r0, r2
 800518a:	4619      	mov	r1, r3
 800518c:	b021      	add	sp, #132	; 0x84
 800518e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005192:	2a2b      	cmp	r2, #43	; 0x2b
 8005194:	d015      	beq.n	80051c2 <_strtod_l+0xca>
 8005196:	2a2d      	cmp	r2, #45	; 0x2d
 8005198:	d004      	beq.n	80051a4 <_strtod_l+0xac>
 800519a:	2a20      	cmp	r2, #32
 800519c:	d1ca      	bne.n	8005134 <_strtod_l+0x3c>
 800519e:	3301      	adds	r3, #1
 80051a0:	931b      	str	r3, [sp, #108]	; 0x6c
 80051a2:	e7bf      	b.n	8005124 <_strtod_l+0x2c>
 80051a4:	2201      	movs	r2, #1
 80051a6:	920d      	str	r2, [sp, #52]	; 0x34
 80051a8:	1c5a      	adds	r2, r3, #1
 80051aa:	921b      	str	r2, [sp, #108]	; 0x6c
 80051ac:	785b      	ldrb	r3, [r3, #1]
 80051ae:	2b00      	cmp	r3, #0
 80051b0:	d1c2      	bne.n	8005138 <_strtod_l+0x40>
 80051b2:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80051b4:	961b      	str	r6, [sp, #108]	; 0x6c
 80051b6:	2b00      	cmp	r3, #0
 80051b8:	f040 8585 	bne.w	8005cc6 <_strtod_l+0xbce>
 80051bc:	464a      	mov	r2, r9
 80051be:	4653      	mov	r3, sl
 80051c0:	e7e2      	b.n	8005188 <_strtod_l+0x90>
 80051c2:	2200      	movs	r2, #0
 80051c4:	e7ef      	b.n	80051a6 <_strtod_l+0xae>
 80051c6:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 80051c8:	b13a      	cbz	r2, 80051da <_strtod_l+0xe2>
 80051ca:	2135      	movs	r1, #53	; 0x35
 80051cc:	a81e      	add	r0, sp, #120	; 0x78
 80051ce:	f002 fc6a 	bl	8007aa6 <__copybits>
 80051d2:	991c      	ldr	r1, [sp, #112]	; 0x70
 80051d4:	4658      	mov	r0, fp
 80051d6:	f002 f8dc 	bl	8007392 <_Bfree>
 80051da:	3c01      	subs	r4, #1
 80051dc:	2c04      	cmp	r4, #4
 80051de:	d806      	bhi.n	80051ee <_strtod_l+0xf6>
 80051e0:	e8df f004 	tbb	[pc, r4]
 80051e4:	1714030a 	.word	0x1714030a
 80051e8:	0a          	.byte	0x0a
 80051e9:	00          	.byte	0x00
 80051ea:	e9dd 9a1e 	ldrd	r9, sl, [sp, #120]	; 0x78
 80051ee:	0731      	lsls	r1, r6, #28
 80051f0:	d5c1      	bpl.n	8005176 <_strtod_l+0x7e>
 80051f2:	f04a 4a00 	orr.w	sl, sl, #2147483648	; 0x80000000
 80051f6:	e7be      	b.n	8005176 <_strtod_l+0x7e>
 80051f8:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 80051fa:	e9dd 931e 	ldrd	r9, r3, [sp, #120]	; 0x78
 80051fe:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8005202:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8005206:	ea43 5a02 	orr.w	sl, r3, r2, lsl #20
 800520a:	e7f0      	b.n	80051ee <_strtod_l+0xf6>
 800520c:	f8df a170 	ldr.w	sl, [pc, #368]	; 8005380 <_strtod_l+0x288>
 8005210:	e7ed      	b.n	80051ee <_strtod_l+0xf6>
 8005212:	f06f 4a00 	mvn.w	sl, #2147483648	; 0x80000000
 8005216:	f04f 39ff 	mov.w	r9, #4294967295
 800521a:	e7e8      	b.n	80051ee <_strtod_l+0xf6>
 800521c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800521e:	1c5a      	adds	r2, r3, #1
 8005220:	921b      	str	r2, [sp, #108]	; 0x6c
 8005222:	785b      	ldrb	r3, [r3, #1]
 8005224:	2b30      	cmp	r3, #48	; 0x30
 8005226:	d0f9      	beq.n	800521c <_strtod_l+0x124>
 8005228:	2b00      	cmp	r3, #0
 800522a:	d0a4      	beq.n	8005176 <_strtod_l+0x7e>
 800522c:	2301      	movs	r3, #1
 800522e:	2500      	movs	r5, #0
 8005230:	220a      	movs	r2, #10
 8005232:	9307      	str	r3, [sp, #28]
 8005234:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8005236:	9506      	str	r5, [sp, #24]
 8005238:	9308      	str	r3, [sp, #32]
 800523a:	9504      	str	r5, [sp, #16]
 800523c:	981b      	ldr	r0, [sp, #108]	; 0x6c
 800523e:	7807      	ldrb	r7, [r0, #0]
 8005240:	f1a7 0330 	sub.w	r3, r7, #48	; 0x30
 8005244:	b2d9      	uxtb	r1, r3
 8005246:	2909      	cmp	r1, #9
 8005248:	d929      	bls.n	800529e <_strtod_l+0x1a6>
 800524a:	4622      	mov	r2, r4
 800524c:	f8d8 1000 	ldr.w	r1, [r8]
 8005250:	f002 fffb 	bl	800824a <strncmp>
 8005254:	2800      	cmp	r0, #0
 8005256:	d031      	beq.n	80052bc <_strtod_l+0x1c4>
 8005258:	2000      	movs	r0, #0
 800525a:	463b      	mov	r3, r7
 800525c:	4602      	mov	r2, r0
 800525e:	9c04      	ldr	r4, [sp, #16]
 8005260:	9005      	str	r0, [sp, #20]
 8005262:	2b65      	cmp	r3, #101	; 0x65
 8005264:	d001      	beq.n	800526a <_strtod_l+0x172>
 8005266:	2b45      	cmp	r3, #69	; 0x45
 8005268:	d114      	bne.n	8005294 <_strtod_l+0x19c>
 800526a:	b924      	cbnz	r4, 8005276 <_strtod_l+0x17e>
 800526c:	b910      	cbnz	r0, 8005274 <_strtod_l+0x17c>
 800526e:	9b07      	ldr	r3, [sp, #28]
 8005270:	2b00      	cmp	r3, #0
 8005272:	d09e      	beq.n	80051b2 <_strtod_l+0xba>
 8005274:	2400      	movs	r4, #0
 8005276:	9e1b      	ldr	r6, [sp, #108]	; 0x6c
 8005278:	1c73      	adds	r3, r6, #1
 800527a:	931b      	str	r3, [sp, #108]	; 0x6c
 800527c:	7873      	ldrb	r3, [r6, #1]
 800527e:	2b2b      	cmp	r3, #43	; 0x2b
 8005280:	d078      	beq.n	8005374 <_strtod_l+0x27c>
 8005282:	2b2d      	cmp	r3, #45	; 0x2d
 8005284:	d070      	beq.n	8005368 <_strtod_l+0x270>
 8005286:	f04f 0c00 	mov.w	ip, #0
 800528a:	f1a3 0730 	sub.w	r7, r3, #48	; 0x30
 800528e:	2f09      	cmp	r7, #9
 8005290:	d97c      	bls.n	800538c <_strtod_l+0x294>
 8005292:	961b      	str	r6, [sp, #108]	; 0x6c
 8005294:	f04f 0e00 	mov.w	lr, #0
 8005298:	e09a      	b.n	80053d0 <_strtod_l+0x2d8>
 800529a:	2300      	movs	r3, #0
 800529c:	e7c7      	b.n	800522e <_strtod_l+0x136>
 800529e:	9904      	ldr	r1, [sp, #16]
 80052a0:	3001      	adds	r0, #1
 80052a2:	2908      	cmp	r1, #8
 80052a4:	bfd7      	itett	le
 80052a6:	9906      	ldrle	r1, [sp, #24]
 80052a8:	fb02 3505 	mlagt	r5, r2, r5, r3
 80052ac:	fb02 3301 	mlale	r3, r2, r1, r3
 80052b0:	9306      	strle	r3, [sp, #24]
 80052b2:	9b04      	ldr	r3, [sp, #16]
 80052b4:	901b      	str	r0, [sp, #108]	; 0x6c
 80052b6:	3301      	adds	r3, #1
 80052b8:	9304      	str	r3, [sp, #16]
 80052ba:	e7bf      	b.n	800523c <_strtod_l+0x144>
 80052bc:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80052be:	191a      	adds	r2, r3, r4
 80052c0:	921b      	str	r2, [sp, #108]	; 0x6c
 80052c2:	9a04      	ldr	r2, [sp, #16]
 80052c4:	5d1b      	ldrb	r3, [r3, r4]
 80052c6:	2a00      	cmp	r2, #0
 80052c8:	d037      	beq.n	800533a <_strtod_l+0x242>
 80052ca:	4602      	mov	r2, r0
 80052cc:	9c04      	ldr	r4, [sp, #16]
 80052ce:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 80052d2:	2909      	cmp	r1, #9
 80052d4:	d913      	bls.n	80052fe <_strtod_l+0x206>
 80052d6:	2101      	movs	r1, #1
 80052d8:	9105      	str	r1, [sp, #20]
 80052da:	e7c2      	b.n	8005262 <_strtod_l+0x16a>
 80052dc:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80052de:	3001      	adds	r0, #1
 80052e0:	1c5a      	adds	r2, r3, #1
 80052e2:	921b      	str	r2, [sp, #108]	; 0x6c
 80052e4:	785b      	ldrb	r3, [r3, #1]
 80052e6:	2b30      	cmp	r3, #48	; 0x30
 80052e8:	d0f8      	beq.n	80052dc <_strtod_l+0x1e4>
 80052ea:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 80052ee:	2a08      	cmp	r2, #8
 80052f0:	f200 84f0 	bhi.w	8005cd4 <_strtod_l+0xbdc>
 80052f4:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 80052f6:	9208      	str	r2, [sp, #32]
 80052f8:	4602      	mov	r2, r0
 80052fa:	2000      	movs	r0, #0
 80052fc:	4604      	mov	r4, r0
 80052fe:	f1b3 0e30 	subs.w	lr, r3, #48	; 0x30
 8005302:	f100 0101 	add.w	r1, r0, #1
 8005306:	d012      	beq.n	800532e <_strtod_l+0x236>
 8005308:	440a      	add	r2, r1
 800530a:	270a      	movs	r7, #10
 800530c:	4621      	mov	r1, r4
 800530e:	eb00 0c04 	add.w	ip, r0, r4
 8005312:	458c      	cmp	ip, r1
 8005314:	d113      	bne.n	800533e <_strtod_l+0x246>
 8005316:	1821      	adds	r1, r4, r0
 8005318:	2908      	cmp	r1, #8
 800531a:	f104 0401 	add.w	r4, r4, #1
 800531e:	4404      	add	r4, r0
 8005320:	dc19      	bgt.n	8005356 <_strtod_l+0x25e>
 8005322:	210a      	movs	r1, #10
 8005324:	9b06      	ldr	r3, [sp, #24]
 8005326:	fb01 e303 	mla	r3, r1, r3, lr
 800532a:	9306      	str	r3, [sp, #24]
 800532c:	2100      	movs	r1, #0
 800532e:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8005330:	1c58      	adds	r0, r3, #1
 8005332:	901b      	str	r0, [sp, #108]	; 0x6c
 8005334:	785b      	ldrb	r3, [r3, #1]
 8005336:	4608      	mov	r0, r1
 8005338:	e7c9      	b.n	80052ce <_strtod_l+0x1d6>
 800533a:	9804      	ldr	r0, [sp, #16]
 800533c:	e7d3      	b.n	80052e6 <_strtod_l+0x1ee>
 800533e:	2908      	cmp	r1, #8
 8005340:	f101 0101 	add.w	r1, r1, #1
 8005344:	dc03      	bgt.n	800534e <_strtod_l+0x256>
 8005346:	9b06      	ldr	r3, [sp, #24]
 8005348:	437b      	muls	r3, r7
 800534a:	9306      	str	r3, [sp, #24]
 800534c:	e7e1      	b.n	8005312 <_strtod_l+0x21a>
 800534e:	2910      	cmp	r1, #16
 8005350:	bfd8      	it	le
 8005352:	437d      	mulle	r5, r7
 8005354:	e7dd      	b.n	8005312 <_strtod_l+0x21a>
 8005356:	2c10      	cmp	r4, #16
 8005358:	bfdc      	itt	le
 800535a:	210a      	movle	r1, #10
 800535c:	fb01 e505 	mlale	r5, r1, r5, lr
 8005360:	e7e4      	b.n	800532c <_strtod_l+0x234>
 8005362:	2301      	movs	r3, #1
 8005364:	9305      	str	r3, [sp, #20]
 8005366:	e781      	b.n	800526c <_strtod_l+0x174>
 8005368:	f04f 0c01 	mov.w	ip, #1
 800536c:	1cb3      	adds	r3, r6, #2
 800536e:	931b      	str	r3, [sp, #108]	; 0x6c
 8005370:	78b3      	ldrb	r3, [r6, #2]
 8005372:	e78a      	b.n	800528a <_strtod_l+0x192>
 8005374:	f04f 0c00 	mov.w	ip, #0
 8005378:	e7f8      	b.n	800536c <_strtod_l+0x274>
 800537a:	bf00      	nop
 800537c:	08008844 	.word	0x08008844
 8005380:	7ff00000 	.word	0x7ff00000
 8005384:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8005386:	1c5f      	adds	r7, r3, #1
 8005388:	971b      	str	r7, [sp, #108]	; 0x6c
 800538a:	785b      	ldrb	r3, [r3, #1]
 800538c:	2b30      	cmp	r3, #48	; 0x30
 800538e:	d0f9      	beq.n	8005384 <_strtod_l+0x28c>
 8005390:	f1a3 0731 	sub.w	r7, r3, #49	; 0x31
 8005394:	2f08      	cmp	r7, #8
 8005396:	f63f af7d 	bhi.w	8005294 <_strtod_l+0x19c>
 800539a:	f1a3 0e30 	sub.w	lr, r3, #48	; 0x30
 800539e:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80053a0:	9309      	str	r3, [sp, #36]	; 0x24
 80053a2:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80053a4:	1c5f      	adds	r7, r3, #1
 80053a6:	971b      	str	r7, [sp, #108]	; 0x6c
 80053a8:	785b      	ldrb	r3, [r3, #1]
 80053aa:	f1a3 0830 	sub.w	r8, r3, #48	; 0x30
 80053ae:	f1b8 0f09 	cmp.w	r8, #9
 80053b2:	d937      	bls.n	8005424 <_strtod_l+0x32c>
 80053b4:	9909      	ldr	r1, [sp, #36]	; 0x24
 80053b6:	1a7f      	subs	r7, r7, r1
 80053b8:	2f08      	cmp	r7, #8
 80053ba:	f644 671f 	movw	r7, #19999	; 0x4e1f
 80053be:	dc37      	bgt.n	8005430 <_strtod_l+0x338>
 80053c0:	45be      	cmp	lr, r7
 80053c2:	bfa8      	it	ge
 80053c4:	46be      	movge	lr, r7
 80053c6:	f1bc 0f00 	cmp.w	ip, #0
 80053ca:	d001      	beq.n	80053d0 <_strtod_l+0x2d8>
 80053cc:	f1ce 0e00 	rsb	lr, lr, #0
 80053d0:	2c00      	cmp	r4, #0
 80053d2:	d151      	bne.n	8005478 <_strtod_l+0x380>
 80053d4:	2800      	cmp	r0, #0
 80053d6:	f47f aece 	bne.w	8005176 <_strtod_l+0x7e>
 80053da:	9a07      	ldr	r2, [sp, #28]
 80053dc:	2a00      	cmp	r2, #0
 80053de:	f47f aeca 	bne.w	8005176 <_strtod_l+0x7e>
 80053e2:	9a05      	ldr	r2, [sp, #20]
 80053e4:	2a00      	cmp	r2, #0
 80053e6:	f47f aee4 	bne.w	80051b2 <_strtod_l+0xba>
 80053ea:	2b4e      	cmp	r3, #78	; 0x4e
 80053ec:	d027      	beq.n	800543e <_strtod_l+0x346>
 80053ee:	dc21      	bgt.n	8005434 <_strtod_l+0x33c>
 80053f0:	2b49      	cmp	r3, #73	; 0x49
 80053f2:	f47f aede 	bne.w	80051b2 <_strtod_l+0xba>
 80053f6:	49a4      	ldr	r1, [pc, #656]	; (8005688 <_strtod_l+0x590>)
 80053f8:	a81b      	add	r0, sp, #108	; 0x6c
 80053fa:	f001 feab 	bl	8007154 <__match>
 80053fe:	2800      	cmp	r0, #0
 8005400:	f43f aed7 	beq.w	80051b2 <_strtod_l+0xba>
 8005404:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8005406:	49a1      	ldr	r1, [pc, #644]	; (800568c <_strtod_l+0x594>)
 8005408:	3b01      	subs	r3, #1
 800540a:	a81b      	add	r0, sp, #108	; 0x6c
 800540c:	931b      	str	r3, [sp, #108]	; 0x6c
 800540e:	f001 fea1 	bl	8007154 <__match>
 8005412:	b910      	cbnz	r0, 800541a <_strtod_l+0x322>
 8005414:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8005416:	3301      	adds	r3, #1
 8005418:	931b      	str	r3, [sp, #108]	; 0x6c
 800541a:	f8df a284 	ldr.w	sl, [pc, #644]	; 80056a0 <_strtod_l+0x5a8>
 800541e:	f04f 0900 	mov.w	r9, #0
 8005422:	e6a8      	b.n	8005176 <_strtod_l+0x7e>
 8005424:	210a      	movs	r1, #10
 8005426:	fb01 3e0e 	mla	lr, r1, lr, r3
 800542a:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 800542e:	e7b8      	b.n	80053a2 <_strtod_l+0x2aa>
 8005430:	46be      	mov	lr, r7
 8005432:	e7c8      	b.n	80053c6 <_strtod_l+0x2ce>
 8005434:	2b69      	cmp	r3, #105	; 0x69
 8005436:	d0de      	beq.n	80053f6 <_strtod_l+0x2fe>
 8005438:	2b6e      	cmp	r3, #110	; 0x6e
 800543a:	f47f aeba 	bne.w	80051b2 <_strtod_l+0xba>
 800543e:	4994      	ldr	r1, [pc, #592]	; (8005690 <_strtod_l+0x598>)
 8005440:	a81b      	add	r0, sp, #108	; 0x6c
 8005442:	f001 fe87 	bl	8007154 <__match>
 8005446:	2800      	cmp	r0, #0
 8005448:	f43f aeb3 	beq.w	80051b2 <_strtod_l+0xba>
 800544c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800544e:	781b      	ldrb	r3, [r3, #0]
 8005450:	2b28      	cmp	r3, #40	; 0x28
 8005452:	d10e      	bne.n	8005472 <_strtod_l+0x37a>
 8005454:	aa1e      	add	r2, sp, #120	; 0x78
 8005456:	498f      	ldr	r1, [pc, #572]	; (8005694 <_strtod_l+0x59c>)
 8005458:	a81b      	add	r0, sp, #108	; 0x6c
 800545a:	f001 fe8f 	bl	800717c <__hexnan>
 800545e:	2805      	cmp	r0, #5
 8005460:	d107      	bne.n	8005472 <_strtod_l+0x37a>
 8005462:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8005464:	f8dd 9078 	ldr.w	r9, [sp, #120]	; 0x78
 8005468:	f043 4aff 	orr.w	sl, r3, #2139095040	; 0x7f800000
 800546c:	f44a 0ae0 	orr.w	sl, sl, #7340032	; 0x700000
 8005470:	e681      	b.n	8005176 <_strtod_l+0x7e>
 8005472:	f8df a234 	ldr.w	sl, [pc, #564]	; 80056a8 <_strtod_l+0x5b0>
 8005476:	e7d2      	b.n	800541e <_strtod_l+0x326>
 8005478:	ebae 0302 	sub.w	r3, lr, r2
 800547c:	9307      	str	r3, [sp, #28]
 800547e:	9b04      	ldr	r3, [sp, #16]
 8005480:	9806      	ldr	r0, [sp, #24]
 8005482:	2b00      	cmp	r3, #0
 8005484:	bf08      	it	eq
 8005486:	4623      	moveq	r3, r4
 8005488:	2c10      	cmp	r4, #16
 800548a:	9304      	str	r3, [sp, #16]
 800548c:	46a0      	mov	r8, r4
 800548e:	bfa8      	it	ge
 8005490:	f04f 0810 	movge.w	r8, #16
 8005494:	f7fa ffa6 	bl	80003e4 <__aeabi_ui2d>
 8005498:	2c09      	cmp	r4, #9
 800549a:	4681      	mov	r9, r0
 800549c:	468a      	mov	sl, r1
 800549e:	dc13      	bgt.n	80054c8 <_strtod_l+0x3d0>
 80054a0:	9b07      	ldr	r3, [sp, #28]
 80054a2:	2b00      	cmp	r3, #0
 80054a4:	f43f ae67 	beq.w	8005176 <_strtod_l+0x7e>
 80054a8:	9b07      	ldr	r3, [sp, #28]
 80054aa:	dd7e      	ble.n	80055aa <_strtod_l+0x4b2>
 80054ac:	2b16      	cmp	r3, #22
 80054ae:	dc65      	bgt.n	800557c <_strtod_l+0x484>
 80054b0:	4a79      	ldr	r2, [pc, #484]	; (8005698 <_strtod_l+0x5a0>)
 80054b2:	eb02 0ec3 	add.w	lr, r2, r3, lsl #3
 80054b6:	464a      	mov	r2, r9
 80054b8:	e9de 0100 	ldrd	r0, r1, [lr]
 80054bc:	4653      	mov	r3, sl
 80054be:	f7fb f80b 	bl	80004d8 <__aeabi_dmul>
 80054c2:	4681      	mov	r9, r0
 80054c4:	468a      	mov	sl, r1
 80054c6:	e656      	b.n	8005176 <_strtod_l+0x7e>
 80054c8:	4b73      	ldr	r3, [pc, #460]	; (8005698 <_strtod_l+0x5a0>)
 80054ca:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 80054ce:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 80054d2:	f7fb f801 	bl	80004d8 <__aeabi_dmul>
 80054d6:	4606      	mov	r6, r0
 80054d8:	4628      	mov	r0, r5
 80054da:	460f      	mov	r7, r1
 80054dc:	f7fa ff82 	bl	80003e4 <__aeabi_ui2d>
 80054e0:	4602      	mov	r2, r0
 80054e2:	460b      	mov	r3, r1
 80054e4:	4630      	mov	r0, r6
 80054e6:	4639      	mov	r1, r7
 80054e8:	f7fa fe40 	bl	800016c <__adddf3>
 80054ec:	2c0f      	cmp	r4, #15
 80054ee:	4681      	mov	r9, r0
 80054f0:	468a      	mov	sl, r1
 80054f2:	ddd5      	ble.n	80054a0 <_strtod_l+0x3a8>
 80054f4:	9b07      	ldr	r3, [sp, #28]
 80054f6:	eba4 0808 	sub.w	r8, r4, r8
 80054fa:	4498      	add	r8, r3
 80054fc:	f1b8 0f00 	cmp.w	r8, #0
 8005500:	f340 809a 	ble.w	8005638 <_strtod_l+0x540>
 8005504:	f018 030f 	ands.w	r3, r8, #15
 8005508:	d00a      	beq.n	8005520 <_strtod_l+0x428>
 800550a:	4963      	ldr	r1, [pc, #396]	; (8005698 <_strtod_l+0x5a0>)
 800550c:	464a      	mov	r2, r9
 800550e:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8005512:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005516:	4653      	mov	r3, sl
 8005518:	f7fa ffde 	bl	80004d8 <__aeabi_dmul>
 800551c:	4681      	mov	r9, r0
 800551e:	468a      	mov	sl, r1
 8005520:	f038 080f 	bics.w	r8, r8, #15
 8005524:	d077      	beq.n	8005616 <_strtod_l+0x51e>
 8005526:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 800552a:	dd4b      	ble.n	80055c4 <_strtod_l+0x4cc>
 800552c:	f04f 0800 	mov.w	r8, #0
 8005530:	f8cd 8010 	str.w	r8, [sp, #16]
 8005534:	f8cd 8020 	str.w	r8, [sp, #32]
 8005538:	f8cd 8018 	str.w	r8, [sp, #24]
 800553c:	2322      	movs	r3, #34	; 0x22
 800553e:	f04f 0900 	mov.w	r9, #0
 8005542:	f8df a15c 	ldr.w	sl, [pc, #348]	; 80056a0 <_strtod_l+0x5a8>
 8005546:	f8cb 3000 	str.w	r3, [fp]
 800554a:	9b08      	ldr	r3, [sp, #32]
 800554c:	2b00      	cmp	r3, #0
 800554e:	f43f ae12 	beq.w	8005176 <_strtod_l+0x7e>
 8005552:	991c      	ldr	r1, [sp, #112]	; 0x70
 8005554:	4658      	mov	r0, fp
 8005556:	f001 ff1c 	bl	8007392 <_Bfree>
 800555a:	9906      	ldr	r1, [sp, #24]
 800555c:	4658      	mov	r0, fp
 800555e:	f001 ff18 	bl	8007392 <_Bfree>
 8005562:	9904      	ldr	r1, [sp, #16]
 8005564:	4658      	mov	r0, fp
 8005566:	f001 ff14 	bl	8007392 <_Bfree>
 800556a:	9908      	ldr	r1, [sp, #32]
 800556c:	4658      	mov	r0, fp
 800556e:	f001 ff10 	bl	8007392 <_Bfree>
 8005572:	4641      	mov	r1, r8
 8005574:	4658      	mov	r0, fp
 8005576:	f001 ff0c 	bl	8007392 <_Bfree>
 800557a:	e5fc      	b.n	8005176 <_strtod_l+0x7e>
 800557c:	9a07      	ldr	r2, [sp, #28]
 800557e:	f1c4 0325 	rsb	r3, r4, #37	; 0x25
 8005582:	4293      	cmp	r3, r2
 8005584:	dbb6      	blt.n	80054f4 <_strtod_l+0x3fc>
 8005586:	4d44      	ldr	r5, [pc, #272]	; (8005698 <_strtod_l+0x5a0>)
 8005588:	f1c4 040f 	rsb	r4, r4, #15
 800558c:	eb05 01c4 	add.w	r1, r5, r4, lsl #3
 8005590:	464a      	mov	r2, r9
 8005592:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005596:	4653      	mov	r3, sl
 8005598:	f7fa ff9e 	bl	80004d8 <__aeabi_dmul>
 800559c:	9b07      	ldr	r3, [sp, #28]
 800559e:	1b1c      	subs	r4, r3, r4
 80055a0:	eb05 05c4 	add.w	r5, r5, r4, lsl #3
 80055a4:	e9d5 2300 	ldrd	r2, r3, [r5]
 80055a8:	e789      	b.n	80054be <_strtod_l+0x3c6>
 80055aa:	f113 0f16 	cmn.w	r3, #22
 80055ae:	dba1      	blt.n	80054f4 <_strtod_l+0x3fc>
 80055b0:	4a39      	ldr	r2, [pc, #228]	; (8005698 <_strtod_l+0x5a0>)
 80055b2:	4648      	mov	r0, r9
 80055b4:	eba2 02c3 	sub.w	r2, r2, r3, lsl #3
 80055b8:	e9d2 2300 	ldrd	r2, r3, [r2]
 80055bc:	4651      	mov	r1, sl
 80055be:	f7fb f8b5 	bl	800072c <__aeabi_ddiv>
 80055c2:	e77e      	b.n	80054c2 <_strtod_l+0x3ca>
 80055c4:	2300      	movs	r3, #0
 80055c6:	4648      	mov	r0, r9
 80055c8:	4651      	mov	r1, sl
 80055ca:	461d      	mov	r5, r3
 80055cc:	4e33      	ldr	r6, [pc, #204]	; (800569c <_strtod_l+0x5a4>)
 80055ce:	ea4f 1828 	mov.w	r8, r8, asr #4
 80055d2:	f1b8 0f01 	cmp.w	r8, #1
 80055d6:	dc21      	bgt.n	800561c <_strtod_l+0x524>
 80055d8:	b10b      	cbz	r3, 80055de <_strtod_l+0x4e6>
 80055da:	4681      	mov	r9, r0
 80055dc:	468a      	mov	sl, r1
 80055de:	4b2f      	ldr	r3, [pc, #188]	; (800569c <_strtod_l+0x5a4>)
 80055e0:	f1aa 7a54 	sub.w	sl, sl, #55574528	; 0x3500000
 80055e4:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 80055e8:	464a      	mov	r2, r9
 80055ea:	e9d5 0100 	ldrd	r0, r1, [r5]
 80055ee:	4653      	mov	r3, sl
 80055f0:	f7fa ff72 	bl	80004d8 <__aeabi_dmul>
 80055f4:	4b2a      	ldr	r3, [pc, #168]	; (80056a0 <_strtod_l+0x5a8>)
 80055f6:	460a      	mov	r2, r1
 80055f8:	400b      	ands	r3, r1
 80055fa:	492a      	ldr	r1, [pc, #168]	; (80056a4 <_strtod_l+0x5ac>)
 80055fc:	4681      	mov	r9, r0
 80055fe:	428b      	cmp	r3, r1
 8005600:	d894      	bhi.n	800552c <_strtod_l+0x434>
 8005602:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 8005606:	428b      	cmp	r3, r1
 8005608:	bf86      	itte	hi
 800560a:	f04f 39ff 	movhi.w	r9, #4294967295
 800560e:	f8df a09c 	ldrhi.w	sl, [pc, #156]	; 80056ac <_strtod_l+0x5b4>
 8005612:	f102 7a54 	addls.w	sl, r2, #55574528	; 0x3500000
 8005616:	2300      	movs	r3, #0
 8005618:	9305      	str	r3, [sp, #20]
 800561a:	e07b      	b.n	8005714 <_strtod_l+0x61c>
 800561c:	f018 0f01 	tst.w	r8, #1
 8005620:	d006      	beq.n	8005630 <_strtod_l+0x538>
 8005622:	eb06 03c5 	add.w	r3, r6, r5, lsl #3
 8005626:	e9d3 2300 	ldrd	r2, r3, [r3]
 800562a:	f7fa ff55 	bl	80004d8 <__aeabi_dmul>
 800562e:	2301      	movs	r3, #1
 8005630:	3501      	adds	r5, #1
 8005632:	ea4f 0868 	mov.w	r8, r8, asr #1
 8005636:	e7cc      	b.n	80055d2 <_strtod_l+0x4da>
 8005638:	d0ed      	beq.n	8005616 <_strtod_l+0x51e>
 800563a:	f1c8 0800 	rsb	r8, r8, #0
 800563e:	f018 020f 	ands.w	r2, r8, #15
 8005642:	d00a      	beq.n	800565a <_strtod_l+0x562>
 8005644:	4b14      	ldr	r3, [pc, #80]	; (8005698 <_strtod_l+0x5a0>)
 8005646:	4648      	mov	r0, r9
 8005648:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800564c:	4651      	mov	r1, sl
 800564e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005652:	f7fb f86b 	bl	800072c <__aeabi_ddiv>
 8005656:	4681      	mov	r9, r0
 8005658:	468a      	mov	sl, r1
 800565a:	ea5f 1828 	movs.w	r8, r8, asr #4
 800565e:	d0da      	beq.n	8005616 <_strtod_l+0x51e>
 8005660:	f1b8 0f1f 	cmp.w	r8, #31
 8005664:	dd24      	ble.n	80056b0 <_strtod_l+0x5b8>
 8005666:	f04f 0800 	mov.w	r8, #0
 800566a:	f8cd 8010 	str.w	r8, [sp, #16]
 800566e:	f8cd 8020 	str.w	r8, [sp, #32]
 8005672:	f8cd 8018 	str.w	r8, [sp, #24]
 8005676:	2322      	movs	r3, #34	; 0x22
 8005678:	f04f 0900 	mov.w	r9, #0
 800567c:	f04f 0a00 	mov.w	sl, #0
 8005680:	f8cb 3000 	str.w	r3, [fp]
 8005684:	e761      	b.n	800554a <_strtod_l+0x452>
 8005686:	bf00      	nop
 8005688:	0800880d 	.word	0x0800880d
 800568c:	0800889b 	.word	0x0800889b
 8005690:	08008815 	.word	0x08008815
 8005694:	08008858 	.word	0x08008858
 8005698:	08008940 	.word	0x08008940
 800569c:	08008918 	.word	0x08008918
 80056a0:	7ff00000 	.word	0x7ff00000
 80056a4:	7ca00000 	.word	0x7ca00000
 80056a8:	fff80000 	.word	0xfff80000
 80056ac:	7fefffff 	.word	0x7fefffff
 80056b0:	f018 0310 	ands.w	r3, r8, #16
 80056b4:	bf18      	it	ne
 80056b6:	236a      	movne	r3, #106	; 0x6a
 80056b8:	4648      	mov	r0, r9
 80056ba:	9305      	str	r3, [sp, #20]
 80056bc:	4651      	mov	r1, sl
 80056be:	2300      	movs	r3, #0
 80056c0:	4da1      	ldr	r5, [pc, #644]	; (8005948 <_strtod_l+0x850>)
 80056c2:	f1b8 0f00 	cmp.w	r8, #0
 80056c6:	f300 8113 	bgt.w	80058f0 <_strtod_l+0x7f8>
 80056ca:	b10b      	cbz	r3, 80056d0 <_strtod_l+0x5d8>
 80056cc:	4681      	mov	r9, r0
 80056ce:	468a      	mov	sl, r1
 80056d0:	9b05      	ldr	r3, [sp, #20]
 80056d2:	b1bb      	cbz	r3, 8005704 <_strtod_l+0x60c>
 80056d4:	f3ca 530a 	ubfx	r3, sl, #20, #11
 80056d8:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 80056dc:	2b00      	cmp	r3, #0
 80056de:	4651      	mov	r1, sl
 80056e0:	dd10      	ble.n	8005704 <_strtod_l+0x60c>
 80056e2:	2b1f      	cmp	r3, #31
 80056e4:	f340 8110 	ble.w	8005908 <_strtod_l+0x810>
 80056e8:	2b34      	cmp	r3, #52	; 0x34
 80056ea:	bfd8      	it	le
 80056ec:	f04f 32ff 	movle.w	r2, #4294967295
 80056f0:	f04f 0900 	mov.w	r9, #0
 80056f4:	bfcf      	iteee	gt
 80056f6:	f04f 7a5c 	movgt.w	sl, #57671680	; 0x3700000
 80056fa:	3b20      	suble	r3, #32
 80056fc:	fa02 f303 	lslle.w	r3, r2, r3
 8005700:	ea03 0a01 	andle.w	sl, r3, r1
 8005704:	2200      	movs	r2, #0
 8005706:	2300      	movs	r3, #0
 8005708:	4648      	mov	r0, r9
 800570a:	4651      	mov	r1, sl
 800570c:	f7fb f94c 	bl	80009a8 <__aeabi_dcmpeq>
 8005710:	2800      	cmp	r0, #0
 8005712:	d1a8      	bne.n	8005666 <_strtod_l+0x56e>
 8005714:	9b06      	ldr	r3, [sp, #24]
 8005716:	9a04      	ldr	r2, [sp, #16]
 8005718:	9300      	str	r3, [sp, #0]
 800571a:	9908      	ldr	r1, [sp, #32]
 800571c:	4623      	mov	r3, r4
 800571e:	4658      	mov	r0, fp
 8005720:	f001 fe89 	bl	8007436 <__s2b>
 8005724:	9008      	str	r0, [sp, #32]
 8005726:	2800      	cmp	r0, #0
 8005728:	f43f af00 	beq.w	800552c <_strtod_l+0x434>
 800572c:	9a07      	ldr	r2, [sp, #28]
 800572e:	9b07      	ldr	r3, [sp, #28]
 8005730:	2a00      	cmp	r2, #0
 8005732:	f1c3 0300 	rsb	r3, r3, #0
 8005736:	bfa8      	it	ge
 8005738:	2300      	movge	r3, #0
 800573a:	f04f 0800 	mov.w	r8, #0
 800573e:	930e      	str	r3, [sp, #56]	; 0x38
 8005740:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 8005744:	9316      	str	r3, [sp, #88]	; 0x58
 8005746:	f8cd 8010 	str.w	r8, [sp, #16]
 800574a:	9b08      	ldr	r3, [sp, #32]
 800574c:	4658      	mov	r0, fp
 800574e:	6859      	ldr	r1, [r3, #4]
 8005750:	f001 fdeb 	bl	800732a <_Balloc>
 8005754:	9006      	str	r0, [sp, #24]
 8005756:	2800      	cmp	r0, #0
 8005758:	f43f aef0 	beq.w	800553c <_strtod_l+0x444>
 800575c:	9b08      	ldr	r3, [sp, #32]
 800575e:	300c      	adds	r0, #12
 8005760:	691a      	ldr	r2, [r3, #16]
 8005762:	f103 010c 	add.w	r1, r3, #12
 8005766:	3202      	adds	r2, #2
 8005768:	0092      	lsls	r2, r2, #2
 800576a:	f001 fdd3 	bl	8007314 <memcpy>
 800576e:	ab1e      	add	r3, sp, #120	; 0x78
 8005770:	9301      	str	r3, [sp, #4]
 8005772:	ab1d      	add	r3, sp, #116	; 0x74
 8005774:	9300      	str	r3, [sp, #0]
 8005776:	464a      	mov	r2, r9
 8005778:	4653      	mov	r3, sl
 800577a:	4658      	mov	r0, fp
 800577c:	e9cd 9a0a 	strd	r9, sl, [sp, #40]	; 0x28
 8005780:	f002 f914 	bl	80079ac <__d2b>
 8005784:	901c      	str	r0, [sp, #112]	; 0x70
 8005786:	2800      	cmp	r0, #0
 8005788:	f43f aed8 	beq.w	800553c <_strtod_l+0x444>
 800578c:	2101      	movs	r1, #1
 800578e:	4658      	mov	r0, fp
 8005790:	f001 fedd 	bl	800754e <__i2b>
 8005794:	9004      	str	r0, [sp, #16]
 8005796:	4603      	mov	r3, r0
 8005798:	2800      	cmp	r0, #0
 800579a:	f43f aecf 	beq.w	800553c <_strtod_l+0x444>
 800579e:	9d1d      	ldr	r5, [sp, #116]	; 0x74
 80057a0:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 80057a2:	2d00      	cmp	r5, #0
 80057a4:	bfab      	itete	ge
 80057a6:	9b0e      	ldrge	r3, [sp, #56]	; 0x38
 80057a8:	9b16      	ldrlt	r3, [sp, #88]	; 0x58
 80057aa:	18ee      	addge	r6, r5, r3
 80057ac:	1b5c      	sublt	r4, r3, r5
 80057ae:	9b05      	ldr	r3, [sp, #20]
 80057b0:	bfa8      	it	ge
 80057b2:	9c16      	ldrge	r4, [sp, #88]	; 0x58
 80057b4:	eba5 0503 	sub.w	r5, r5, r3
 80057b8:	4415      	add	r5, r2
 80057ba:	4b64      	ldr	r3, [pc, #400]	; (800594c <_strtod_l+0x854>)
 80057bc:	f105 35ff 	add.w	r5, r5, #4294967295
 80057c0:	bfb8      	it	lt
 80057c2:	9e0e      	ldrlt	r6, [sp, #56]	; 0x38
 80057c4:	429d      	cmp	r5, r3
 80057c6:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 80057ca:	f280 80af 	bge.w	800592c <_strtod_l+0x834>
 80057ce:	1b5b      	subs	r3, r3, r5
 80057d0:	2b1f      	cmp	r3, #31
 80057d2:	eba2 0203 	sub.w	r2, r2, r3
 80057d6:	f04f 0701 	mov.w	r7, #1
 80057da:	f300 809c 	bgt.w	8005916 <_strtod_l+0x81e>
 80057de:	2500      	movs	r5, #0
 80057e0:	fa07 f303 	lsl.w	r3, r7, r3
 80057e4:	930f      	str	r3, [sp, #60]	; 0x3c
 80057e6:	18b7      	adds	r7, r6, r2
 80057e8:	9b05      	ldr	r3, [sp, #20]
 80057ea:	42be      	cmp	r6, r7
 80057ec:	4414      	add	r4, r2
 80057ee:	441c      	add	r4, r3
 80057f0:	4633      	mov	r3, r6
 80057f2:	bfa8      	it	ge
 80057f4:	463b      	movge	r3, r7
 80057f6:	42a3      	cmp	r3, r4
 80057f8:	bfa8      	it	ge
 80057fa:	4623      	movge	r3, r4
 80057fc:	2b00      	cmp	r3, #0
 80057fe:	bfc2      	ittt	gt
 8005800:	1aff      	subgt	r7, r7, r3
 8005802:	1ae4      	subgt	r4, r4, r3
 8005804:	1af6      	subgt	r6, r6, r3
 8005806:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005808:	b1bb      	cbz	r3, 800583a <_strtod_l+0x742>
 800580a:	461a      	mov	r2, r3
 800580c:	9904      	ldr	r1, [sp, #16]
 800580e:	4658      	mov	r0, fp
 8005810:	f001 ff3c 	bl	800768c <__pow5mult>
 8005814:	9004      	str	r0, [sp, #16]
 8005816:	2800      	cmp	r0, #0
 8005818:	f43f ae90 	beq.w	800553c <_strtod_l+0x444>
 800581c:	4601      	mov	r1, r0
 800581e:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8005820:	4658      	mov	r0, fp
 8005822:	f001 fe9d 	bl	8007560 <__multiply>
 8005826:	9009      	str	r0, [sp, #36]	; 0x24
 8005828:	2800      	cmp	r0, #0
 800582a:	f43f ae87 	beq.w	800553c <_strtod_l+0x444>
 800582e:	991c      	ldr	r1, [sp, #112]	; 0x70
 8005830:	4658      	mov	r0, fp
 8005832:	f001 fdae 	bl	8007392 <_Bfree>
 8005836:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005838:	931c      	str	r3, [sp, #112]	; 0x70
 800583a:	2f00      	cmp	r7, #0
 800583c:	dc7a      	bgt.n	8005934 <_strtod_l+0x83c>
 800583e:	9b07      	ldr	r3, [sp, #28]
 8005840:	2b00      	cmp	r3, #0
 8005842:	dd08      	ble.n	8005856 <_strtod_l+0x75e>
 8005844:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8005846:	9906      	ldr	r1, [sp, #24]
 8005848:	4658      	mov	r0, fp
 800584a:	f001 ff1f 	bl	800768c <__pow5mult>
 800584e:	9006      	str	r0, [sp, #24]
 8005850:	2800      	cmp	r0, #0
 8005852:	f43f ae73 	beq.w	800553c <_strtod_l+0x444>
 8005856:	2c00      	cmp	r4, #0
 8005858:	dd08      	ble.n	800586c <_strtod_l+0x774>
 800585a:	4622      	mov	r2, r4
 800585c:	9906      	ldr	r1, [sp, #24]
 800585e:	4658      	mov	r0, fp
 8005860:	f001 ff62 	bl	8007728 <__lshift>
 8005864:	9006      	str	r0, [sp, #24]
 8005866:	2800      	cmp	r0, #0
 8005868:	f43f ae68 	beq.w	800553c <_strtod_l+0x444>
 800586c:	2e00      	cmp	r6, #0
 800586e:	dd08      	ble.n	8005882 <_strtod_l+0x78a>
 8005870:	4632      	mov	r2, r6
 8005872:	9904      	ldr	r1, [sp, #16]
 8005874:	4658      	mov	r0, fp
 8005876:	f001 ff57 	bl	8007728 <__lshift>
 800587a:	9004      	str	r0, [sp, #16]
 800587c:	2800      	cmp	r0, #0
 800587e:	f43f ae5d 	beq.w	800553c <_strtod_l+0x444>
 8005882:	9a06      	ldr	r2, [sp, #24]
 8005884:	991c      	ldr	r1, [sp, #112]	; 0x70
 8005886:	4658      	mov	r0, fp
 8005888:	f001 ffbc 	bl	8007804 <__mdiff>
 800588c:	4680      	mov	r8, r0
 800588e:	2800      	cmp	r0, #0
 8005890:	f43f ae54 	beq.w	800553c <_strtod_l+0x444>
 8005894:	2400      	movs	r4, #0
 8005896:	68c3      	ldr	r3, [r0, #12]
 8005898:	9904      	ldr	r1, [sp, #16]
 800589a:	60c4      	str	r4, [r0, #12]
 800589c:	930c      	str	r3, [sp, #48]	; 0x30
 800589e:	f001 ff97 	bl	80077d0 <__mcmp>
 80058a2:	42a0      	cmp	r0, r4
 80058a4:	da54      	bge.n	8005950 <_strtod_l+0x858>
 80058a6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80058a8:	b9f3      	cbnz	r3, 80058e8 <_strtod_l+0x7f0>
 80058aa:	f1b9 0f00 	cmp.w	r9, #0
 80058ae:	d11b      	bne.n	80058e8 <_strtod_l+0x7f0>
 80058b0:	f3ca 0313 	ubfx	r3, sl, #0, #20
 80058b4:	b9c3      	cbnz	r3, 80058e8 <_strtod_l+0x7f0>
 80058b6:	f02a 4300 	bic.w	r3, sl, #2147483648	; 0x80000000
 80058ba:	0d1b      	lsrs	r3, r3, #20
 80058bc:	051b      	lsls	r3, r3, #20
 80058be:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 80058c2:	d911      	bls.n	80058e8 <_strtod_l+0x7f0>
 80058c4:	f8d8 3014 	ldr.w	r3, [r8, #20]
 80058c8:	b91b      	cbnz	r3, 80058d2 <_strtod_l+0x7da>
 80058ca:	f8d8 3010 	ldr.w	r3, [r8, #16]
 80058ce:	2b01      	cmp	r3, #1
 80058d0:	dd0a      	ble.n	80058e8 <_strtod_l+0x7f0>
 80058d2:	4641      	mov	r1, r8
 80058d4:	2201      	movs	r2, #1
 80058d6:	4658      	mov	r0, fp
 80058d8:	f001 ff26 	bl	8007728 <__lshift>
 80058dc:	9904      	ldr	r1, [sp, #16]
 80058de:	4680      	mov	r8, r0
 80058e0:	f001 ff76 	bl	80077d0 <__mcmp>
 80058e4:	2800      	cmp	r0, #0
 80058e6:	dc68      	bgt.n	80059ba <_strtod_l+0x8c2>
 80058e8:	9b05      	ldr	r3, [sp, #20]
 80058ea:	2b00      	cmp	r3, #0
 80058ec:	d172      	bne.n	80059d4 <_strtod_l+0x8dc>
 80058ee:	e630      	b.n	8005552 <_strtod_l+0x45a>
 80058f0:	f018 0f01 	tst.w	r8, #1
 80058f4:	d004      	beq.n	8005900 <_strtod_l+0x808>
 80058f6:	e9d5 2300 	ldrd	r2, r3, [r5]
 80058fa:	f7fa fded 	bl	80004d8 <__aeabi_dmul>
 80058fe:	2301      	movs	r3, #1
 8005900:	ea4f 0868 	mov.w	r8, r8, asr #1
 8005904:	3508      	adds	r5, #8
 8005906:	e6dc      	b.n	80056c2 <_strtod_l+0x5ca>
 8005908:	f04f 32ff 	mov.w	r2, #4294967295
 800590c:	fa02 f303 	lsl.w	r3, r2, r3
 8005910:	ea03 0909 	and.w	r9, r3, r9
 8005914:	e6f6      	b.n	8005704 <_strtod_l+0x60c>
 8005916:	f1c5 457f 	rsb	r5, r5, #4278190080	; 0xff000000
 800591a:	f505 057f 	add.w	r5, r5, #16711680	; 0xff0000
 800591e:	f505 457b 	add.w	r5, r5, #64256	; 0xfb00
 8005922:	35e2      	adds	r5, #226	; 0xe2
 8005924:	fa07 f505 	lsl.w	r5, r7, r5
 8005928:	970f      	str	r7, [sp, #60]	; 0x3c
 800592a:	e75c      	b.n	80057e6 <_strtod_l+0x6ee>
 800592c:	2301      	movs	r3, #1
 800592e:	2500      	movs	r5, #0
 8005930:	930f      	str	r3, [sp, #60]	; 0x3c
 8005932:	e758      	b.n	80057e6 <_strtod_l+0x6ee>
 8005934:	463a      	mov	r2, r7
 8005936:	991c      	ldr	r1, [sp, #112]	; 0x70
 8005938:	4658      	mov	r0, fp
 800593a:	f001 fef5 	bl	8007728 <__lshift>
 800593e:	901c      	str	r0, [sp, #112]	; 0x70
 8005940:	2800      	cmp	r0, #0
 8005942:	f47f af7c 	bne.w	800583e <_strtod_l+0x746>
 8005946:	e5f9      	b.n	800553c <_strtod_l+0x444>
 8005948:	08008870 	.word	0x08008870
 800594c:	fffffc02 	.word	0xfffffc02
 8005950:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
 8005954:	f040 8089 	bne.w	8005a6a <_strtod_l+0x972>
 8005958:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800595a:	f3ca 0313 	ubfx	r3, sl, #0, #20
 800595e:	b342      	cbz	r2, 80059b2 <_strtod_l+0x8ba>
 8005960:	4aaf      	ldr	r2, [pc, #700]	; (8005c20 <_strtod_l+0xb28>)
 8005962:	4293      	cmp	r3, r2
 8005964:	d156      	bne.n	8005a14 <_strtod_l+0x91c>
 8005966:	9b05      	ldr	r3, [sp, #20]
 8005968:	4648      	mov	r0, r9
 800596a:	b1eb      	cbz	r3, 80059a8 <_strtod_l+0x8b0>
 800596c:	4653      	mov	r3, sl
 800596e:	4aad      	ldr	r2, [pc, #692]	; (8005c24 <_strtod_l+0xb2c>)
 8005970:	f04f 31ff 	mov.w	r1, #4294967295
 8005974:	401a      	ands	r2, r3
 8005976:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
 800597a:	d818      	bhi.n	80059ae <_strtod_l+0x8b6>
 800597c:	0d12      	lsrs	r2, r2, #20
 800597e:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8005982:	fa01 f303 	lsl.w	r3, r1, r3
 8005986:	4298      	cmp	r0, r3
 8005988:	d144      	bne.n	8005a14 <_strtod_l+0x91c>
 800598a:	4ba7      	ldr	r3, [pc, #668]	; (8005c28 <_strtod_l+0xb30>)
 800598c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800598e:	429a      	cmp	r2, r3
 8005990:	d102      	bne.n	8005998 <_strtod_l+0x8a0>
 8005992:	3001      	adds	r0, #1
 8005994:	f43f add2 	beq.w	800553c <_strtod_l+0x444>
 8005998:	4ba2      	ldr	r3, [pc, #648]	; (8005c24 <_strtod_l+0xb2c>)
 800599a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800599c:	f04f 0900 	mov.w	r9, #0
 80059a0:	401a      	ands	r2, r3
 80059a2:	f502 1a80 	add.w	sl, r2, #1048576	; 0x100000
 80059a6:	e79f      	b.n	80058e8 <_strtod_l+0x7f0>
 80059a8:	f04f 33ff 	mov.w	r3, #4294967295
 80059ac:	e7eb      	b.n	8005986 <_strtod_l+0x88e>
 80059ae:	460b      	mov	r3, r1
 80059b0:	e7e9      	b.n	8005986 <_strtod_l+0x88e>
 80059b2:	bb7b      	cbnz	r3, 8005a14 <_strtod_l+0x91c>
 80059b4:	f1b9 0f00 	cmp.w	r9, #0
 80059b8:	d12c      	bne.n	8005a14 <_strtod_l+0x91c>
 80059ba:	9905      	ldr	r1, [sp, #20]
 80059bc:	4653      	mov	r3, sl
 80059be:	4a99      	ldr	r2, [pc, #612]	; (8005c24 <_strtod_l+0xb2c>)
 80059c0:	b1f1      	cbz	r1, 8005a00 <_strtod_l+0x908>
 80059c2:	ea02 010a 	and.w	r1, r2, sl
 80059c6:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 80059ca:	dc19      	bgt.n	8005a00 <_strtod_l+0x908>
 80059cc:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 80059d0:	f77f ae51 	ble.w	8005676 <_strtod_l+0x57e>
 80059d4:	2300      	movs	r3, #0
 80059d6:	4a95      	ldr	r2, [pc, #596]	; (8005c2c <_strtod_l+0xb34>)
 80059d8:	4648      	mov	r0, r9
 80059da:	e9cd 3214 	strd	r3, r2, [sp, #80]	; 0x50
 80059de:	4651      	mov	r1, sl
 80059e0:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 80059e4:	f7fa fd78 	bl	80004d8 <__aeabi_dmul>
 80059e8:	4681      	mov	r9, r0
 80059ea:	468a      	mov	sl, r1
 80059ec:	2900      	cmp	r1, #0
 80059ee:	f47f adb0 	bne.w	8005552 <_strtod_l+0x45a>
 80059f2:	2800      	cmp	r0, #0
 80059f4:	f47f adad 	bne.w	8005552 <_strtod_l+0x45a>
 80059f8:	2322      	movs	r3, #34	; 0x22
 80059fa:	f8cb 3000 	str.w	r3, [fp]
 80059fe:	e5a8      	b.n	8005552 <_strtod_l+0x45a>
 8005a00:	4013      	ands	r3, r2
 8005a02:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8005a06:	ea6f 5a13 	mvn.w	sl, r3, lsr #20
 8005a0a:	f04f 39ff 	mov.w	r9, #4294967295
 8005a0e:	ea6f 5a0a 	mvn.w	sl, sl, lsl #20
 8005a12:	e769      	b.n	80058e8 <_strtod_l+0x7f0>
 8005a14:	b19d      	cbz	r5, 8005a3e <_strtod_l+0x946>
 8005a16:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005a18:	421d      	tst	r5, r3
 8005a1a:	f43f af65 	beq.w	80058e8 <_strtod_l+0x7f0>
 8005a1e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8005a20:	9a05      	ldr	r2, [sp, #20]
 8005a22:	4648      	mov	r0, r9
 8005a24:	4651      	mov	r1, sl
 8005a26:	b173      	cbz	r3, 8005a46 <_strtod_l+0x94e>
 8005a28:	f7ff fb42 	bl	80050b0 <sulp>
 8005a2c:	4602      	mov	r2, r0
 8005a2e:	460b      	mov	r3, r1
 8005a30:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8005a34:	f7fa fb9a 	bl	800016c <__adddf3>
 8005a38:	4681      	mov	r9, r0
 8005a3a:	468a      	mov	sl, r1
 8005a3c:	e754      	b.n	80058e8 <_strtod_l+0x7f0>
 8005a3e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8005a40:	ea13 0f09 	tst.w	r3, r9
 8005a44:	e7e9      	b.n	8005a1a <_strtod_l+0x922>
 8005a46:	f7ff fb33 	bl	80050b0 <sulp>
 8005a4a:	4602      	mov	r2, r0
 8005a4c:	460b      	mov	r3, r1
 8005a4e:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8005a52:	f7fa fb89 	bl	8000168 <__aeabi_dsub>
 8005a56:	2200      	movs	r2, #0
 8005a58:	2300      	movs	r3, #0
 8005a5a:	4681      	mov	r9, r0
 8005a5c:	468a      	mov	sl, r1
 8005a5e:	f7fa ffa3 	bl	80009a8 <__aeabi_dcmpeq>
 8005a62:	2800      	cmp	r0, #0
 8005a64:	f47f ae07 	bne.w	8005676 <_strtod_l+0x57e>
 8005a68:	e73e      	b.n	80058e8 <_strtod_l+0x7f0>
 8005a6a:	9904      	ldr	r1, [sp, #16]
 8005a6c:	4640      	mov	r0, r8
 8005a6e:	f001 ffec 	bl	8007a4a <__ratio>
 8005a72:	2200      	movs	r2, #0
 8005a74:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8005a78:	4606      	mov	r6, r0
 8005a7a:	460f      	mov	r7, r1
 8005a7c:	f7fa ffa8 	bl	80009d0 <__aeabi_dcmple>
 8005a80:	2800      	cmp	r0, #0
 8005a82:	d075      	beq.n	8005b70 <_strtod_l+0xa78>
 8005a84:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8005a86:	2b00      	cmp	r3, #0
 8005a88:	d047      	beq.n	8005b1a <_strtod_l+0xa22>
 8005a8a:	2600      	movs	r6, #0
 8005a8c:	4f68      	ldr	r7, [pc, #416]	; (8005c30 <_strtod_l+0xb38>)
 8005a8e:	4d68      	ldr	r5, [pc, #416]	; (8005c30 <_strtod_l+0xb38>)
 8005a90:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005a92:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005a96:	0d1b      	lsrs	r3, r3, #20
 8005a98:	051b      	lsls	r3, r3, #20
 8005a9a:	930f      	str	r3, [sp, #60]	; 0x3c
 8005a9c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8005a9e:	4b65      	ldr	r3, [pc, #404]	; (8005c34 <_strtod_l+0xb3c>)
 8005aa0:	429a      	cmp	r2, r3
 8005aa2:	f040 80cf 	bne.w	8005c44 <_strtod_l+0xb4c>
 8005aa6:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8005aaa:	e9cd 2314 	strd	r2, r3, [sp, #80]	; 0x50
 8005aae:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005ab0:	4648      	mov	r0, r9
 8005ab2:	f1a3 7a54 	sub.w	sl, r3, #55574528	; 0x3500000
 8005ab6:	4651      	mov	r1, sl
 8005ab8:	f001 ff02 	bl	80078c0 <__ulp>
 8005abc:	4602      	mov	r2, r0
 8005abe:	460b      	mov	r3, r1
 8005ac0:	4630      	mov	r0, r6
 8005ac2:	4639      	mov	r1, r7
 8005ac4:	f7fa fd08 	bl	80004d8 <__aeabi_dmul>
 8005ac8:	464a      	mov	r2, r9
 8005aca:	4653      	mov	r3, sl
 8005acc:	f7fa fb4e 	bl	800016c <__adddf3>
 8005ad0:	460b      	mov	r3, r1
 8005ad2:	4954      	ldr	r1, [pc, #336]	; (8005c24 <_strtod_l+0xb2c>)
 8005ad4:	4a58      	ldr	r2, [pc, #352]	; (8005c38 <_strtod_l+0xb40>)
 8005ad6:	4019      	ands	r1, r3
 8005ad8:	4291      	cmp	r1, r2
 8005ada:	4681      	mov	r9, r0
 8005adc:	d95e      	bls.n	8005b9c <_strtod_l+0xaa4>
 8005ade:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005ae0:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 8005ae4:	4293      	cmp	r3, r2
 8005ae6:	d103      	bne.n	8005af0 <_strtod_l+0x9f8>
 8005ae8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005aea:	3301      	adds	r3, #1
 8005aec:	f43f ad26 	beq.w	800553c <_strtod_l+0x444>
 8005af0:	f04f 39ff 	mov.w	r9, #4294967295
 8005af4:	f8df a130 	ldr.w	sl, [pc, #304]	; 8005c28 <_strtod_l+0xb30>
 8005af8:	991c      	ldr	r1, [sp, #112]	; 0x70
 8005afa:	4658      	mov	r0, fp
 8005afc:	f001 fc49 	bl	8007392 <_Bfree>
 8005b00:	9906      	ldr	r1, [sp, #24]
 8005b02:	4658      	mov	r0, fp
 8005b04:	f001 fc45 	bl	8007392 <_Bfree>
 8005b08:	9904      	ldr	r1, [sp, #16]
 8005b0a:	4658      	mov	r0, fp
 8005b0c:	f001 fc41 	bl	8007392 <_Bfree>
 8005b10:	4641      	mov	r1, r8
 8005b12:	4658      	mov	r0, fp
 8005b14:	f001 fc3d 	bl	8007392 <_Bfree>
 8005b18:	e617      	b.n	800574a <_strtod_l+0x652>
 8005b1a:	f1b9 0f00 	cmp.w	r9, #0
 8005b1e:	d119      	bne.n	8005b54 <_strtod_l+0xa5c>
 8005b20:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005b22:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005b26:	b9e3      	cbnz	r3, 8005b62 <_strtod_l+0xa6a>
 8005b28:	2200      	movs	r2, #0
 8005b2a:	4b41      	ldr	r3, [pc, #260]	; (8005c30 <_strtod_l+0xb38>)
 8005b2c:	4630      	mov	r0, r6
 8005b2e:	4639      	mov	r1, r7
 8005b30:	f7fa ff44 	bl	80009bc <__aeabi_dcmplt>
 8005b34:	b9c8      	cbnz	r0, 8005b6a <_strtod_l+0xa72>
 8005b36:	2200      	movs	r2, #0
 8005b38:	4b40      	ldr	r3, [pc, #256]	; (8005c3c <_strtod_l+0xb44>)
 8005b3a:	4630      	mov	r0, r6
 8005b3c:	4639      	mov	r1, r7
 8005b3e:	f7fa fccb 	bl	80004d8 <__aeabi_dmul>
 8005b42:	4604      	mov	r4, r0
 8005b44:	460d      	mov	r5, r1
 8005b46:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 8005b4a:	9418      	str	r4, [sp, #96]	; 0x60
 8005b4c:	9319      	str	r3, [sp, #100]	; 0x64
 8005b4e:	e9dd 6718 	ldrd	r6, r7, [sp, #96]	; 0x60
 8005b52:	e79d      	b.n	8005a90 <_strtod_l+0x998>
 8005b54:	f1b9 0f01 	cmp.w	r9, #1
 8005b58:	d103      	bne.n	8005b62 <_strtod_l+0xa6a>
 8005b5a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005b5c:	2b00      	cmp	r3, #0
 8005b5e:	f43f ad8a 	beq.w	8005676 <_strtod_l+0x57e>
 8005b62:	2600      	movs	r6, #0
 8005b64:	4f36      	ldr	r7, [pc, #216]	; (8005c40 <_strtod_l+0xb48>)
 8005b66:	2400      	movs	r4, #0
 8005b68:	e791      	b.n	8005a8e <_strtod_l+0x996>
 8005b6a:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 8005b6c:	4d33      	ldr	r5, [pc, #204]	; (8005c3c <_strtod_l+0xb44>)
 8005b6e:	e7ea      	b.n	8005b46 <_strtod_l+0xa4e>
 8005b70:	4b32      	ldr	r3, [pc, #200]	; (8005c3c <_strtod_l+0xb44>)
 8005b72:	2200      	movs	r2, #0
 8005b74:	4630      	mov	r0, r6
 8005b76:	4639      	mov	r1, r7
 8005b78:	f7fa fcae 	bl	80004d8 <__aeabi_dmul>
 8005b7c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8005b7e:	4604      	mov	r4, r0
 8005b80:	460d      	mov	r5, r1
 8005b82:	b933      	cbnz	r3, 8005b92 <_strtod_l+0xa9a>
 8005b84:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8005b88:	9010      	str	r0, [sp, #64]	; 0x40
 8005b8a:	9311      	str	r3, [sp, #68]	; 0x44
 8005b8c:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 8005b90:	e77e      	b.n	8005a90 <_strtod_l+0x998>
 8005b92:	4602      	mov	r2, r0
 8005b94:	460b      	mov	r3, r1
 8005b96:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
 8005b9a:	e7f7      	b.n	8005b8c <_strtod_l+0xa94>
 8005b9c:	f103 7a54 	add.w	sl, r3, #55574528	; 0x3500000
 8005ba0:	9b05      	ldr	r3, [sp, #20]
 8005ba2:	2b00      	cmp	r3, #0
 8005ba4:	d1a8      	bne.n	8005af8 <_strtod_l+0xa00>
 8005ba6:	f02a 4300 	bic.w	r3, sl, #2147483648	; 0x80000000
 8005baa:	0d1b      	lsrs	r3, r3, #20
 8005bac:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8005bae:	051b      	lsls	r3, r3, #20
 8005bb0:	429a      	cmp	r2, r3
 8005bb2:	4656      	mov	r6, sl
 8005bb4:	d1a0      	bne.n	8005af8 <_strtod_l+0xa00>
 8005bb6:	4629      	mov	r1, r5
 8005bb8:	4620      	mov	r0, r4
 8005bba:	f7fa ff3d 	bl	8000a38 <__aeabi_d2iz>
 8005bbe:	f7fa fc21 	bl	8000404 <__aeabi_i2d>
 8005bc2:	460b      	mov	r3, r1
 8005bc4:	4602      	mov	r2, r0
 8005bc6:	4629      	mov	r1, r5
 8005bc8:	4620      	mov	r0, r4
 8005bca:	f7fa facd 	bl	8000168 <__aeabi_dsub>
 8005bce:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8005bd0:	4604      	mov	r4, r0
 8005bd2:	460d      	mov	r5, r1
 8005bd4:	b933      	cbnz	r3, 8005be4 <_strtod_l+0xaec>
 8005bd6:	f1b9 0f00 	cmp.w	r9, #0
 8005bda:	d103      	bne.n	8005be4 <_strtod_l+0xaec>
 8005bdc:	f3ca 0613 	ubfx	r6, sl, #0, #20
 8005be0:	2e00      	cmp	r6, #0
 8005be2:	d06a      	beq.n	8005cba <_strtod_l+0xbc2>
 8005be4:	a30a      	add	r3, pc, #40	; (adr r3, 8005c10 <_strtod_l+0xb18>)
 8005be6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005bea:	4620      	mov	r0, r4
 8005bec:	4629      	mov	r1, r5
 8005bee:	f7fa fee5 	bl	80009bc <__aeabi_dcmplt>
 8005bf2:	2800      	cmp	r0, #0
 8005bf4:	f47f acad 	bne.w	8005552 <_strtod_l+0x45a>
 8005bf8:	a307      	add	r3, pc, #28	; (adr r3, 8005c18 <_strtod_l+0xb20>)
 8005bfa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005bfe:	4620      	mov	r0, r4
 8005c00:	4629      	mov	r1, r5
 8005c02:	f7fa fef9 	bl	80009f8 <__aeabi_dcmpgt>
 8005c06:	2800      	cmp	r0, #0
 8005c08:	f43f af76 	beq.w	8005af8 <_strtod_l+0xa00>
 8005c0c:	e4a1      	b.n	8005552 <_strtod_l+0x45a>
 8005c0e:	bf00      	nop
 8005c10:	94a03595 	.word	0x94a03595
 8005c14:	3fdfffff 	.word	0x3fdfffff
 8005c18:	35afe535 	.word	0x35afe535
 8005c1c:	3fe00000 	.word	0x3fe00000
 8005c20:	000fffff 	.word	0x000fffff
 8005c24:	7ff00000 	.word	0x7ff00000
 8005c28:	7fefffff 	.word	0x7fefffff
 8005c2c:	39500000 	.word	0x39500000
 8005c30:	3ff00000 	.word	0x3ff00000
 8005c34:	7fe00000 	.word	0x7fe00000
 8005c38:	7c9fffff 	.word	0x7c9fffff
 8005c3c:	3fe00000 	.word	0x3fe00000
 8005c40:	bff00000 	.word	0xbff00000
 8005c44:	9b05      	ldr	r3, [sp, #20]
 8005c46:	b313      	cbz	r3, 8005c8e <_strtod_l+0xb96>
 8005c48:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8005c4a:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8005c4e:	d81e      	bhi.n	8005c8e <_strtod_l+0xb96>
 8005c50:	a325      	add	r3, pc, #148	; (adr r3, 8005ce8 <_strtod_l+0xbf0>)
 8005c52:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c56:	4620      	mov	r0, r4
 8005c58:	4629      	mov	r1, r5
 8005c5a:	f7fa feb9 	bl	80009d0 <__aeabi_dcmple>
 8005c5e:	b190      	cbz	r0, 8005c86 <_strtod_l+0xb8e>
 8005c60:	4629      	mov	r1, r5
 8005c62:	4620      	mov	r0, r4
 8005c64:	f7fa ff10 	bl	8000a88 <__aeabi_d2uiz>
 8005c68:	2800      	cmp	r0, #0
 8005c6a:	bf08      	it	eq
 8005c6c:	2001      	moveq	r0, #1
 8005c6e:	f7fa fbb9 	bl	80003e4 <__aeabi_ui2d>
 8005c72:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8005c74:	4604      	mov	r4, r0
 8005c76:	460d      	mov	r5, r1
 8005c78:	b9d3      	cbnz	r3, 8005cb0 <_strtod_l+0xbb8>
 8005c7a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8005c7e:	9012      	str	r0, [sp, #72]	; 0x48
 8005c80:	9313      	str	r3, [sp, #76]	; 0x4c
 8005c82:	e9dd 6712 	ldrd	r6, r7, [sp, #72]	; 0x48
 8005c86:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8005c88:	f107 63d6 	add.w	r3, r7, #112197632	; 0x6b00000
 8005c8c:	1a9f      	subs	r7, r3, r2
 8005c8e:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8005c92:	f001 fe15 	bl	80078c0 <__ulp>
 8005c96:	4602      	mov	r2, r0
 8005c98:	460b      	mov	r3, r1
 8005c9a:	4630      	mov	r0, r6
 8005c9c:	4639      	mov	r1, r7
 8005c9e:	f7fa fc1b 	bl	80004d8 <__aeabi_dmul>
 8005ca2:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8005ca6:	f7fa fa61 	bl	800016c <__adddf3>
 8005caa:	4681      	mov	r9, r0
 8005cac:	468a      	mov	sl, r1
 8005cae:	e777      	b.n	8005ba0 <_strtod_l+0xaa8>
 8005cb0:	4602      	mov	r2, r0
 8005cb2:	460b      	mov	r3, r1
 8005cb4:	e9cd 2312 	strd	r2, r3, [sp, #72]	; 0x48
 8005cb8:	e7e3      	b.n	8005c82 <_strtod_l+0xb8a>
 8005cba:	a30d      	add	r3, pc, #52	; (adr r3, 8005cf0 <_strtod_l+0xbf8>)
 8005cbc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005cc0:	f7fa fe7c 	bl	80009bc <__aeabi_dcmplt>
 8005cc4:	e79f      	b.n	8005c06 <_strtod_l+0xb0e>
 8005cc6:	2300      	movs	r3, #0
 8005cc8:	930d      	str	r3, [sp, #52]	; 0x34
 8005cca:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8005ccc:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8005cce:	6013      	str	r3, [r2, #0]
 8005cd0:	f7ff ba55 	b.w	800517e <_strtod_l+0x86>
 8005cd4:	2b65      	cmp	r3, #101	; 0x65
 8005cd6:	f04f 0200 	mov.w	r2, #0
 8005cda:	f43f ab42 	beq.w	8005362 <_strtod_l+0x26a>
 8005cde:	2101      	movs	r1, #1
 8005ce0:	4614      	mov	r4, r2
 8005ce2:	9105      	str	r1, [sp, #20]
 8005ce4:	f7ff babf 	b.w	8005266 <_strtod_l+0x16e>
 8005ce8:	ffc00000 	.word	0xffc00000
 8005cec:	41dfffff 	.word	0x41dfffff
 8005cf0:	94a03595 	.word	0x94a03595
 8005cf4:	3fcfffff 	.word	0x3fcfffff

08005cf8 <_strtod_r>:
 8005cf8:	4b05      	ldr	r3, [pc, #20]	; (8005d10 <_strtod_r+0x18>)
 8005cfa:	b410      	push	{r4}
 8005cfc:	681b      	ldr	r3, [r3, #0]
 8005cfe:	4c05      	ldr	r4, [pc, #20]	; (8005d14 <_strtod_r+0x1c>)
 8005d00:	6a1b      	ldr	r3, [r3, #32]
 8005d02:	2b00      	cmp	r3, #0
 8005d04:	bf08      	it	eq
 8005d06:	4623      	moveq	r3, r4
 8005d08:	bc10      	pop	{r4}
 8005d0a:	f7ff b9f5 	b.w	80050f8 <_strtod_l>
 8005d0e:	bf00      	nop
 8005d10:	20000014 	.word	0x20000014
 8005d14:	20000078 	.word	0x20000078

08005d18 <_strtol_l.isra.0>:
 8005d18:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005d1c:	4680      	mov	r8, r0
 8005d1e:	4689      	mov	r9, r1
 8005d20:	4692      	mov	sl, r2
 8005d22:	461e      	mov	r6, r3
 8005d24:	460f      	mov	r7, r1
 8005d26:	463d      	mov	r5, r7
 8005d28:	9808      	ldr	r0, [sp, #32]
 8005d2a:	f815 4b01 	ldrb.w	r4, [r5], #1
 8005d2e:	f001 fab5 	bl	800729c <__locale_ctype_ptr_l>
 8005d32:	4420      	add	r0, r4
 8005d34:	7843      	ldrb	r3, [r0, #1]
 8005d36:	f013 0308 	ands.w	r3, r3, #8
 8005d3a:	d132      	bne.n	8005da2 <_strtol_l.isra.0+0x8a>
 8005d3c:	2c2d      	cmp	r4, #45	; 0x2d
 8005d3e:	d132      	bne.n	8005da6 <_strtol_l.isra.0+0x8e>
 8005d40:	2201      	movs	r2, #1
 8005d42:	787c      	ldrb	r4, [r7, #1]
 8005d44:	1cbd      	adds	r5, r7, #2
 8005d46:	2e00      	cmp	r6, #0
 8005d48:	d05d      	beq.n	8005e06 <_strtol_l.isra.0+0xee>
 8005d4a:	2e10      	cmp	r6, #16
 8005d4c:	d109      	bne.n	8005d62 <_strtol_l.isra.0+0x4a>
 8005d4e:	2c30      	cmp	r4, #48	; 0x30
 8005d50:	d107      	bne.n	8005d62 <_strtol_l.isra.0+0x4a>
 8005d52:	782b      	ldrb	r3, [r5, #0]
 8005d54:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8005d58:	2b58      	cmp	r3, #88	; 0x58
 8005d5a:	d14f      	bne.n	8005dfc <_strtol_l.isra.0+0xe4>
 8005d5c:	2610      	movs	r6, #16
 8005d5e:	786c      	ldrb	r4, [r5, #1]
 8005d60:	3502      	adds	r5, #2
 8005d62:	2a00      	cmp	r2, #0
 8005d64:	bf14      	ite	ne
 8005d66:	f04f 4100 	movne.w	r1, #2147483648	; 0x80000000
 8005d6a:	f06f 4100 	mvneq.w	r1, #2147483648	; 0x80000000
 8005d6e:	2700      	movs	r7, #0
 8005d70:	fbb1 fcf6 	udiv	ip, r1, r6
 8005d74:	4638      	mov	r0, r7
 8005d76:	fb06 1e1c 	mls	lr, r6, ip, r1
 8005d7a:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 8005d7e:	2b09      	cmp	r3, #9
 8005d80:	d817      	bhi.n	8005db2 <_strtol_l.isra.0+0x9a>
 8005d82:	461c      	mov	r4, r3
 8005d84:	42a6      	cmp	r6, r4
 8005d86:	dd23      	ble.n	8005dd0 <_strtol_l.isra.0+0xb8>
 8005d88:	1c7b      	adds	r3, r7, #1
 8005d8a:	d007      	beq.n	8005d9c <_strtol_l.isra.0+0x84>
 8005d8c:	4584      	cmp	ip, r0
 8005d8e:	d31c      	bcc.n	8005dca <_strtol_l.isra.0+0xb2>
 8005d90:	d101      	bne.n	8005d96 <_strtol_l.isra.0+0x7e>
 8005d92:	45a6      	cmp	lr, r4
 8005d94:	db19      	blt.n	8005dca <_strtol_l.isra.0+0xb2>
 8005d96:	2701      	movs	r7, #1
 8005d98:	fb00 4006 	mla	r0, r0, r6, r4
 8005d9c:	f815 4b01 	ldrb.w	r4, [r5], #1
 8005da0:	e7eb      	b.n	8005d7a <_strtol_l.isra.0+0x62>
 8005da2:	462f      	mov	r7, r5
 8005da4:	e7bf      	b.n	8005d26 <_strtol_l.isra.0+0xe>
 8005da6:	2c2b      	cmp	r4, #43	; 0x2b
 8005da8:	bf04      	itt	eq
 8005daa:	1cbd      	addeq	r5, r7, #2
 8005dac:	787c      	ldrbeq	r4, [r7, #1]
 8005dae:	461a      	mov	r2, r3
 8005db0:	e7c9      	b.n	8005d46 <_strtol_l.isra.0+0x2e>
 8005db2:	f1a4 0341 	sub.w	r3, r4, #65	; 0x41
 8005db6:	2b19      	cmp	r3, #25
 8005db8:	d801      	bhi.n	8005dbe <_strtol_l.isra.0+0xa6>
 8005dba:	3c37      	subs	r4, #55	; 0x37
 8005dbc:	e7e2      	b.n	8005d84 <_strtol_l.isra.0+0x6c>
 8005dbe:	f1a4 0361 	sub.w	r3, r4, #97	; 0x61
 8005dc2:	2b19      	cmp	r3, #25
 8005dc4:	d804      	bhi.n	8005dd0 <_strtol_l.isra.0+0xb8>
 8005dc6:	3c57      	subs	r4, #87	; 0x57
 8005dc8:	e7dc      	b.n	8005d84 <_strtol_l.isra.0+0x6c>
 8005dca:	f04f 37ff 	mov.w	r7, #4294967295
 8005dce:	e7e5      	b.n	8005d9c <_strtol_l.isra.0+0x84>
 8005dd0:	1c7b      	adds	r3, r7, #1
 8005dd2:	d108      	bne.n	8005de6 <_strtol_l.isra.0+0xce>
 8005dd4:	2322      	movs	r3, #34	; 0x22
 8005dd6:	4608      	mov	r0, r1
 8005dd8:	f8c8 3000 	str.w	r3, [r8]
 8005ddc:	f1ba 0f00 	cmp.w	sl, #0
 8005de0:	d107      	bne.n	8005df2 <_strtol_l.isra.0+0xda>
 8005de2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005de6:	b102      	cbz	r2, 8005dea <_strtol_l.isra.0+0xd2>
 8005de8:	4240      	negs	r0, r0
 8005dea:	f1ba 0f00 	cmp.w	sl, #0
 8005dee:	d0f8      	beq.n	8005de2 <_strtol_l.isra.0+0xca>
 8005df0:	b10f      	cbz	r7, 8005df6 <_strtol_l.isra.0+0xde>
 8005df2:	f105 39ff 	add.w	r9, r5, #4294967295
 8005df6:	f8ca 9000 	str.w	r9, [sl]
 8005dfa:	e7f2      	b.n	8005de2 <_strtol_l.isra.0+0xca>
 8005dfc:	2430      	movs	r4, #48	; 0x30
 8005dfe:	2e00      	cmp	r6, #0
 8005e00:	d1af      	bne.n	8005d62 <_strtol_l.isra.0+0x4a>
 8005e02:	2608      	movs	r6, #8
 8005e04:	e7ad      	b.n	8005d62 <_strtol_l.isra.0+0x4a>
 8005e06:	2c30      	cmp	r4, #48	; 0x30
 8005e08:	d0a3      	beq.n	8005d52 <_strtol_l.isra.0+0x3a>
 8005e0a:	260a      	movs	r6, #10
 8005e0c:	e7a9      	b.n	8005d62 <_strtol_l.isra.0+0x4a>
	...

08005e10 <_strtol_r>:
 8005e10:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8005e12:	4c06      	ldr	r4, [pc, #24]	; (8005e2c <_strtol_r+0x1c>)
 8005e14:	4d06      	ldr	r5, [pc, #24]	; (8005e30 <_strtol_r+0x20>)
 8005e16:	6824      	ldr	r4, [r4, #0]
 8005e18:	6a24      	ldr	r4, [r4, #32]
 8005e1a:	2c00      	cmp	r4, #0
 8005e1c:	bf08      	it	eq
 8005e1e:	462c      	moveq	r4, r5
 8005e20:	9400      	str	r4, [sp, #0]
 8005e22:	f7ff ff79 	bl	8005d18 <_strtol_l.isra.0>
 8005e26:	b003      	add	sp, #12
 8005e28:	bd30      	pop	{r4, r5, pc}
 8005e2a:	bf00      	nop
 8005e2c:	20000014 	.word	0x20000014
 8005e30:	20000078 	.word	0x20000078

08005e34 <quorem>:
 8005e34:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005e38:	6903      	ldr	r3, [r0, #16]
 8005e3a:	690c      	ldr	r4, [r1, #16]
 8005e3c:	4680      	mov	r8, r0
 8005e3e:	42a3      	cmp	r3, r4
 8005e40:	f2c0 8084 	blt.w	8005f4c <quorem+0x118>
 8005e44:	3c01      	subs	r4, #1
 8005e46:	f101 0714 	add.w	r7, r1, #20
 8005e4a:	f100 0614 	add.w	r6, r0, #20
 8005e4e:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 8005e52:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 8005e56:	3501      	adds	r5, #1
 8005e58:	fbb0 f5f5 	udiv	r5, r0, r5
 8005e5c:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 8005e60:	eb06 030c 	add.w	r3, r6, ip
 8005e64:	eb07 090c 	add.w	r9, r7, ip
 8005e68:	9301      	str	r3, [sp, #4]
 8005e6a:	b39d      	cbz	r5, 8005ed4 <quorem+0xa0>
 8005e6c:	f04f 0a00 	mov.w	sl, #0
 8005e70:	4638      	mov	r0, r7
 8005e72:	46b6      	mov	lr, r6
 8005e74:	46d3      	mov	fp, sl
 8005e76:	f850 2b04 	ldr.w	r2, [r0], #4
 8005e7a:	b293      	uxth	r3, r2
 8005e7c:	fb05 a303 	mla	r3, r5, r3, sl
 8005e80:	0c12      	lsrs	r2, r2, #16
 8005e82:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8005e86:	fb05 a202 	mla	r2, r5, r2, sl
 8005e8a:	b29b      	uxth	r3, r3
 8005e8c:	ebab 0303 	sub.w	r3, fp, r3
 8005e90:	f8de b000 	ldr.w	fp, [lr]
 8005e94:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 8005e98:	fa1f fb8b 	uxth.w	fp, fp
 8005e9c:	445b      	add	r3, fp
 8005e9e:	fa1f fb82 	uxth.w	fp, r2
 8005ea2:	f8de 2000 	ldr.w	r2, [lr]
 8005ea6:	4581      	cmp	r9, r0
 8005ea8:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 8005eac:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8005eb0:	b29b      	uxth	r3, r3
 8005eb2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8005eb6:	ea4f 4b22 	mov.w	fp, r2, asr #16
 8005eba:	f84e 3b04 	str.w	r3, [lr], #4
 8005ebe:	d2da      	bcs.n	8005e76 <quorem+0x42>
 8005ec0:	f856 300c 	ldr.w	r3, [r6, ip]
 8005ec4:	b933      	cbnz	r3, 8005ed4 <quorem+0xa0>
 8005ec6:	9b01      	ldr	r3, [sp, #4]
 8005ec8:	3b04      	subs	r3, #4
 8005eca:	429e      	cmp	r6, r3
 8005ecc:	461a      	mov	r2, r3
 8005ece:	d331      	bcc.n	8005f34 <quorem+0x100>
 8005ed0:	f8c8 4010 	str.w	r4, [r8, #16]
 8005ed4:	4640      	mov	r0, r8
 8005ed6:	f001 fc7b 	bl	80077d0 <__mcmp>
 8005eda:	2800      	cmp	r0, #0
 8005edc:	db26      	blt.n	8005f2c <quorem+0xf8>
 8005ede:	4630      	mov	r0, r6
 8005ee0:	f04f 0c00 	mov.w	ip, #0
 8005ee4:	3501      	adds	r5, #1
 8005ee6:	f857 1b04 	ldr.w	r1, [r7], #4
 8005eea:	f8d0 e000 	ldr.w	lr, [r0]
 8005eee:	b28b      	uxth	r3, r1
 8005ef0:	ebac 0303 	sub.w	r3, ip, r3
 8005ef4:	fa1f f28e 	uxth.w	r2, lr
 8005ef8:	4413      	add	r3, r2
 8005efa:	0c0a      	lsrs	r2, r1, #16
 8005efc:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8005f00:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8005f04:	b29b      	uxth	r3, r3
 8005f06:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8005f0a:	45b9      	cmp	r9, r7
 8005f0c:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8005f10:	f840 3b04 	str.w	r3, [r0], #4
 8005f14:	d2e7      	bcs.n	8005ee6 <quorem+0xb2>
 8005f16:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 8005f1a:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 8005f1e:	b92a      	cbnz	r2, 8005f2c <quorem+0xf8>
 8005f20:	3b04      	subs	r3, #4
 8005f22:	429e      	cmp	r6, r3
 8005f24:	461a      	mov	r2, r3
 8005f26:	d30b      	bcc.n	8005f40 <quorem+0x10c>
 8005f28:	f8c8 4010 	str.w	r4, [r8, #16]
 8005f2c:	4628      	mov	r0, r5
 8005f2e:	b003      	add	sp, #12
 8005f30:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005f34:	6812      	ldr	r2, [r2, #0]
 8005f36:	3b04      	subs	r3, #4
 8005f38:	2a00      	cmp	r2, #0
 8005f3a:	d1c9      	bne.n	8005ed0 <quorem+0x9c>
 8005f3c:	3c01      	subs	r4, #1
 8005f3e:	e7c4      	b.n	8005eca <quorem+0x96>
 8005f40:	6812      	ldr	r2, [r2, #0]
 8005f42:	3b04      	subs	r3, #4
 8005f44:	2a00      	cmp	r2, #0
 8005f46:	d1ef      	bne.n	8005f28 <quorem+0xf4>
 8005f48:	3c01      	subs	r4, #1
 8005f4a:	e7ea      	b.n	8005f22 <quorem+0xee>
 8005f4c:	2000      	movs	r0, #0
 8005f4e:	e7ee      	b.n	8005f2e <quorem+0xfa>

08005f50 <_dtoa_r>:
 8005f50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005f54:	4616      	mov	r6, r2
 8005f56:	461f      	mov	r7, r3
 8005f58:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8005f5a:	b095      	sub	sp, #84	; 0x54
 8005f5c:	4604      	mov	r4, r0
 8005f5e:	f8dd 8084 	ldr.w	r8, [sp, #132]	; 0x84
 8005f62:	e9cd 6702 	strd	r6, r7, [sp, #8]
 8005f66:	b93d      	cbnz	r5, 8005f78 <_dtoa_r+0x28>
 8005f68:	2010      	movs	r0, #16
 8005f6a:	f001 f9ab 	bl	80072c4 <malloc>
 8005f6e:	6260      	str	r0, [r4, #36]	; 0x24
 8005f70:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8005f74:	6005      	str	r5, [r0, #0]
 8005f76:	60c5      	str	r5, [r0, #12]
 8005f78:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005f7a:	6819      	ldr	r1, [r3, #0]
 8005f7c:	b151      	cbz	r1, 8005f94 <_dtoa_r+0x44>
 8005f7e:	685a      	ldr	r2, [r3, #4]
 8005f80:	2301      	movs	r3, #1
 8005f82:	4093      	lsls	r3, r2
 8005f84:	604a      	str	r2, [r1, #4]
 8005f86:	608b      	str	r3, [r1, #8]
 8005f88:	4620      	mov	r0, r4
 8005f8a:	f001 fa02 	bl	8007392 <_Bfree>
 8005f8e:	2200      	movs	r2, #0
 8005f90:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005f92:	601a      	str	r2, [r3, #0]
 8005f94:	1e3b      	subs	r3, r7, #0
 8005f96:	bfaf      	iteee	ge
 8005f98:	2300      	movge	r3, #0
 8005f9a:	2201      	movlt	r2, #1
 8005f9c:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8005fa0:	9303      	strlt	r3, [sp, #12]
 8005fa2:	bfac      	ite	ge
 8005fa4:	f8c8 3000 	strge.w	r3, [r8]
 8005fa8:	f8c8 2000 	strlt.w	r2, [r8]
 8005fac:	4bae      	ldr	r3, [pc, #696]	; (8006268 <_dtoa_r+0x318>)
 8005fae:	f8dd 800c 	ldr.w	r8, [sp, #12]
 8005fb2:	ea33 0308 	bics.w	r3, r3, r8
 8005fb6:	d11b      	bne.n	8005ff0 <_dtoa_r+0xa0>
 8005fb8:	f242 730f 	movw	r3, #9999	; 0x270f
 8005fbc:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8005fbe:	6013      	str	r3, [r2, #0]
 8005fc0:	9b02      	ldr	r3, [sp, #8]
 8005fc2:	b923      	cbnz	r3, 8005fce <_dtoa_r+0x7e>
 8005fc4:	f3c8 0013 	ubfx	r0, r8, #0, #20
 8005fc8:	2800      	cmp	r0, #0
 8005fca:	f000 8545 	beq.w	8006a58 <_dtoa_r+0xb08>
 8005fce:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8005fd0:	b953      	cbnz	r3, 8005fe8 <_dtoa_r+0x98>
 8005fd2:	4ba6      	ldr	r3, [pc, #664]	; (800626c <_dtoa_r+0x31c>)
 8005fd4:	e021      	b.n	800601a <_dtoa_r+0xca>
 8005fd6:	4ba6      	ldr	r3, [pc, #664]	; (8006270 <_dtoa_r+0x320>)
 8005fd8:	9306      	str	r3, [sp, #24]
 8005fda:	3308      	adds	r3, #8
 8005fdc:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8005fde:	6013      	str	r3, [r2, #0]
 8005fe0:	9806      	ldr	r0, [sp, #24]
 8005fe2:	b015      	add	sp, #84	; 0x54
 8005fe4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005fe8:	4ba0      	ldr	r3, [pc, #640]	; (800626c <_dtoa_r+0x31c>)
 8005fea:	9306      	str	r3, [sp, #24]
 8005fec:	3303      	adds	r3, #3
 8005fee:	e7f5      	b.n	8005fdc <_dtoa_r+0x8c>
 8005ff0:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8005ff4:	2200      	movs	r2, #0
 8005ff6:	2300      	movs	r3, #0
 8005ff8:	4630      	mov	r0, r6
 8005ffa:	4639      	mov	r1, r7
 8005ffc:	f7fa fcd4 	bl	80009a8 <__aeabi_dcmpeq>
 8006000:	4682      	mov	sl, r0
 8006002:	b160      	cbz	r0, 800601e <_dtoa_r+0xce>
 8006004:	2301      	movs	r3, #1
 8006006:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8006008:	6013      	str	r3, [r2, #0]
 800600a:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800600c:	2b00      	cmp	r3, #0
 800600e:	f000 8520 	beq.w	8006a52 <_dtoa_r+0xb02>
 8006012:	4b98      	ldr	r3, [pc, #608]	; (8006274 <_dtoa_r+0x324>)
 8006014:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8006016:	6013      	str	r3, [r2, #0]
 8006018:	3b01      	subs	r3, #1
 800601a:	9306      	str	r3, [sp, #24]
 800601c:	e7e0      	b.n	8005fe0 <_dtoa_r+0x90>
 800601e:	ab12      	add	r3, sp, #72	; 0x48
 8006020:	9301      	str	r3, [sp, #4]
 8006022:	ab13      	add	r3, sp, #76	; 0x4c
 8006024:	9300      	str	r3, [sp, #0]
 8006026:	4632      	mov	r2, r6
 8006028:	463b      	mov	r3, r7
 800602a:	4620      	mov	r0, r4
 800602c:	f001 fcbe 	bl	80079ac <__d2b>
 8006030:	f3c8 550a 	ubfx	r5, r8, #20, #11
 8006034:	4683      	mov	fp, r0
 8006036:	2d00      	cmp	r5, #0
 8006038:	d07d      	beq.n	8006136 <_dtoa_r+0x1e6>
 800603a:	46b0      	mov	r8, r6
 800603c:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8006040:	f043 597f 	orr.w	r9, r3, #1069547520	; 0x3fc00000
 8006044:	f449 1940 	orr.w	r9, r9, #3145728	; 0x300000
 8006048:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800604c:	f8cd a040 	str.w	sl, [sp, #64]	; 0x40
 8006050:	2200      	movs	r2, #0
 8006052:	4b89      	ldr	r3, [pc, #548]	; (8006278 <_dtoa_r+0x328>)
 8006054:	4640      	mov	r0, r8
 8006056:	4649      	mov	r1, r9
 8006058:	f7fa f886 	bl	8000168 <__aeabi_dsub>
 800605c:	a37c      	add	r3, pc, #496	; (adr r3, 8006250 <_dtoa_r+0x300>)
 800605e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006062:	f7fa fa39 	bl	80004d8 <__aeabi_dmul>
 8006066:	a37c      	add	r3, pc, #496	; (adr r3, 8006258 <_dtoa_r+0x308>)
 8006068:	e9d3 2300 	ldrd	r2, r3, [r3]
 800606c:	f7fa f87e 	bl	800016c <__adddf3>
 8006070:	4606      	mov	r6, r0
 8006072:	4628      	mov	r0, r5
 8006074:	460f      	mov	r7, r1
 8006076:	f7fa f9c5 	bl	8000404 <__aeabi_i2d>
 800607a:	a379      	add	r3, pc, #484	; (adr r3, 8006260 <_dtoa_r+0x310>)
 800607c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006080:	f7fa fa2a 	bl	80004d8 <__aeabi_dmul>
 8006084:	4602      	mov	r2, r0
 8006086:	460b      	mov	r3, r1
 8006088:	4630      	mov	r0, r6
 800608a:	4639      	mov	r1, r7
 800608c:	f7fa f86e 	bl	800016c <__adddf3>
 8006090:	4606      	mov	r6, r0
 8006092:	460f      	mov	r7, r1
 8006094:	f7fa fcd0 	bl	8000a38 <__aeabi_d2iz>
 8006098:	2200      	movs	r2, #0
 800609a:	4682      	mov	sl, r0
 800609c:	2300      	movs	r3, #0
 800609e:	4630      	mov	r0, r6
 80060a0:	4639      	mov	r1, r7
 80060a2:	f7fa fc8b 	bl	80009bc <__aeabi_dcmplt>
 80060a6:	b148      	cbz	r0, 80060bc <_dtoa_r+0x16c>
 80060a8:	4650      	mov	r0, sl
 80060aa:	f7fa f9ab 	bl	8000404 <__aeabi_i2d>
 80060ae:	4632      	mov	r2, r6
 80060b0:	463b      	mov	r3, r7
 80060b2:	f7fa fc79 	bl	80009a8 <__aeabi_dcmpeq>
 80060b6:	b908      	cbnz	r0, 80060bc <_dtoa_r+0x16c>
 80060b8:	f10a 3aff 	add.w	sl, sl, #4294967295
 80060bc:	f1ba 0f16 	cmp.w	sl, #22
 80060c0:	d85a      	bhi.n	8006178 <_dtoa_r+0x228>
 80060c2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80060c6:	496d      	ldr	r1, [pc, #436]	; (800627c <_dtoa_r+0x32c>)
 80060c8:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 80060cc:	e9d1 0100 	ldrd	r0, r1, [r1]
 80060d0:	f7fa fc92 	bl	80009f8 <__aeabi_dcmpgt>
 80060d4:	2800      	cmp	r0, #0
 80060d6:	d051      	beq.n	800617c <_dtoa_r+0x22c>
 80060d8:	2300      	movs	r3, #0
 80060da:	f10a 3aff 	add.w	sl, sl, #4294967295
 80060de:	930d      	str	r3, [sp, #52]	; 0x34
 80060e0:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80060e2:	1b5d      	subs	r5, r3, r5
 80060e4:	1e6b      	subs	r3, r5, #1
 80060e6:	9307      	str	r3, [sp, #28]
 80060e8:	bf43      	ittte	mi
 80060ea:	2300      	movmi	r3, #0
 80060ec:	f1c5 0901 	rsbmi	r9, r5, #1
 80060f0:	9307      	strmi	r3, [sp, #28]
 80060f2:	f04f 0900 	movpl.w	r9, #0
 80060f6:	f1ba 0f00 	cmp.w	sl, #0
 80060fa:	db41      	blt.n	8006180 <_dtoa_r+0x230>
 80060fc:	9b07      	ldr	r3, [sp, #28]
 80060fe:	f8cd a030 	str.w	sl, [sp, #48]	; 0x30
 8006102:	4453      	add	r3, sl
 8006104:	9307      	str	r3, [sp, #28]
 8006106:	2300      	movs	r3, #0
 8006108:	9308      	str	r3, [sp, #32]
 800610a:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800610c:	2b09      	cmp	r3, #9
 800610e:	f200 808f 	bhi.w	8006230 <_dtoa_r+0x2e0>
 8006112:	2b05      	cmp	r3, #5
 8006114:	bfc4      	itt	gt
 8006116:	3b04      	subgt	r3, #4
 8006118:	931e      	strgt	r3, [sp, #120]	; 0x78
 800611a:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800611c:	bfc8      	it	gt
 800611e:	2500      	movgt	r5, #0
 8006120:	f1a3 0302 	sub.w	r3, r3, #2
 8006124:	bfd8      	it	le
 8006126:	2501      	movle	r5, #1
 8006128:	2b03      	cmp	r3, #3
 800612a:	f200 808d 	bhi.w	8006248 <_dtoa_r+0x2f8>
 800612e:	e8df f003 	tbb	[pc, r3]
 8006132:	7d7b      	.short	0x7d7b
 8006134:	6f2f      	.short	0x6f2f
 8006136:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 800613a:	441d      	add	r5, r3
 800613c:	f205 4032 	addw	r0, r5, #1074	; 0x432
 8006140:	2820      	cmp	r0, #32
 8006142:	dd13      	ble.n	800616c <_dtoa_r+0x21c>
 8006144:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
 8006148:	9b02      	ldr	r3, [sp, #8]
 800614a:	fa08 f800 	lsl.w	r8, r8, r0
 800614e:	f205 4012 	addw	r0, r5, #1042	; 0x412
 8006152:	fa23 f000 	lsr.w	r0, r3, r0
 8006156:	ea48 0000 	orr.w	r0, r8, r0
 800615a:	f7fa f943 	bl	80003e4 <__aeabi_ui2d>
 800615e:	2301      	movs	r3, #1
 8006160:	4680      	mov	r8, r0
 8006162:	f1a1 79f8 	sub.w	r9, r1, #32505856	; 0x1f00000
 8006166:	3d01      	subs	r5, #1
 8006168:	9310      	str	r3, [sp, #64]	; 0x40
 800616a:	e771      	b.n	8006050 <_dtoa_r+0x100>
 800616c:	9b02      	ldr	r3, [sp, #8]
 800616e:	f1c0 0020 	rsb	r0, r0, #32
 8006172:	fa03 f000 	lsl.w	r0, r3, r0
 8006176:	e7f0      	b.n	800615a <_dtoa_r+0x20a>
 8006178:	2301      	movs	r3, #1
 800617a:	e7b0      	b.n	80060de <_dtoa_r+0x18e>
 800617c:	900d      	str	r0, [sp, #52]	; 0x34
 800617e:	e7af      	b.n	80060e0 <_dtoa_r+0x190>
 8006180:	f1ca 0300 	rsb	r3, sl, #0
 8006184:	9308      	str	r3, [sp, #32]
 8006186:	2300      	movs	r3, #0
 8006188:	eba9 090a 	sub.w	r9, r9, sl
 800618c:	930c      	str	r3, [sp, #48]	; 0x30
 800618e:	e7bc      	b.n	800610a <_dtoa_r+0x1ba>
 8006190:	2301      	movs	r3, #1
 8006192:	9309      	str	r3, [sp, #36]	; 0x24
 8006194:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8006196:	2b00      	cmp	r3, #0
 8006198:	dd74      	ble.n	8006284 <_dtoa_r+0x334>
 800619a:	4698      	mov	r8, r3
 800619c:	9304      	str	r3, [sp, #16]
 800619e:	2200      	movs	r2, #0
 80061a0:	6a66      	ldr	r6, [r4, #36]	; 0x24
 80061a2:	6072      	str	r2, [r6, #4]
 80061a4:	2204      	movs	r2, #4
 80061a6:	f102 0014 	add.w	r0, r2, #20
 80061aa:	4298      	cmp	r0, r3
 80061ac:	6871      	ldr	r1, [r6, #4]
 80061ae:	d96e      	bls.n	800628e <_dtoa_r+0x33e>
 80061b0:	4620      	mov	r0, r4
 80061b2:	f001 f8ba 	bl	800732a <_Balloc>
 80061b6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80061b8:	6030      	str	r0, [r6, #0]
 80061ba:	681b      	ldr	r3, [r3, #0]
 80061bc:	f1b8 0f0e 	cmp.w	r8, #14
 80061c0:	9306      	str	r3, [sp, #24]
 80061c2:	f200 80ed 	bhi.w	80063a0 <_dtoa_r+0x450>
 80061c6:	2d00      	cmp	r5, #0
 80061c8:	f000 80ea 	beq.w	80063a0 <_dtoa_r+0x450>
 80061cc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80061d0:	f1ba 0f00 	cmp.w	sl, #0
 80061d4:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 80061d8:	dd77      	ble.n	80062ca <_dtoa_r+0x37a>
 80061da:	4a28      	ldr	r2, [pc, #160]	; (800627c <_dtoa_r+0x32c>)
 80061dc:	f00a 030f 	and.w	r3, sl, #15
 80061e0:	ea4f 162a 	mov.w	r6, sl, asr #4
 80061e4:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 80061e8:	06f0      	lsls	r0, r6, #27
 80061ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80061ee:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 80061f2:	d568      	bpl.n	80062c6 <_dtoa_r+0x376>
 80061f4:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 80061f8:	4b21      	ldr	r3, [pc, #132]	; (8006280 <_dtoa_r+0x330>)
 80061fa:	2503      	movs	r5, #3
 80061fc:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8006200:	f7fa fa94 	bl	800072c <__aeabi_ddiv>
 8006204:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006208:	f006 060f 	and.w	r6, r6, #15
 800620c:	4f1c      	ldr	r7, [pc, #112]	; (8006280 <_dtoa_r+0x330>)
 800620e:	e04f      	b.n	80062b0 <_dtoa_r+0x360>
 8006210:	2301      	movs	r3, #1
 8006212:	9309      	str	r3, [sp, #36]	; 0x24
 8006214:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8006216:	4453      	add	r3, sl
 8006218:	f103 0801 	add.w	r8, r3, #1
 800621c:	9304      	str	r3, [sp, #16]
 800621e:	4643      	mov	r3, r8
 8006220:	2b01      	cmp	r3, #1
 8006222:	bfb8      	it	lt
 8006224:	2301      	movlt	r3, #1
 8006226:	e7ba      	b.n	800619e <_dtoa_r+0x24e>
 8006228:	2300      	movs	r3, #0
 800622a:	e7b2      	b.n	8006192 <_dtoa_r+0x242>
 800622c:	2300      	movs	r3, #0
 800622e:	e7f0      	b.n	8006212 <_dtoa_r+0x2c2>
 8006230:	2501      	movs	r5, #1
 8006232:	2300      	movs	r3, #0
 8006234:	9509      	str	r5, [sp, #36]	; 0x24
 8006236:	931e      	str	r3, [sp, #120]	; 0x78
 8006238:	f04f 33ff 	mov.w	r3, #4294967295
 800623c:	2200      	movs	r2, #0
 800623e:	9304      	str	r3, [sp, #16]
 8006240:	4698      	mov	r8, r3
 8006242:	2312      	movs	r3, #18
 8006244:	921f      	str	r2, [sp, #124]	; 0x7c
 8006246:	e7aa      	b.n	800619e <_dtoa_r+0x24e>
 8006248:	2301      	movs	r3, #1
 800624a:	9309      	str	r3, [sp, #36]	; 0x24
 800624c:	e7f4      	b.n	8006238 <_dtoa_r+0x2e8>
 800624e:	bf00      	nop
 8006250:	636f4361 	.word	0x636f4361
 8006254:	3fd287a7 	.word	0x3fd287a7
 8006258:	8b60c8b3 	.word	0x8b60c8b3
 800625c:	3fc68a28 	.word	0x3fc68a28
 8006260:	509f79fb 	.word	0x509f79fb
 8006264:	3fd34413 	.word	0x3fd34413
 8006268:	7ff00000 	.word	0x7ff00000
 800626c:	080088a1 	.word	0x080088a1
 8006270:	08008898 	.word	0x08008898
 8006274:	08008819 	.word	0x08008819
 8006278:	3ff80000 	.word	0x3ff80000
 800627c:	08008940 	.word	0x08008940
 8006280:	08008918 	.word	0x08008918
 8006284:	2301      	movs	r3, #1
 8006286:	9304      	str	r3, [sp, #16]
 8006288:	4698      	mov	r8, r3
 800628a:	461a      	mov	r2, r3
 800628c:	e7da      	b.n	8006244 <_dtoa_r+0x2f4>
 800628e:	3101      	adds	r1, #1
 8006290:	6071      	str	r1, [r6, #4]
 8006292:	0052      	lsls	r2, r2, #1
 8006294:	e787      	b.n	80061a6 <_dtoa_r+0x256>
 8006296:	07f1      	lsls	r1, r6, #31
 8006298:	d508      	bpl.n	80062ac <_dtoa_r+0x35c>
 800629a:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800629e:	e9d7 2300 	ldrd	r2, r3, [r7]
 80062a2:	f7fa f919 	bl	80004d8 <__aeabi_dmul>
 80062a6:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 80062aa:	3501      	adds	r5, #1
 80062ac:	1076      	asrs	r6, r6, #1
 80062ae:	3708      	adds	r7, #8
 80062b0:	2e00      	cmp	r6, #0
 80062b2:	d1f0      	bne.n	8006296 <_dtoa_r+0x346>
 80062b4:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 80062b8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80062bc:	f7fa fa36 	bl	800072c <__aeabi_ddiv>
 80062c0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80062c4:	e01b      	b.n	80062fe <_dtoa_r+0x3ae>
 80062c6:	2502      	movs	r5, #2
 80062c8:	e7a0      	b.n	800620c <_dtoa_r+0x2bc>
 80062ca:	f000 80a4 	beq.w	8006416 <_dtoa_r+0x4c6>
 80062ce:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 80062d2:	f1ca 0600 	rsb	r6, sl, #0
 80062d6:	4ba0      	ldr	r3, [pc, #640]	; (8006558 <_dtoa_r+0x608>)
 80062d8:	f006 020f 	and.w	r2, r6, #15
 80062dc:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80062e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80062e4:	f7fa f8f8 	bl	80004d8 <__aeabi_dmul>
 80062e8:	2502      	movs	r5, #2
 80062ea:	2300      	movs	r3, #0
 80062ec:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80062f0:	4f9a      	ldr	r7, [pc, #616]	; (800655c <_dtoa_r+0x60c>)
 80062f2:	1136      	asrs	r6, r6, #4
 80062f4:	2e00      	cmp	r6, #0
 80062f6:	f040 8083 	bne.w	8006400 <_dtoa_r+0x4b0>
 80062fa:	2b00      	cmp	r3, #0
 80062fc:	d1e0      	bne.n	80062c0 <_dtoa_r+0x370>
 80062fe:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006300:	2b00      	cmp	r3, #0
 8006302:	f000 808a 	beq.w	800641a <_dtoa_r+0x4ca>
 8006306:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800630a:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 800630e:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8006312:	2200      	movs	r2, #0
 8006314:	4b92      	ldr	r3, [pc, #584]	; (8006560 <_dtoa_r+0x610>)
 8006316:	f7fa fb51 	bl	80009bc <__aeabi_dcmplt>
 800631a:	2800      	cmp	r0, #0
 800631c:	d07d      	beq.n	800641a <_dtoa_r+0x4ca>
 800631e:	f1b8 0f00 	cmp.w	r8, #0
 8006322:	d07a      	beq.n	800641a <_dtoa_r+0x4ca>
 8006324:	9b04      	ldr	r3, [sp, #16]
 8006326:	2b00      	cmp	r3, #0
 8006328:	dd36      	ble.n	8006398 <_dtoa_r+0x448>
 800632a:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800632e:	2200      	movs	r2, #0
 8006330:	4b8c      	ldr	r3, [pc, #560]	; (8006564 <_dtoa_r+0x614>)
 8006332:	f7fa f8d1 	bl	80004d8 <__aeabi_dmul>
 8006336:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800633a:	9e04      	ldr	r6, [sp, #16]
 800633c:	f10a 37ff 	add.w	r7, sl, #4294967295
 8006340:	3501      	adds	r5, #1
 8006342:	4628      	mov	r0, r5
 8006344:	f7fa f85e 	bl	8000404 <__aeabi_i2d>
 8006348:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800634c:	f7fa f8c4 	bl	80004d8 <__aeabi_dmul>
 8006350:	2200      	movs	r2, #0
 8006352:	4b85      	ldr	r3, [pc, #532]	; (8006568 <_dtoa_r+0x618>)
 8006354:	f7f9 ff0a 	bl	800016c <__adddf3>
 8006358:	f1a1 7550 	sub.w	r5, r1, #54525952	; 0x3400000
 800635c:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8006360:	950b      	str	r5, [sp, #44]	; 0x2c
 8006362:	2e00      	cmp	r6, #0
 8006364:	d15c      	bne.n	8006420 <_dtoa_r+0x4d0>
 8006366:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800636a:	2200      	movs	r2, #0
 800636c:	4b7f      	ldr	r3, [pc, #508]	; (800656c <_dtoa_r+0x61c>)
 800636e:	f7f9 fefb 	bl	8000168 <__aeabi_dsub>
 8006372:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006374:	462b      	mov	r3, r5
 8006376:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800637a:	f7fa fb3d 	bl	80009f8 <__aeabi_dcmpgt>
 800637e:	2800      	cmp	r0, #0
 8006380:	f040 8281 	bne.w	8006886 <_dtoa_r+0x936>
 8006384:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006388:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800638a:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 800638e:	f7fa fb15 	bl	80009bc <__aeabi_dcmplt>
 8006392:	2800      	cmp	r0, #0
 8006394:	f040 8275 	bne.w	8006882 <_dtoa_r+0x932>
 8006398:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 800639c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80063a0:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80063a2:	2b00      	cmp	r3, #0
 80063a4:	f2c0 814b 	blt.w	800663e <_dtoa_r+0x6ee>
 80063a8:	f1ba 0f0e 	cmp.w	sl, #14
 80063ac:	f300 8147 	bgt.w	800663e <_dtoa_r+0x6ee>
 80063b0:	4b69      	ldr	r3, [pc, #420]	; (8006558 <_dtoa_r+0x608>)
 80063b2:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 80063b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80063ba:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80063be:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 80063c0:	2b00      	cmp	r3, #0
 80063c2:	f280 80d7 	bge.w	8006574 <_dtoa_r+0x624>
 80063c6:	f1b8 0f00 	cmp.w	r8, #0
 80063ca:	f300 80d3 	bgt.w	8006574 <_dtoa_r+0x624>
 80063ce:	f040 8257 	bne.w	8006880 <_dtoa_r+0x930>
 80063d2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80063d6:	2200      	movs	r2, #0
 80063d8:	4b64      	ldr	r3, [pc, #400]	; (800656c <_dtoa_r+0x61c>)
 80063da:	f7fa f87d 	bl	80004d8 <__aeabi_dmul>
 80063de:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80063e2:	f7fa faff 	bl	80009e4 <__aeabi_dcmpge>
 80063e6:	4646      	mov	r6, r8
 80063e8:	4647      	mov	r7, r8
 80063ea:	2800      	cmp	r0, #0
 80063ec:	f040 822d 	bne.w	800684a <_dtoa_r+0x8fa>
 80063f0:	9b06      	ldr	r3, [sp, #24]
 80063f2:	9a06      	ldr	r2, [sp, #24]
 80063f4:	1c5d      	adds	r5, r3, #1
 80063f6:	2331      	movs	r3, #49	; 0x31
 80063f8:	f10a 0a01 	add.w	sl, sl, #1
 80063fc:	7013      	strb	r3, [r2, #0]
 80063fe:	e228      	b.n	8006852 <_dtoa_r+0x902>
 8006400:	07f2      	lsls	r2, r6, #31
 8006402:	d505      	bpl.n	8006410 <_dtoa_r+0x4c0>
 8006404:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006408:	f7fa f866 	bl	80004d8 <__aeabi_dmul>
 800640c:	2301      	movs	r3, #1
 800640e:	3501      	adds	r5, #1
 8006410:	1076      	asrs	r6, r6, #1
 8006412:	3708      	adds	r7, #8
 8006414:	e76e      	b.n	80062f4 <_dtoa_r+0x3a4>
 8006416:	2502      	movs	r5, #2
 8006418:	e771      	b.n	80062fe <_dtoa_r+0x3ae>
 800641a:	4657      	mov	r7, sl
 800641c:	4646      	mov	r6, r8
 800641e:	e790      	b.n	8006342 <_dtoa_r+0x3f2>
 8006420:	4b4d      	ldr	r3, [pc, #308]	; (8006558 <_dtoa_r+0x608>)
 8006422:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8006426:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 800642a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800642c:	2b00      	cmp	r3, #0
 800642e:	d048      	beq.n	80064c2 <_dtoa_r+0x572>
 8006430:	4602      	mov	r2, r0
 8006432:	460b      	mov	r3, r1
 8006434:	2000      	movs	r0, #0
 8006436:	494e      	ldr	r1, [pc, #312]	; (8006570 <_dtoa_r+0x620>)
 8006438:	f7fa f978 	bl	800072c <__aeabi_ddiv>
 800643c:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8006440:	f7f9 fe92 	bl	8000168 <__aeabi_dsub>
 8006444:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8006448:	9d06      	ldr	r5, [sp, #24]
 800644a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800644e:	f7fa faf3 	bl	8000a38 <__aeabi_d2iz>
 8006452:	9011      	str	r0, [sp, #68]	; 0x44
 8006454:	f7f9 ffd6 	bl	8000404 <__aeabi_i2d>
 8006458:	4602      	mov	r2, r0
 800645a:	460b      	mov	r3, r1
 800645c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006460:	f7f9 fe82 	bl	8000168 <__aeabi_dsub>
 8006464:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8006466:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800646a:	3330      	adds	r3, #48	; 0x30
 800646c:	f805 3b01 	strb.w	r3, [r5], #1
 8006470:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8006474:	f7fa faa2 	bl	80009bc <__aeabi_dcmplt>
 8006478:	2800      	cmp	r0, #0
 800647a:	d163      	bne.n	8006544 <_dtoa_r+0x5f4>
 800647c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006480:	2000      	movs	r0, #0
 8006482:	4937      	ldr	r1, [pc, #220]	; (8006560 <_dtoa_r+0x610>)
 8006484:	f7f9 fe70 	bl	8000168 <__aeabi_dsub>
 8006488:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800648c:	f7fa fa96 	bl	80009bc <__aeabi_dcmplt>
 8006490:	2800      	cmp	r0, #0
 8006492:	f040 80b5 	bne.w	8006600 <_dtoa_r+0x6b0>
 8006496:	9b06      	ldr	r3, [sp, #24]
 8006498:	1aeb      	subs	r3, r5, r3
 800649a:	429e      	cmp	r6, r3
 800649c:	f77f af7c 	ble.w	8006398 <_dtoa_r+0x448>
 80064a0:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80064a4:	2200      	movs	r2, #0
 80064a6:	4b2f      	ldr	r3, [pc, #188]	; (8006564 <_dtoa_r+0x614>)
 80064a8:	f7fa f816 	bl	80004d8 <__aeabi_dmul>
 80064ac:	2200      	movs	r2, #0
 80064ae:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 80064b2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80064b6:	4b2b      	ldr	r3, [pc, #172]	; (8006564 <_dtoa_r+0x614>)
 80064b8:	f7fa f80e 	bl	80004d8 <__aeabi_dmul>
 80064bc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80064c0:	e7c3      	b.n	800644a <_dtoa_r+0x4fa>
 80064c2:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 80064c6:	f7fa f807 	bl	80004d8 <__aeabi_dmul>
 80064ca:	9b06      	ldr	r3, [sp, #24]
 80064cc:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 80064d0:	199d      	adds	r5, r3, r6
 80064d2:	461e      	mov	r6, r3
 80064d4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80064d8:	f7fa faae 	bl	8000a38 <__aeabi_d2iz>
 80064dc:	9011      	str	r0, [sp, #68]	; 0x44
 80064de:	f7f9 ff91 	bl	8000404 <__aeabi_i2d>
 80064e2:	4602      	mov	r2, r0
 80064e4:	460b      	mov	r3, r1
 80064e6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80064ea:	f7f9 fe3d 	bl	8000168 <__aeabi_dsub>
 80064ee:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80064f0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80064f4:	3330      	adds	r3, #48	; 0x30
 80064f6:	f806 3b01 	strb.w	r3, [r6], #1
 80064fa:	42ae      	cmp	r6, r5
 80064fc:	f04f 0200 	mov.w	r2, #0
 8006500:	d124      	bne.n	800654c <_dtoa_r+0x5fc>
 8006502:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8006506:	4b1a      	ldr	r3, [pc, #104]	; (8006570 <_dtoa_r+0x620>)
 8006508:	f7f9 fe30 	bl	800016c <__adddf3>
 800650c:	4602      	mov	r2, r0
 800650e:	460b      	mov	r3, r1
 8006510:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006514:	f7fa fa70 	bl	80009f8 <__aeabi_dcmpgt>
 8006518:	2800      	cmp	r0, #0
 800651a:	d171      	bne.n	8006600 <_dtoa_r+0x6b0>
 800651c:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8006520:	2000      	movs	r0, #0
 8006522:	4913      	ldr	r1, [pc, #76]	; (8006570 <_dtoa_r+0x620>)
 8006524:	f7f9 fe20 	bl	8000168 <__aeabi_dsub>
 8006528:	4602      	mov	r2, r0
 800652a:	460b      	mov	r3, r1
 800652c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006530:	f7fa fa44 	bl	80009bc <__aeabi_dcmplt>
 8006534:	2800      	cmp	r0, #0
 8006536:	f43f af2f 	beq.w	8006398 <_dtoa_r+0x448>
 800653a:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800653e:	1e6a      	subs	r2, r5, #1
 8006540:	2b30      	cmp	r3, #48	; 0x30
 8006542:	d001      	beq.n	8006548 <_dtoa_r+0x5f8>
 8006544:	46ba      	mov	sl, r7
 8006546:	e04a      	b.n	80065de <_dtoa_r+0x68e>
 8006548:	4615      	mov	r5, r2
 800654a:	e7f6      	b.n	800653a <_dtoa_r+0x5ea>
 800654c:	4b05      	ldr	r3, [pc, #20]	; (8006564 <_dtoa_r+0x614>)
 800654e:	f7f9 ffc3 	bl	80004d8 <__aeabi_dmul>
 8006552:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006556:	e7bd      	b.n	80064d4 <_dtoa_r+0x584>
 8006558:	08008940 	.word	0x08008940
 800655c:	08008918 	.word	0x08008918
 8006560:	3ff00000 	.word	0x3ff00000
 8006564:	40240000 	.word	0x40240000
 8006568:	401c0000 	.word	0x401c0000
 800656c:	40140000 	.word	0x40140000
 8006570:	3fe00000 	.word	0x3fe00000
 8006574:	9d06      	ldr	r5, [sp, #24]
 8006576:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800657a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800657e:	4630      	mov	r0, r6
 8006580:	4639      	mov	r1, r7
 8006582:	f7fa f8d3 	bl	800072c <__aeabi_ddiv>
 8006586:	f7fa fa57 	bl	8000a38 <__aeabi_d2iz>
 800658a:	4681      	mov	r9, r0
 800658c:	f7f9 ff3a 	bl	8000404 <__aeabi_i2d>
 8006590:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006594:	f7f9 ffa0 	bl	80004d8 <__aeabi_dmul>
 8006598:	4602      	mov	r2, r0
 800659a:	460b      	mov	r3, r1
 800659c:	4630      	mov	r0, r6
 800659e:	4639      	mov	r1, r7
 80065a0:	f7f9 fde2 	bl	8000168 <__aeabi_dsub>
 80065a4:	f109 0630 	add.w	r6, r9, #48	; 0x30
 80065a8:	f805 6b01 	strb.w	r6, [r5], #1
 80065ac:	9e06      	ldr	r6, [sp, #24]
 80065ae:	4602      	mov	r2, r0
 80065b0:	1bae      	subs	r6, r5, r6
 80065b2:	45b0      	cmp	r8, r6
 80065b4:	460b      	mov	r3, r1
 80065b6:	d135      	bne.n	8006624 <_dtoa_r+0x6d4>
 80065b8:	f7f9 fdd8 	bl	800016c <__adddf3>
 80065bc:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80065c0:	4606      	mov	r6, r0
 80065c2:	460f      	mov	r7, r1
 80065c4:	f7fa fa18 	bl	80009f8 <__aeabi_dcmpgt>
 80065c8:	b9c8      	cbnz	r0, 80065fe <_dtoa_r+0x6ae>
 80065ca:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80065ce:	4630      	mov	r0, r6
 80065d0:	4639      	mov	r1, r7
 80065d2:	f7fa f9e9 	bl	80009a8 <__aeabi_dcmpeq>
 80065d6:	b110      	cbz	r0, 80065de <_dtoa_r+0x68e>
 80065d8:	f019 0f01 	tst.w	r9, #1
 80065dc:	d10f      	bne.n	80065fe <_dtoa_r+0x6ae>
 80065de:	4659      	mov	r1, fp
 80065e0:	4620      	mov	r0, r4
 80065e2:	f000 fed6 	bl	8007392 <_Bfree>
 80065e6:	2300      	movs	r3, #0
 80065e8:	9a20      	ldr	r2, [sp, #128]	; 0x80
 80065ea:	702b      	strb	r3, [r5, #0]
 80065ec:	f10a 0301 	add.w	r3, sl, #1
 80065f0:	6013      	str	r3, [r2, #0]
 80065f2:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80065f4:	2b00      	cmp	r3, #0
 80065f6:	f43f acf3 	beq.w	8005fe0 <_dtoa_r+0x90>
 80065fa:	601d      	str	r5, [r3, #0]
 80065fc:	e4f0      	b.n	8005fe0 <_dtoa_r+0x90>
 80065fe:	4657      	mov	r7, sl
 8006600:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8006604:	1e6b      	subs	r3, r5, #1
 8006606:	2a39      	cmp	r2, #57	; 0x39
 8006608:	d106      	bne.n	8006618 <_dtoa_r+0x6c8>
 800660a:	9a06      	ldr	r2, [sp, #24]
 800660c:	429a      	cmp	r2, r3
 800660e:	d107      	bne.n	8006620 <_dtoa_r+0x6d0>
 8006610:	2330      	movs	r3, #48	; 0x30
 8006612:	7013      	strb	r3, [r2, #0]
 8006614:	4613      	mov	r3, r2
 8006616:	3701      	adds	r7, #1
 8006618:	781a      	ldrb	r2, [r3, #0]
 800661a:	3201      	adds	r2, #1
 800661c:	701a      	strb	r2, [r3, #0]
 800661e:	e791      	b.n	8006544 <_dtoa_r+0x5f4>
 8006620:	461d      	mov	r5, r3
 8006622:	e7ed      	b.n	8006600 <_dtoa_r+0x6b0>
 8006624:	2200      	movs	r2, #0
 8006626:	4b99      	ldr	r3, [pc, #612]	; (800688c <_dtoa_r+0x93c>)
 8006628:	f7f9 ff56 	bl	80004d8 <__aeabi_dmul>
 800662c:	2200      	movs	r2, #0
 800662e:	2300      	movs	r3, #0
 8006630:	4606      	mov	r6, r0
 8006632:	460f      	mov	r7, r1
 8006634:	f7fa f9b8 	bl	80009a8 <__aeabi_dcmpeq>
 8006638:	2800      	cmp	r0, #0
 800663a:	d09e      	beq.n	800657a <_dtoa_r+0x62a>
 800663c:	e7cf      	b.n	80065de <_dtoa_r+0x68e>
 800663e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006640:	2a00      	cmp	r2, #0
 8006642:	f000 8088 	beq.w	8006756 <_dtoa_r+0x806>
 8006646:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8006648:	2a01      	cmp	r2, #1
 800664a:	dc6d      	bgt.n	8006728 <_dtoa_r+0x7d8>
 800664c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800664e:	2a00      	cmp	r2, #0
 8006650:	d066      	beq.n	8006720 <_dtoa_r+0x7d0>
 8006652:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8006656:	464d      	mov	r5, r9
 8006658:	9e08      	ldr	r6, [sp, #32]
 800665a:	9a07      	ldr	r2, [sp, #28]
 800665c:	2101      	movs	r1, #1
 800665e:	441a      	add	r2, r3
 8006660:	4620      	mov	r0, r4
 8006662:	4499      	add	r9, r3
 8006664:	9207      	str	r2, [sp, #28]
 8006666:	f000 ff72 	bl	800754e <__i2b>
 800666a:	4607      	mov	r7, r0
 800666c:	2d00      	cmp	r5, #0
 800666e:	dd0b      	ble.n	8006688 <_dtoa_r+0x738>
 8006670:	9b07      	ldr	r3, [sp, #28]
 8006672:	2b00      	cmp	r3, #0
 8006674:	dd08      	ble.n	8006688 <_dtoa_r+0x738>
 8006676:	42ab      	cmp	r3, r5
 8006678:	bfa8      	it	ge
 800667a:	462b      	movge	r3, r5
 800667c:	9a07      	ldr	r2, [sp, #28]
 800667e:	eba9 0903 	sub.w	r9, r9, r3
 8006682:	1aed      	subs	r5, r5, r3
 8006684:	1ad3      	subs	r3, r2, r3
 8006686:	9307      	str	r3, [sp, #28]
 8006688:	9b08      	ldr	r3, [sp, #32]
 800668a:	b1eb      	cbz	r3, 80066c8 <_dtoa_r+0x778>
 800668c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800668e:	2b00      	cmp	r3, #0
 8006690:	d065      	beq.n	800675e <_dtoa_r+0x80e>
 8006692:	b18e      	cbz	r6, 80066b8 <_dtoa_r+0x768>
 8006694:	4639      	mov	r1, r7
 8006696:	4632      	mov	r2, r6
 8006698:	4620      	mov	r0, r4
 800669a:	f000 fff7 	bl	800768c <__pow5mult>
 800669e:	465a      	mov	r2, fp
 80066a0:	4601      	mov	r1, r0
 80066a2:	4607      	mov	r7, r0
 80066a4:	4620      	mov	r0, r4
 80066a6:	f000 ff5b 	bl	8007560 <__multiply>
 80066aa:	4659      	mov	r1, fp
 80066ac:	900a      	str	r0, [sp, #40]	; 0x28
 80066ae:	4620      	mov	r0, r4
 80066b0:	f000 fe6f 	bl	8007392 <_Bfree>
 80066b4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80066b6:	469b      	mov	fp, r3
 80066b8:	9b08      	ldr	r3, [sp, #32]
 80066ba:	1b9a      	subs	r2, r3, r6
 80066bc:	d004      	beq.n	80066c8 <_dtoa_r+0x778>
 80066be:	4659      	mov	r1, fp
 80066c0:	4620      	mov	r0, r4
 80066c2:	f000 ffe3 	bl	800768c <__pow5mult>
 80066c6:	4683      	mov	fp, r0
 80066c8:	2101      	movs	r1, #1
 80066ca:	4620      	mov	r0, r4
 80066cc:	f000 ff3f 	bl	800754e <__i2b>
 80066d0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80066d2:	4606      	mov	r6, r0
 80066d4:	2b00      	cmp	r3, #0
 80066d6:	f000 81c6 	beq.w	8006a66 <_dtoa_r+0xb16>
 80066da:	461a      	mov	r2, r3
 80066dc:	4601      	mov	r1, r0
 80066de:	4620      	mov	r0, r4
 80066e0:	f000 ffd4 	bl	800768c <__pow5mult>
 80066e4:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 80066e6:	4606      	mov	r6, r0
 80066e8:	2b01      	cmp	r3, #1
 80066ea:	dc3e      	bgt.n	800676a <_dtoa_r+0x81a>
 80066ec:	9b02      	ldr	r3, [sp, #8]
 80066ee:	2b00      	cmp	r3, #0
 80066f0:	d137      	bne.n	8006762 <_dtoa_r+0x812>
 80066f2:	9b03      	ldr	r3, [sp, #12]
 80066f4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80066f8:	2b00      	cmp	r3, #0
 80066fa:	d134      	bne.n	8006766 <_dtoa_r+0x816>
 80066fc:	9b03      	ldr	r3, [sp, #12]
 80066fe:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006702:	0d1b      	lsrs	r3, r3, #20
 8006704:	051b      	lsls	r3, r3, #20
 8006706:	b12b      	cbz	r3, 8006714 <_dtoa_r+0x7c4>
 8006708:	9b07      	ldr	r3, [sp, #28]
 800670a:	f109 0901 	add.w	r9, r9, #1
 800670e:	3301      	adds	r3, #1
 8006710:	9307      	str	r3, [sp, #28]
 8006712:	2301      	movs	r3, #1
 8006714:	9308      	str	r3, [sp, #32]
 8006716:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006718:	2b00      	cmp	r3, #0
 800671a:	d128      	bne.n	800676e <_dtoa_r+0x81e>
 800671c:	2001      	movs	r0, #1
 800671e:	e02e      	b.n	800677e <_dtoa_r+0x82e>
 8006720:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8006722:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8006726:	e796      	b.n	8006656 <_dtoa_r+0x706>
 8006728:	9b08      	ldr	r3, [sp, #32]
 800672a:	f108 36ff 	add.w	r6, r8, #4294967295
 800672e:	42b3      	cmp	r3, r6
 8006730:	bfb7      	itett	lt
 8006732:	9b08      	ldrlt	r3, [sp, #32]
 8006734:	1b9e      	subge	r6, r3, r6
 8006736:	1af2      	sublt	r2, r6, r3
 8006738:	9b0c      	ldrlt	r3, [sp, #48]	; 0x30
 800673a:	bfbf      	itttt	lt
 800673c:	9608      	strlt	r6, [sp, #32]
 800673e:	189b      	addlt	r3, r3, r2
 8006740:	930c      	strlt	r3, [sp, #48]	; 0x30
 8006742:	2600      	movlt	r6, #0
 8006744:	f1b8 0f00 	cmp.w	r8, #0
 8006748:	bfb9      	ittee	lt
 800674a:	eba9 0508 	sublt.w	r5, r9, r8
 800674e:	2300      	movlt	r3, #0
 8006750:	464d      	movge	r5, r9
 8006752:	4643      	movge	r3, r8
 8006754:	e781      	b.n	800665a <_dtoa_r+0x70a>
 8006756:	9e08      	ldr	r6, [sp, #32]
 8006758:	464d      	mov	r5, r9
 800675a:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800675c:	e786      	b.n	800666c <_dtoa_r+0x71c>
 800675e:	9a08      	ldr	r2, [sp, #32]
 8006760:	e7ad      	b.n	80066be <_dtoa_r+0x76e>
 8006762:	2300      	movs	r3, #0
 8006764:	e7d6      	b.n	8006714 <_dtoa_r+0x7c4>
 8006766:	9b02      	ldr	r3, [sp, #8]
 8006768:	e7d4      	b.n	8006714 <_dtoa_r+0x7c4>
 800676a:	2300      	movs	r3, #0
 800676c:	9308      	str	r3, [sp, #32]
 800676e:	6933      	ldr	r3, [r6, #16]
 8006770:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8006774:	6918      	ldr	r0, [r3, #16]
 8006776:	f000 fe9c 	bl	80074b2 <__hi0bits>
 800677a:	f1c0 0020 	rsb	r0, r0, #32
 800677e:	9b07      	ldr	r3, [sp, #28]
 8006780:	4418      	add	r0, r3
 8006782:	f010 001f 	ands.w	r0, r0, #31
 8006786:	d047      	beq.n	8006818 <_dtoa_r+0x8c8>
 8006788:	f1c0 0320 	rsb	r3, r0, #32
 800678c:	2b04      	cmp	r3, #4
 800678e:	dd3b      	ble.n	8006808 <_dtoa_r+0x8b8>
 8006790:	9b07      	ldr	r3, [sp, #28]
 8006792:	f1c0 001c 	rsb	r0, r0, #28
 8006796:	4481      	add	r9, r0
 8006798:	4405      	add	r5, r0
 800679a:	4403      	add	r3, r0
 800679c:	9307      	str	r3, [sp, #28]
 800679e:	f1b9 0f00 	cmp.w	r9, #0
 80067a2:	dd05      	ble.n	80067b0 <_dtoa_r+0x860>
 80067a4:	4659      	mov	r1, fp
 80067a6:	464a      	mov	r2, r9
 80067a8:	4620      	mov	r0, r4
 80067aa:	f000 ffbd 	bl	8007728 <__lshift>
 80067ae:	4683      	mov	fp, r0
 80067b0:	9b07      	ldr	r3, [sp, #28]
 80067b2:	2b00      	cmp	r3, #0
 80067b4:	dd05      	ble.n	80067c2 <_dtoa_r+0x872>
 80067b6:	4631      	mov	r1, r6
 80067b8:	461a      	mov	r2, r3
 80067ba:	4620      	mov	r0, r4
 80067bc:	f000 ffb4 	bl	8007728 <__lshift>
 80067c0:	4606      	mov	r6, r0
 80067c2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80067c4:	b353      	cbz	r3, 800681c <_dtoa_r+0x8cc>
 80067c6:	4631      	mov	r1, r6
 80067c8:	4658      	mov	r0, fp
 80067ca:	f001 f801 	bl	80077d0 <__mcmp>
 80067ce:	2800      	cmp	r0, #0
 80067d0:	da24      	bge.n	800681c <_dtoa_r+0x8cc>
 80067d2:	2300      	movs	r3, #0
 80067d4:	4659      	mov	r1, fp
 80067d6:	220a      	movs	r2, #10
 80067d8:	4620      	mov	r0, r4
 80067da:	f000 fdf1 	bl	80073c0 <__multadd>
 80067de:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80067e0:	f10a 3aff 	add.w	sl, sl, #4294967295
 80067e4:	4683      	mov	fp, r0
 80067e6:	2b00      	cmp	r3, #0
 80067e8:	f000 8144 	beq.w	8006a74 <_dtoa_r+0xb24>
 80067ec:	2300      	movs	r3, #0
 80067ee:	4639      	mov	r1, r7
 80067f0:	220a      	movs	r2, #10
 80067f2:	4620      	mov	r0, r4
 80067f4:	f000 fde4 	bl	80073c0 <__multadd>
 80067f8:	9b04      	ldr	r3, [sp, #16]
 80067fa:	4607      	mov	r7, r0
 80067fc:	2b00      	cmp	r3, #0
 80067fe:	dc4d      	bgt.n	800689c <_dtoa_r+0x94c>
 8006800:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8006802:	2b02      	cmp	r3, #2
 8006804:	dd4a      	ble.n	800689c <_dtoa_r+0x94c>
 8006806:	e011      	b.n	800682c <_dtoa_r+0x8dc>
 8006808:	d0c9      	beq.n	800679e <_dtoa_r+0x84e>
 800680a:	9a07      	ldr	r2, [sp, #28]
 800680c:	331c      	adds	r3, #28
 800680e:	441a      	add	r2, r3
 8006810:	4499      	add	r9, r3
 8006812:	441d      	add	r5, r3
 8006814:	4613      	mov	r3, r2
 8006816:	e7c1      	b.n	800679c <_dtoa_r+0x84c>
 8006818:	4603      	mov	r3, r0
 800681a:	e7f6      	b.n	800680a <_dtoa_r+0x8ba>
 800681c:	f1b8 0f00 	cmp.w	r8, #0
 8006820:	dc36      	bgt.n	8006890 <_dtoa_r+0x940>
 8006822:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8006824:	2b02      	cmp	r3, #2
 8006826:	dd33      	ble.n	8006890 <_dtoa_r+0x940>
 8006828:	f8cd 8010 	str.w	r8, [sp, #16]
 800682c:	9b04      	ldr	r3, [sp, #16]
 800682e:	b963      	cbnz	r3, 800684a <_dtoa_r+0x8fa>
 8006830:	4631      	mov	r1, r6
 8006832:	2205      	movs	r2, #5
 8006834:	4620      	mov	r0, r4
 8006836:	f000 fdc3 	bl	80073c0 <__multadd>
 800683a:	4601      	mov	r1, r0
 800683c:	4606      	mov	r6, r0
 800683e:	4658      	mov	r0, fp
 8006840:	f000 ffc6 	bl	80077d0 <__mcmp>
 8006844:	2800      	cmp	r0, #0
 8006846:	f73f add3 	bgt.w	80063f0 <_dtoa_r+0x4a0>
 800684a:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800684c:	9d06      	ldr	r5, [sp, #24]
 800684e:	ea6f 0a03 	mvn.w	sl, r3
 8006852:	f04f 0900 	mov.w	r9, #0
 8006856:	4631      	mov	r1, r6
 8006858:	4620      	mov	r0, r4
 800685a:	f000 fd9a 	bl	8007392 <_Bfree>
 800685e:	2f00      	cmp	r7, #0
 8006860:	f43f aebd 	beq.w	80065de <_dtoa_r+0x68e>
 8006864:	f1b9 0f00 	cmp.w	r9, #0
 8006868:	d005      	beq.n	8006876 <_dtoa_r+0x926>
 800686a:	45b9      	cmp	r9, r7
 800686c:	d003      	beq.n	8006876 <_dtoa_r+0x926>
 800686e:	4649      	mov	r1, r9
 8006870:	4620      	mov	r0, r4
 8006872:	f000 fd8e 	bl	8007392 <_Bfree>
 8006876:	4639      	mov	r1, r7
 8006878:	4620      	mov	r0, r4
 800687a:	f000 fd8a 	bl	8007392 <_Bfree>
 800687e:	e6ae      	b.n	80065de <_dtoa_r+0x68e>
 8006880:	2600      	movs	r6, #0
 8006882:	4637      	mov	r7, r6
 8006884:	e7e1      	b.n	800684a <_dtoa_r+0x8fa>
 8006886:	46ba      	mov	sl, r7
 8006888:	4637      	mov	r7, r6
 800688a:	e5b1      	b.n	80063f0 <_dtoa_r+0x4a0>
 800688c:	40240000 	.word	0x40240000
 8006890:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006892:	f8cd 8010 	str.w	r8, [sp, #16]
 8006896:	2b00      	cmp	r3, #0
 8006898:	f000 80f3 	beq.w	8006a82 <_dtoa_r+0xb32>
 800689c:	2d00      	cmp	r5, #0
 800689e:	dd05      	ble.n	80068ac <_dtoa_r+0x95c>
 80068a0:	4639      	mov	r1, r7
 80068a2:	462a      	mov	r2, r5
 80068a4:	4620      	mov	r0, r4
 80068a6:	f000 ff3f 	bl	8007728 <__lshift>
 80068aa:	4607      	mov	r7, r0
 80068ac:	9b08      	ldr	r3, [sp, #32]
 80068ae:	2b00      	cmp	r3, #0
 80068b0:	d04c      	beq.n	800694c <_dtoa_r+0x9fc>
 80068b2:	6879      	ldr	r1, [r7, #4]
 80068b4:	4620      	mov	r0, r4
 80068b6:	f000 fd38 	bl	800732a <_Balloc>
 80068ba:	4605      	mov	r5, r0
 80068bc:	693a      	ldr	r2, [r7, #16]
 80068be:	f107 010c 	add.w	r1, r7, #12
 80068c2:	3202      	adds	r2, #2
 80068c4:	0092      	lsls	r2, r2, #2
 80068c6:	300c      	adds	r0, #12
 80068c8:	f000 fd24 	bl	8007314 <memcpy>
 80068cc:	2201      	movs	r2, #1
 80068ce:	4629      	mov	r1, r5
 80068d0:	4620      	mov	r0, r4
 80068d2:	f000 ff29 	bl	8007728 <__lshift>
 80068d6:	46b9      	mov	r9, r7
 80068d8:	4607      	mov	r7, r0
 80068da:	9b06      	ldr	r3, [sp, #24]
 80068dc:	9307      	str	r3, [sp, #28]
 80068de:	9b02      	ldr	r3, [sp, #8]
 80068e0:	f003 0301 	and.w	r3, r3, #1
 80068e4:	9308      	str	r3, [sp, #32]
 80068e6:	4631      	mov	r1, r6
 80068e8:	4658      	mov	r0, fp
 80068ea:	f7ff faa3 	bl	8005e34 <quorem>
 80068ee:	4649      	mov	r1, r9
 80068f0:	4605      	mov	r5, r0
 80068f2:	f100 0830 	add.w	r8, r0, #48	; 0x30
 80068f6:	4658      	mov	r0, fp
 80068f8:	f000 ff6a 	bl	80077d0 <__mcmp>
 80068fc:	463a      	mov	r2, r7
 80068fe:	9002      	str	r0, [sp, #8]
 8006900:	4631      	mov	r1, r6
 8006902:	4620      	mov	r0, r4
 8006904:	f000 ff7e 	bl	8007804 <__mdiff>
 8006908:	68c3      	ldr	r3, [r0, #12]
 800690a:	4602      	mov	r2, r0
 800690c:	bb03      	cbnz	r3, 8006950 <_dtoa_r+0xa00>
 800690e:	4601      	mov	r1, r0
 8006910:	9009      	str	r0, [sp, #36]	; 0x24
 8006912:	4658      	mov	r0, fp
 8006914:	f000 ff5c 	bl	80077d0 <__mcmp>
 8006918:	4603      	mov	r3, r0
 800691a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800691c:	4611      	mov	r1, r2
 800691e:	4620      	mov	r0, r4
 8006920:	9309      	str	r3, [sp, #36]	; 0x24
 8006922:	f000 fd36 	bl	8007392 <_Bfree>
 8006926:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006928:	b9a3      	cbnz	r3, 8006954 <_dtoa_r+0xa04>
 800692a:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 800692c:	b992      	cbnz	r2, 8006954 <_dtoa_r+0xa04>
 800692e:	9a08      	ldr	r2, [sp, #32]
 8006930:	b982      	cbnz	r2, 8006954 <_dtoa_r+0xa04>
 8006932:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8006936:	d029      	beq.n	800698c <_dtoa_r+0xa3c>
 8006938:	9b02      	ldr	r3, [sp, #8]
 800693a:	2b00      	cmp	r3, #0
 800693c:	dd01      	ble.n	8006942 <_dtoa_r+0x9f2>
 800693e:	f105 0831 	add.w	r8, r5, #49	; 0x31
 8006942:	9b07      	ldr	r3, [sp, #28]
 8006944:	1c5d      	adds	r5, r3, #1
 8006946:	f883 8000 	strb.w	r8, [r3]
 800694a:	e784      	b.n	8006856 <_dtoa_r+0x906>
 800694c:	4638      	mov	r0, r7
 800694e:	e7c2      	b.n	80068d6 <_dtoa_r+0x986>
 8006950:	2301      	movs	r3, #1
 8006952:	e7e3      	b.n	800691c <_dtoa_r+0x9cc>
 8006954:	9a02      	ldr	r2, [sp, #8]
 8006956:	2a00      	cmp	r2, #0
 8006958:	db04      	blt.n	8006964 <_dtoa_r+0xa14>
 800695a:	d123      	bne.n	80069a4 <_dtoa_r+0xa54>
 800695c:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 800695e:	bb0a      	cbnz	r2, 80069a4 <_dtoa_r+0xa54>
 8006960:	9a08      	ldr	r2, [sp, #32]
 8006962:	b9fa      	cbnz	r2, 80069a4 <_dtoa_r+0xa54>
 8006964:	2b00      	cmp	r3, #0
 8006966:	ddec      	ble.n	8006942 <_dtoa_r+0x9f2>
 8006968:	4659      	mov	r1, fp
 800696a:	2201      	movs	r2, #1
 800696c:	4620      	mov	r0, r4
 800696e:	f000 fedb 	bl	8007728 <__lshift>
 8006972:	4631      	mov	r1, r6
 8006974:	4683      	mov	fp, r0
 8006976:	f000 ff2b 	bl	80077d0 <__mcmp>
 800697a:	2800      	cmp	r0, #0
 800697c:	dc03      	bgt.n	8006986 <_dtoa_r+0xa36>
 800697e:	d1e0      	bne.n	8006942 <_dtoa_r+0x9f2>
 8006980:	f018 0f01 	tst.w	r8, #1
 8006984:	d0dd      	beq.n	8006942 <_dtoa_r+0x9f2>
 8006986:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800698a:	d1d8      	bne.n	800693e <_dtoa_r+0x9ee>
 800698c:	9b07      	ldr	r3, [sp, #28]
 800698e:	9a07      	ldr	r2, [sp, #28]
 8006990:	1c5d      	adds	r5, r3, #1
 8006992:	2339      	movs	r3, #57	; 0x39
 8006994:	7013      	strb	r3, [r2, #0]
 8006996:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800699a:	1e6a      	subs	r2, r5, #1
 800699c:	2b39      	cmp	r3, #57	; 0x39
 800699e:	d04d      	beq.n	8006a3c <_dtoa_r+0xaec>
 80069a0:	3301      	adds	r3, #1
 80069a2:	e052      	b.n	8006a4a <_dtoa_r+0xafa>
 80069a4:	9a07      	ldr	r2, [sp, #28]
 80069a6:	2b00      	cmp	r3, #0
 80069a8:	f102 0501 	add.w	r5, r2, #1
 80069ac:	dd06      	ble.n	80069bc <_dtoa_r+0xa6c>
 80069ae:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 80069b2:	d0eb      	beq.n	800698c <_dtoa_r+0xa3c>
 80069b4:	f108 0801 	add.w	r8, r8, #1
 80069b8:	9b07      	ldr	r3, [sp, #28]
 80069ba:	e7c4      	b.n	8006946 <_dtoa_r+0x9f6>
 80069bc:	9b06      	ldr	r3, [sp, #24]
 80069be:	9a04      	ldr	r2, [sp, #16]
 80069c0:	1aeb      	subs	r3, r5, r3
 80069c2:	4293      	cmp	r3, r2
 80069c4:	f805 8c01 	strb.w	r8, [r5, #-1]
 80069c8:	d021      	beq.n	8006a0e <_dtoa_r+0xabe>
 80069ca:	4659      	mov	r1, fp
 80069cc:	2300      	movs	r3, #0
 80069ce:	220a      	movs	r2, #10
 80069d0:	4620      	mov	r0, r4
 80069d2:	f000 fcf5 	bl	80073c0 <__multadd>
 80069d6:	45b9      	cmp	r9, r7
 80069d8:	4683      	mov	fp, r0
 80069da:	f04f 0300 	mov.w	r3, #0
 80069de:	f04f 020a 	mov.w	r2, #10
 80069e2:	4649      	mov	r1, r9
 80069e4:	4620      	mov	r0, r4
 80069e6:	d105      	bne.n	80069f4 <_dtoa_r+0xaa4>
 80069e8:	f000 fcea 	bl	80073c0 <__multadd>
 80069ec:	4681      	mov	r9, r0
 80069ee:	4607      	mov	r7, r0
 80069f0:	9507      	str	r5, [sp, #28]
 80069f2:	e778      	b.n	80068e6 <_dtoa_r+0x996>
 80069f4:	f000 fce4 	bl	80073c0 <__multadd>
 80069f8:	4639      	mov	r1, r7
 80069fa:	4681      	mov	r9, r0
 80069fc:	2300      	movs	r3, #0
 80069fe:	220a      	movs	r2, #10
 8006a00:	4620      	mov	r0, r4
 8006a02:	f000 fcdd 	bl	80073c0 <__multadd>
 8006a06:	4607      	mov	r7, r0
 8006a08:	e7f2      	b.n	80069f0 <_dtoa_r+0xaa0>
 8006a0a:	f04f 0900 	mov.w	r9, #0
 8006a0e:	4659      	mov	r1, fp
 8006a10:	2201      	movs	r2, #1
 8006a12:	4620      	mov	r0, r4
 8006a14:	f000 fe88 	bl	8007728 <__lshift>
 8006a18:	4631      	mov	r1, r6
 8006a1a:	4683      	mov	fp, r0
 8006a1c:	f000 fed8 	bl	80077d0 <__mcmp>
 8006a20:	2800      	cmp	r0, #0
 8006a22:	dcb8      	bgt.n	8006996 <_dtoa_r+0xa46>
 8006a24:	d102      	bne.n	8006a2c <_dtoa_r+0xadc>
 8006a26:	f018 0f01 	tst.w	r8, #1
 8006a2a:	d1b4      	bne.n	8006996 <_dtoa_r+0xa46>
 8006a2c:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8006a30:	1e6a      	subs	r2, r5, #1
 8006a32:	2b30      	cmp	r3, #48	; 0x30
 8006a34:	f47f af0f 	bne.w	8006856 <_dtoa_r+0x906>
 8006a38:	4615      	mov	r5, r2
 8006a3a:	e7f7      	b.n	8006a2c <_dtoa_r+0xadc>
 8006a3c:	9b06      	ldr	r3, [sp, #24]
 8006a3e:	4293      	cmp	r3, r2
 8006a40:	d105      	bne.n	8006a4e <_dtoa_r+0xafe>
 8006a42:	2331      	movs	r3, #49	; 0x31
 8006a44:	9a06      	ldr	r2, [sp, #24]
 8006a46:	f10a 0a01 	add.w	sl, sl, #1
 8006a4a:	7013      	strb	r3, [r2, #0]
 8006a4c:	e703      	b.n	8006856 <_dtoa_r+0x906>
 8006a4e:	4615      	mov	r5, r2
 8006a50:	e7a1      	b.n	8006996 <_dtoa_r+0xa46>
 8006a52:	4b17      	ldr	r3, [pc, #92]	; (8006ab0 <_dtoa_r+0xb60>)
 8006a54:	f7ff bae1 	b.w	800601a <_dtoa_r+0xca>
 8006a58:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8006a5a:	2b00      	cmp	r3, #0
 8006a5c:	f47f aabb 	bne.w	8005fd6 <_dtoa_r+0x86>
 8006a60:	4b14      	ldr	r3, [pc, #80]	; (8006ab4 <_dtoa_r+0xb64>)
 8006a62:	f7ff bada 	b.w	800601a <_dtoa_r+0xca>
 8006a66:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8006a68:	2b01      	cmp	r3, #1
 8006a6a:	f77f ae3f 	ble.w	80066ec <_dtoa_r+0x79c>
 8006a6e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006a70:	9308      	str	r3, [sp, #32]
 8006a72:	e653      	b.n	800671c <_dtoa_r+0x7cc>
 8006a74:	9b04      	ldr	r3, [sp, #16]
 8006a76:	2b00      	cmp	r3, #0
 8006a78:	dc03      	bgt.n	8006a82 <_dtoa_r+0xb32>
 8006a7a:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8006a7c:	2b02      	cmp	r3, #2
 8006a7e:	f73f aed5 	bgt.w	800682c <_dtoa_r+0x8dc>
 8006a82:	9d06      	ldr	r5, [sp, #24]
 8006a84:	4631      	mov	r1, r6
 8006a86:	4658      	mov	r0, fp
 8006a88:	f7ff f9d4 	bl	8005e34 <quorem>
 8006a8c:	9b06      	ldr	r3, [sp, #24]
 8006a8e:	f100 0830 	add.w	r8, r0, #48	; 0x30
 8006a92:	f805 8b01 	strb.w	r8, [r5], #1
 8006a96:	9a04      	ldr	r2, [sp, #16]
 8006a98:	1aeb      	subs	r3, r5, r3
 8006a9a:	429a      	cmp	r2, r3
 8006a9c:	ddb5      	ble.n	8006a0a <_dtoa_r+0xaba>
 8006a9e:	4659      	mov	r1, fp
 8006aa0:	2300      	movs	r3, #0
 8006aa2:	220a      	movs	r2, #10
 8006aa4:	4620      	mov	r0, r4
 8006aa6:	f000 fc8b 	bl	80073c0 <__multadd>
 8006aaa:	4683      	mov	fp, r0
 8006aac:	e7ea      	b.n	8006a84 <_dtoa_r+0xb34>
 8006aae:	bf00      	nop
 8006ab0:	08008818 	.word	0x08008818
 8006ab4:	08008898 	.word	0x08008898

08006ab8 <std>:
 8006ab8:	2300      	movs	r3, #0
 8006aba:	b510      	push	{r4, lr}
 8006abc:	4604      	mov	r4, r0
 8006abe:	e9c0 3300 	strd	r3, r3, [r0]
 8006ac2:	6083      	str	r3, [r0, #8]
 8006ac4:	8181      	strh	r1, [r0, #12]
 8006ac6:	6643      	str	r3, [r0, #100]	; 0x64
 8006ac8:	81c2      	strh	r2, [r0, #14]
 8006aca:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8006ace:	6183      	str	r3, [r0, #24]
 8006ad0:	4619      	mov	r1, r3
 8006ad2:	2208      	movs	r2, #8
 8006ad4:	305c      	adds	r0, #92	; 0x5c
 8006ad6:	f7fd fc77 	bl	80043c8 <memset>
 8006ada:	4b05      	ldr	r3, [pc, #20]	; (8006af0 <std+0x38>)
 8006adc:	6224      	str	r4, [r4, #32]
 8006ade:	6263      	str	r3, [r4, #36]	; 0x24
 8006ae0:	4b04      	ldr	r3, [pc, #16]	; (8006af4 <std+0x3c>)
 8006ae2:	62a3      	str	r3, [r4, #40]	; 0x28
 8006ae4:	4b04      	ldr	r3, [pc, #16]	; (8006af8 <std+0x40>)
 8006ae6:	62e3      	str	r3, [r4, #44]	; 0x2c
 8006ae8:	4b04      	ldr	r3, [pc, #16]	; (8006afc <std+0x44>)
 8006aea:	6323      	str	r3, [r4, #48]	; 0x30
 8006aec:	bd10      	pop	{r4, pc}
 8006aee:	bf00      	nop
 8006af0:	080081c5 	.word	0x080081c5
 8006af4:	080081e7 	.word	0x080081e7
 8006af8:	0800821f 	.word	0x0800821f
 8006afc:	08008243 	.word	0x08008243

08006b00 <_cleanup_r>:
 8006b00:	4901      	ldr	r1, [pc, #4]	; (8006b08 <_cleanup_r+0x8>)
 8006b02:	f000 b885 	b.w	8006c10 <_fwalk_reent>
 8006b06:	bf00      	nop
 8006b08:	0800855d 	.word	0x0800855d

08006b0c <__sfmoreglue>:
 8006b0c:	b570      	push	{r4, r5, r6, lr}
 8006b0e:	2568      	movs	r5, #104	; 0x68
 8006b10:	1e4a      	subs	r2, r1, #1
 8006b12:	4355      	muls	r5, r2
 8006b14:	460e      	mov	r6, r1
 8006b16:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8006b1a:	f001 f859 	bl	8007bd0 <_malloc_r>
 8006b1e:	4604      	mov	r4, r0
 8006b20:	b140      	cbz	r0, 8006b34 <__sfmoreglue+0x28>
 8006b22:	2100      	movs	r1, #0
 8006b24:	e9c0 1600 	strd	r1, r6, [r0]
 8006b28:	300c      	adds	r0, #12
 8006b2a:	60a0      	str	r0, [r4, #8]
 8006b2c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8006b30:	f7fd fc4a 	bl	80043c8 <memset>
 8006b34:	4620      	mov	r0, r4
 8006b36:	bd70      	pop	{r4, r5, r6, pc}

08006b38 <__sinit>:
 8006b38:	6983      	ldr	r3, [r0, #24]
 8006b3a:	b510      	push	{r4, lr}
 8006b3c:	4604      	mov	r4, r0
 8006b3e:	bb33      	cbnz	r3, 8006b8e <__sinit+0x56>
 8006b40:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 8006b44:	6503      	str	r3, [r0, #80]	; 0x50
 8006b46:	4b12      	ldr	r3, [pc, #72]	; (8006b90 <__sinit+0x58>)
 8006b48:	4a12      	ldr	r2, [pc, #72]	; (8006b94 <__sinit+0x5c>)
 8006b4a:	681b      	ldr	r3, [r3, #0]
 8006b4c:	6282      	str	r2, [r0, #40]	; 0x28
 8006b4e:	4298      	cmp	r0, r3
 8006b50:	bf04      	itt	eq
 8006b52:	2301      	moveq	r3, #1
 8006b54:	6183      	streq	r3, [r0, #24]
 8006b56:	f000 f81f 	bl	8006b98 <__sfp>
 8006b5a:	6060      	str	r0, [r4, #4]
 8006b5c:	4620      	mov	r0, r4
 8006b5e:	f000 f81b 	bl	8006b98 <__sfp>
 8006b62:	60a0      	str	r0, [r4, #8]
 8006b64:	4620      	mov	r0, r4
 8006b66:	f000 f817 	bl	8006b98 <__sfp>
 8006b6a:	2200      	movs	r2, #0
 8006b6c:	60e0      	str	r0, [r4, #12]
 8006b6e:	2104      	movs	r1, #4
 8006b70:	6860      	ldr	r0, [r4, #4]
 8006b72:	f7ff ffa1 	bl	8006ab8 <std>
 8006b76:	2201      	movs	r2, #1
 8006b78:	2109      	movs	r1, #9
 8006b7a:	68a0      	ldr	r0, [r4, #8]
 8006b7c:	f7ff ff9c 	bl	8006ab8 <std>
 8006b80:	2202      	movs	r2, #2
 8006b82:	2112      	movs	r1, #18
 8006b84:	68e0      	ldr	r0, [r4, #12]
 8006b86:	f7ff ff97 	bl	8006ab8 <std>
 8006b8a:	2301      	movs	r3, #1
 8006b8c:	61a3      	str	r3, [r4, #24]
 8006b8e:	bd10      	pop	{r4, pc}
 8006b90:	08008804 	.word	0x08008804
 8006b94:	08006b01 	.word	0x08006b01

08006b98 <__sfp>:
 8006b98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006b9a:	4b1b      	ldr	r3, [pc, #108]	; (8006c08 <__sfp+0x70>)
 8006b9c:	4607      	mov	r7, r0
 8006b9e:	681e      	ldr	r6, [r3, #0]
 8006ba0:	69b3      	ldr	r3, [r6, #24]
 8006ba2:	b913      	cbnz	r3, 8006baa <__sfp+0x12>
 8006ba4:	4630      	mov	r0, r6
 8006ba6:	f7ff ffc7 	bl	8006b38 <__sinit>
 8006baa:	3648      	adds	r6, #72	; 0x48
 8006bac:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8006bb0:	3b01      	subs	r3, #1
 8006bb2:	d503      	bpl.n	8006bbc <__sfp+0x24>
 8006bb4:	6833      	ldr	r3, [r6, #0]
 8006bb6:	b133      	cbz	r3, 8006bc6 <__sfp+0x2e>
 8006bb8:	6836      	ldr	r6, [r6, #0]
 8006bba:	e7f7      	b.n	8006bac <__sfp+0x14>
 8006bbc:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8006bc0:	b16d      	cbz	r5, 8006bde <__sfp+0x46>
 8006bc2:	3468      	adds	r4, #104	; 0x68
 8006bc4:	e7f4      	b.n	8006bb0 <__sfp+0x18>
 8006bc6:	2104      	movs	r1, #4
 8006bc8:	4638      	mov	r0, r7
 8006bca:	f7ff ff9f 	bl	8006b0c <__sfmoreglue>
 8006bce:	6030      	str	r0, [r6, #0]
 8006bd0:	2800      	cmp	r0, #0
 8006bd2:	d1f1      	bne.n	8006bb8 <__sfp+0x20>
 8006bd4:	230c      	movs	r3, #12
 8006bd6:	4604      	mov	r4, r0
 8006bd8:	603b      	str	r3, [r7, #0]
 8006bda:	4620      	mov	r0, r4
 8006bdc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006bde:	4b0b      	ldr	r3, [pc, #44]	; (8006c0c <__sfp+0x74>)
 8006be0:	6665      	str	r5, [r4, #100]	; 0x64
 8006be2:	e9c4 5500 	strd	r5, r5, [r4]
 8006be6:	60a5      	str	r5, [r4, #8]
 8006be8:	e9c4 3503 	strd	r3, r5, [r4, #12]
 8006bec:	e9c4 5505 	strd	r5, r5, [r4, #20]
 8006bf0:	2208      	movs	r2, #8
 8006bf2:	4629      	mov	r1, r5
 8006bf4:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8006bf8:	f7fd fbe6 	bl	80043c8 <memset>
 8006bfc:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8006c00:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8006c04:	e7e9      	b.n	8006bda <__sfp+0x42>
 8006c06:	bf00      	nop
 8006c08:	08008804 	.word	0x08008804
 8006c0c:	ffff0001 	.word	0xffff0001

08006c10 <_fwalk_reent>:
 8006c10:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006c14:	4680      	mov	r8, r0
 8006c16:	4689      	mov	r9, r1
 8006c18:	2600      	movs	r6, #0
 8006c1a:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8006c1e:	b914      	cbnz	r4, 8006c26 <_fwalk_reent+0x16>
 8006c20:	4630      	mov	r0, r6
 8006c22:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006c26:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 8006c2a:	3f01      	subs	r7, #1
 8006c2c:	d501      	bpl.n	8006c32 <_fwalk_reent+0x22>
 8006c2e:	6824      	ldr	r4, [r4, #0]
 8006c30:	e7f5      	b.n	8006c1e <_fwalk_reent+0xe>
 8006c32:	89ab      	ldrh	r3, [r5, #12]
 8006c34:	2b01      	cmp	r3, #1
 8006c36:	d907      	bls.n	8006c48 <_fwalk_reent+0x38>
 8006c38:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8006c3c:	3301      	adds	r3, #1
 8006c3e:	d003      	beq.n	8006c48 <_fwalk_reent+0x38>
 8006c40:	4629      	mov	r1, r5
 8006c42:	4640      	mov	r0, r8
 8006c44:	47c8      	blx	r9
 8006c46:	4306      	orrs	r6, r0
 8006c48:	3568      	adds	r5, #104	; 0x68
 8006c4a:	e7ee      	b.n	8006c2a <_fwalk_reent+0x1a>

08006c4c <rshift>:
 8006c4c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006c4e:	6906      	ldr	r6, [r0, #16]
 8006c50:	114b      	asrs	r3, r1, #5
 8006c52:	429e      	cmp	r6, r3
 8006c54:	f100 0414 	add.w	r4, r0, #20
 8006c58:	dd31      	ble.n	8006cbe <rshift+0x72>
 8006c5a:	f011 011f 	ands.w	r1, r1, #31
 8006c5e:	eb04 0686 	add.w	r6, r4, r6, lsl #2
 8006c62:	eb04 0283 	add.w	r2, r4, r3, lsl #2
 8006c66:	d108      	bne.n	8006c7a <rshift+0x2e>
 8006c68:	4621      	mov	r1, r4
 8006c6a:	42b2      	cmp	r2, r6
 8006c6c:	460b      	mov	r3, r1
 8006c6e:	d211      	bcs.n	8006c94 <rshift+0x48>
 8006c70:	f852 3b04 	ldr.w	r3, [r2], #4
 8006c74:	f841 3b04 	str.w	r3, [r1], #4
 8006c78:	e7f7      	b.n	8006c6a <rshift+0x1e>
 8006c7a:	f854 5023 	ldr.w	r5, [r4, r3, lsl #2]
 8006c7e:	4623      	mov	r3, r4
 8006c80:	f1c1 0c20 	rsb	ip, r1, #32
 8006c84:	40cd      	lsrs	r5, r1
 8006c86:	3204      	adds	r2, #4
 8006c88:	42b2      	cmp	r2, r6
 8006c8a:	4617      	mov	r7, r2
 8006c8c:	d30d      	bcc.n	8006caa <rshift+0x5e>
 8006c8e:	601d      	str	r5, [r3, #0]
 8006c90:	b105      	cbz	r5, 8006c94 <rshift+0x48>
 8006c92:	3304      	adds	r3, #4
 8006c94:	42a3      	cmp	r3, r4
 8006c96:	eba3 0204 	sub.w	r2, r3, r4
 8006c9a:	bf08      	it	eq
 8006c9c:	2300      	moveq	r3, #0
 8006c9e:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8006ca2:	6102      	str	r2, [r0, #16]
 8006ca4:	bf08      	it	eq
 8006ca6:	6143      	streq	r3, [r0, #20]
 8006ca8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006caa:	683f      	ldr	r7, [r7, #0]
 8006cac:	fa07 f70c 	lsl.w	r7, r7, ip
 8006cb0:	433d      	orrs	r5, r7
 8006cb2:	f843 5b04 	str.w	r5, [r3], #4
 8006cb6:	f852 5b04 	ldr.w	r5, [r2], #4
 8006cba:	40cd      	lsrs	r5, r1
 8006cbc:	e7e4      	b.n	8006c88 <rshift+0x3c>
 8006cbe:	4623      	mov	r3, r4
 8006cc0:	e7e8      	b.n	8006c94 <rshift+0x48>

08006cc2 <__hexdig_fun>:
 8006cc2:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8006cc6:	2b09      	cmp	r3, #9
 8006cc8:	d802      	bhi.n	8006cd0 <__hexdig_fun+0xe>
 8006cca:	3820      	subs	r0, #32
 8006ccc:	b2c0      	uxtb	r0, r0
 8006cce:	4770      	bx	lr
 8006cd0:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 8006cd4:	2b05      	cmp	r3, #5
 8006cd6:	d801      	bhi.n	8006cdc <__hexdig_fun+0x1a>
 8006cd8:	3847      	subs	r0, #71	; 0x47
 8006cda:	e7f7      	b.n	8006ccc <__hexdig_fun+0xa>
 8006cdc:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 8006ce0:	2b05      	cmp	r3, #5
 8006ce2:	d801      	bhi.n	8006ce8 <__hexdig_fun+0x26>
 8006ce4:	3827      	subs	r0, #39	; 0x27
 8006ce6:	e7f1      	b.n	8006ccc <__hexdig_fun+0xa>
 8006ce8:	2000      	movs	r0, #0
 8006cea:	4770      	bx	lr

08006cec <__gethex>:
 8006cec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006cf0:	b08b      	sub	sp, #44	; 0x2c
 8006cf2:	9002      	str	r0, [sp, #8]
 8006cf4:	9816      	ldr	r0, [sp, #88]	; 0x58
 8006cf6:	468a      	mov	sl, r1
 8006cf8:	4690      	mov	r8, r2
 8006cfa:	9306      	str	r3, [sp, #24]
 8006cfc:	f000 fad1 	bl	80072a2 <__localeconv_l>
 8006d00:	6803      	ldr	r3, [r0, #0]
 8006d02:	f04f 0b00 	mov.w	fp, #0
 8006d06:	4618      	mov	r0, r3
 8006d08:	9303      	str	r3, [sp, #12]
 8006d0a:	f7f9 fa21 	bl	8000150 <strlen>
 8006d0e:	9b03      	ldr	r3, [sp, #12]
 8006d10:	9001      	str	r0, [sp, #4]
 8006d12:	4403      	add	r3, r0
 8006d14:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 8006d18:	9307      	str	r3, [sp, #28]
 8006d1a:	f8da 3000 	ldr.w	r3, [sl]
 8006d1e:	3302      	adds	r3, #2
 8006d20:	461f      	mov	r7, r3
 8006d22:	f813 0b01 	ldrb.w	r0, [r3], #1
 8006d26:	2830      	cmp	r0, #48	; 0x30
 8006d28:	d06c      	beq.n	8006e04 <__gethex+0x118>
 8006d2a:	f7ff ffca 	bl	8006cc2 <__hexdig_fun>
 8006d2e:	4604      	mov	r4, r0
 8006d30:	2800      	cmp	r0, #0
 8006d32:	d16a      	bne.n	8006e0a <__gethex+0x11e>
 8006d34:	9a01      	ldr	r2, [sp, #4]
 8006d36:	9903      	ldr	r1, [sp, #12]
 8006d38:	4638      	mov	r0, r7
 8006d3a:	f001 fa86 	bl	800824a <strncmp>
 8006d3e:	2800      	cmp	r0, #0
 8006d40:	d166      	bne.n	8006e10 <__gethex+0x124>
 8006d42:	9b01      	ldr	r3, [sp, #4]
 8006d44:	5cf8      	ldrb	r0, [r7, r3]
 8006d46:	18fe      	adds	r6, r7, r3
 8006d48:	f7ff ffbb 	bl	8006cc2 <__hexdig_fun>
 8006d4c:	2800      	cmp	r0, #0
 8006d4e:	d062      	beq.n	8006e16 <__gethex+0x12a>
 8006d50:	4633      	mov	r3, r6
 8006d52:	7818      	ldrb	r0, [r3, #0]
 8006d54:	461f      	mov	r7, r3
 8006d56:	2830      	cmp	r0, #48	; 0x30
 8006d58:	f103 0301 	add.w	r3, r3, #1
 8006d5c:	d0f9      	beq.n	8006d52 <__gethex+0x66>
 8006d5e:	f7ff ffb0 	bl	8006cc2 <__hexdig_fun>
 8006d62:	fab0 f580 	clz	r5, r0
 8006d66:	4634      	mov	r4, r6
 8006d68:	f04f 0b01 	mov.w	fp, #1
 8006d6c:	096d      	lsrs	r5, r5, #5
 8006d6e:	463a      	mov	r2, r7
 8006d70:	4616      	mov	r6, r2
 8006d72:	7830      	ldrb	r0, [r6, #0]
 8006d74:	3201      	adds	r2, #1
 8006d76:	f7ff ffa4 	bl	8006cc2 <__hexdig_fun>
 8006d7a:	2800      	cmp	r0, #0
 8006d7c:	d1f8      	bne.n	8006d70 <__gethex+0x84>
 8006d7e:	9a01      	ldr	r2, [sp, #4]
 8006d80:	9903      	ldr	r1, [sp, #12]
 8006d82:	4630      	mov	r0, r6
 8006d84:	f001 fa61 	bl	800824a <strncmp>
 8006d88:	b950      	cbnz	r0, 8006da0 <__gethex+0xb4>
 8006d8a:	b954      	cbnz	r4, 8006da2 <__gethex+0xb6>
 8006d8c:	9b01      	ldr	r3, [sp, #4]
 8006d8e:	18f4      	adds	r4, r6, r3
 8006d90:	4622      	mov	r2, r4
 8006d92:	4616      	mov	r6, r2
 8006d94:	7830      	ldrb	r0, [r6, #0]
 8006d96:	3201      	adds	r2, #1
 8006d98:	f7ff ff93 	bl	8006cc2 <__hexdig_fun>
 8006d9c:	2800      	cmp	r0, #0
 8006d9e:	d1f8      	bne.n	8006d92 <__gethex+0xa6>
 8006da0:	b10c      	cbz	r4, 8006da6 <__gethex+0xba>
 8006da2:	1ba4      	subs	r4, r4, r6
 8006da4:	00a4      	lsls	r4, r4, #2
 8006da6:	7833      	ldrb	r3, [r6, #0]
 8006da8:	2b50      	cmp	r3, #80	; 0x50
 8006daa:	d001      	beq.n	8006db0 <__gethex+0xc4>
 8006dac:	2b70      	cmp	r3, #112	; 0x70
 8006dae:	d140      	bne.n	8006e32 <__gethex+0x146>
 8006db0:	7873      	ldrb	r3, [r6, #1]
 8006db2:	2b2b      	cmp	r3, #43	; 0x2b
 8006db4:	d031      	beq.n	8006e1a <__gethex+0x12e>
 8006db6:	2b2d      	cmp	r3, #45	; 0x2d
 8006db8:	d033      	beq.n	8006e22 <__gethex+0x136>
 8006dba:	f04f 0900 	mov.w	r9, #0
 8006dbe:	1c71      	adds	r1, r6, #1
 8006dc0:	7808      	ldrb	r0, [r1, #0]
 8006dc2:	f7ff ff7e 	bl	8006cc2 <__hexdig_fun>
 8006dc6:	1e43      	subs	r3, r0, #1
 8006dc8:	b2db      	uxtb	r3, r3
 8006dca:	2b18      	cmp	r3, #24
 8006dcc:	d831      	bhi.n	8006e32 <__gethex+0x146>
 8006dce:	f1a0 0210 	sub.w	r2, r0, #16
 8006dd2:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8006dd6:	f7ff ff74 	bl	8006cc2 <__hexdig_fun>
 8006dda:	1e43      	subs	r3, r0, #1
 8006ddc:	b2db      	uxtb	r3, r3
 8006dde:	2b18      	cmp	r3, #24
 8006de0:	d922      	bls.n	8006e28 <__gethex+0x13c>
 8006de2:	f1b9 0f00 	cmp.w	r9, #0
 8006de6:	d000      	beq.n	8006dea <__gethex+0xfe>
 8006de8:	4252      	negs	r2, r2
 8006dea:	4414      	add	r4, r2
 8006dec:	f8ca 1000 	str.w	r1, [sl]
 8006df0:	b30d      	cbz	r5, 8006e36 <__gethex+0x14a>
 8006df2:	f1bb 0f00 	cmp.w	fp, #0
 8006df6:	bf0c      	ite	eq
 8006df8:	2706      	moveq	r7, #6
 8006dfa:	2700      	movne	r7, #0
 8006dfc:	4638      	mov	r0, r7
 8006dfe:	b00b      	add	sp, #44	; 0x2c
 8006e00:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006e04:	f10b 0b01 	add.w	fp, fp, #1
 8006e08:	e78a      	b.n	8006d20 <__gethex+0x34>
 8006e0a:	2500      	movs	r5, #0
 8006e0c:	462c      	mov	r4, r5
 8006e0e:	e7ae      	b.n	8006d6e <__gethex+0x82>
 8006e10:	463e      	mov	r6, r7
 8006e12:	2501      	movs	r5, #1
 8006e14:	e7c7      	b.n	8006da6 <__gethex+0xba>
 8006e16:	4604      	mov	r4, r0
 8006e18:	e7fb      	b.n	8006e12 <__gethex+0x126>
 8006e1a:	f04f 0900 	mov.w	r9, #0
 8006e1e:	1cb1      	adds	r1, r6, #2
 8006e20:	e7ce      	b.n	8006dc0 <__gethex+0xd4>
 8006e22:	f04f 0901 	mov.w	r9, #1
 8006e26:	e7fa      	b.n	8006e1e <__gethex+0x132>
 8006e28:	230a      	movs	r3, #10
 8006e2a:	fb03 0202 	mla	r2, r3, r2, r0
 8006e2e:	3a10      	subs	r2, #16
 8006e30:	e7cf      	b.n	8006dd2 <__gethex+0xe6>
 8006e32:	4631      	mov	r1, r6
 8006e34:	e7da      	b.n	8006dec <__gethex+0x100>
 8006e36:	4629      	mov	r1, r5
 8006e38:	1bf3      	subs	r3, r6, r7
 8006e3a:	3b01      	subs	r3, #1
 8006e3c:	2b07      	cmp	r3, #7
 8006e3e:	dc49      	bgt.n	8006ed4 <__gethex+0x1e8>
 8006e40:	9802      	ldr	r0, [sp, #8]
 8006e42:	f000 fa72 	bl	800732a <_Balloc>
 8006e46:	f04f 0b00 	mov.w	fp, #0
 8006e4a:	4605      	mov	r5, r0
 8006e4c:	46da      	mov	sl, fp
 8006e4e:	9b01      	ldr	r3, [sp, #4]
 8006e50:	f100 0914 	add.w	r9, r0, #20
 8006e54:	f1c3 0301 	rsb	r3, r3, #1
 8006e58:	f8cd 9010 	str.w	r9, [sp, #16]
 8006e5c:	9308      	str	r3, [sp, #32]
 8006e5e:	42b7      	cmp	r7, r6
 8006e60:	d33b      	bcc.n	8006eda <__gethex+0x1ee>
 8006e62:	9804      	ldr	r0, [sp, #16]
 8006e64:	f840 ab04 	str.w	sl, [r0], #4
 8006e68:	eba0 0009 	sub.w	r0, r0, r9
 8006e6c:	1080      	asrs	r0, r0, #2
 8006e6e:	6128      	str	r0, [r5, #16]
 8006e70:	0147      	lsls	r7, r0, #5
 8006e72:	4650      	mov	r0, sl
 8006e74:	f000 fb1d 	bl	80074b2 <__hi0bits>
 8006e78:	f8d8 6000 	ldr.w	r6, [r8]
 8006e7c:	1a3f      	subs	r7, r7, r0
 8006e7e:	42b7      	cmp	r7, r6
 8006e80:	dd64      	ble.n	8006f4c <__gethex+0x260>
 8006e82:	1bbf      	subs	r7, r7, r6
 8006e84:	4639      	mov	r1, r7
 8006e86:	4628      	mov	r0, r5
 8006e88:	f000 fe27 	bl	8007ada <__any_on>
 8006e8c:	4682      	mov	sl, r0
 8006e8e:	b178      	cbz	r0, 8006eb0 <__gethex+0x1c4>
 8006e90:	f04f 0a01 	mov.w	sl, #1
 8006e94:	1e7b      	subs	r3, r7, #1
 8006e96:	1159      	asrs	r1, r3, #5
 8006e98:	f003 021f 	and.w	r2, r3, #31
 8006e9c:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 8006ea0:	fa0a f202 	lsl.w	r2, sl, r2
 8006ea4:	420a      	tst	r2, r1
 8006ea6:	d003      	beq.n	8006eb0 <__gethex+0x1c4>
 8006ea8:	4553      	cmp	r3, sl
 8006eaa:	dc46      	bgt.n	8006f3a <__gethex+0x24e>
 8006eac:	f04f 0a02 	mov.w	sl, #2
 8006eb0:	4639      	mov	r1, r7
 8006eb2:	4628      	mov	r0, r5
 8006eb4:	f7ff feca 	bl	8006c4c <rshift>
 8006eb8:	443c      	add	r4, r7
 8006eba:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8006ebe:	42a3      	cmp	r3, r4
 8006ec0:	da52      	bge.n	8006f68 <__gethex+0x27c>
 8006ec2:	4629      	mov	r1, r5
 8006ec4:	9802      	ldr	r0, [sp, #8]
 8006ec6:	f000 fa64 	bl	8007392 <_Bfree>
 8006eca:	2300      	movs	r3, #0
 8006ecc:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8006ece:	27a3      	movs	r7, #163	; 0xa3
 8006ed0:	6013      	str	r3, [r2, #0]
 8006ed2:	e793      	b.n	8006dfc <__gethex+0x110>
 8006ed4:	3101      	adds	r1, #1
 8006ed6:	105b      	asrs	r3, r3, #1
 8006ed8:	e7b0      	b.n	8006e3c <__gethex+0x150>
 8006eda:	1e73      	subs	r3, r6, #1
 8006edc:	9305      	str	r3, [sp, #20]
 8006ede:	9a07      	ldr	r2, [sp, #28]
 8006ee0:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8006ee4:	4293      	cmp	r3, r2
 8006ee6:	d018      	beq.n	8006f1a <__gethex+0x22e>
 8006ee8:	f1bb 0f20 	cmp.w	fp, #32
 8006eec:	d107      	bne.n	8006efe <__gethex+0x212>
 8006eee:	9b04      	ldr	r3, [sp, #16]
 8006ef0:	f8c3 a000 	str.w	sl, [r3]
 8006ef4:	f04f 0a00 	mov.w	sl, #0
 8006ef8:	46d3      	mov	fp, sl
 8006efa:	3304      	adds	r3, #4
 8006efc:	9304      	str	r3, [sp, #16]
 8006efe:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 8006f02:	f7ff fede 	bl	8006cc2 <__hexdig_fun>
 8006f06:	f000 000f 	and.w	r0, r0, #15
 8006f0a:	fa00 f00b 	lsl.w	r0, r0, fp
 8006f0e:	ea4a 0a00 	orr.w	sl, sl, r0
 8006f12:	f10b 0b04 	add.w	fp, fp, #4
 8006f16:	9b05      	ldr	r3, [sp, #20]
 8006f18:	e00d      	b.n	8006f36 <__gethex+0x24a>
 8006f1a:	9b05      	ldr	r3, [sp, #20]
 8006f1c:	9a08      	ldr	r2, [sp, #32]
 8006f1e:	4413      	add	r3, r2
 8006f20:	42bb      	cmp	r3, r7
 8006f22:	d3e1      	bcc.n	8006ee8 <__gethex+0x1fc>
 8006f24:	4618      	mov	r0, r3
 8006f26:	9a01      	ldr	r2, [sp, #4]
 8006f28:	9903      	ldr	r1, [sp, #12]
 8006f2a:	9309      	str	r3, [sp, #36]	; 0x24
 8006f2c:	f001 f98d 	bl	800824a <strncmp>
 8006f30:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006f32:	2800      	cmp	r0, #0
 8006f34:	d1d8      	bne.n	8006ee8 <__gethex+0x1fc>
 8006f36:	461e      	mov	r6, r3
 8006f38:	e791      	b.n	8006e5e <__gethex+0x172>
 8006f3a:	1eb9      	subs	r1, r7, #2
 8006f3c:	4628      	mov	r0, r5
 8006f3e:	f000 fdcc 	bl	8007ada <__any_on>
 8006f42:	2800      	cmp	r0, #0
 8006f44:	d0b2      	beq.n	8006eac <__gethex+0x1c0>
 8006f46:	f04f 0a03 	mov.w	sl, #3
 8006f4a:	e7b1      	b.n	8006eb0 <__gethex+0x1c4>
 8006f4c:	da09      	bge.n	8006f62 <__gethex+0x276>
 8006f4e:	1bf7      	subs	r7, r6, r7
 8006f50:	4629      	mov	r1, r5
 8006f52:	463a      	mov	r2, r7
 8006f54:	9802      	ldr	r0, [sp, #8]
 8006f56:	f000 fbe7 	bl	8007728 <__lshift>
 8006f5a:	4605      	mov	r5, r0
 8006f5c:	1be4      	subs	r4, r4, r7
 8006f5e:	f100 0914 	add.w	r9, r0, #20
 8006f62:	f04f 0a00 	mov.w	sl, #0
 8006f66:	e7a8      	b.n	8006eba <__gethex+0x1ce>
 8006f68:	f8d8 0004 	ldr.w	r0, [r8, #4]
 8006f6c:	42a0      	cmp	r0, r4
 8006f6e:	dd6b      	ble.n	8007048 <__gethex+0x35c>
 8006f70:	1b04      	subs	r4, r0, r4
 8006f72:	42a6      	cmp	r6, r4
 8006f74:	dc2e      	bgt.n	8006fd4 <__gethex+0x2e8>
 8006f76:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8006f7a:	2b02      	cmp	r3, #2
 8006f7c:	d022      	beq.n	8006fc4 <__gethex+0x2d8>
 8006f7e:	2b03      	cmp	r3, #3
 8006f80:	d024      	beq.n	8006fcc <__gethex+0x2e0>
 8006f82:	2b01      	cmp	r3, #1
 8006f84:	d115      	bne.n	8006fb2 <__gethex+0x2c6>
 8006f86:	42a6      	cmp	r6, r4
 8006f88:	d113      	bne.n	8006fb2 <__gethex+0x2c6>
 8006f8a:	2e01      	cmp	r6, #1
 8006f8c:	dc0b      	bgt.n	8006fa6 <__gethex+0x2ba>
 8006f8e:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8006f92:	9a06      	ldr	r2, [sp, #24]
 8006f94:	2762      	movs	r7, #98	; 0x62
 8006f96:	6013      	str	r3, [r2, #0]
 8006f98:	2301      	movs	r3, #1
 8006f9a:	612b      	str	r3, [r5, #16]
 8006f9c:	f8c9 3000 	str.w	r3, [r9]
 8006fa0:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8006fa2:	601d      	str	r5, [r3, #0]
 8006fa4:	e72a      	b.n	8006dfc <__gethex+0x110>
 8006fa6:	1e71      	subs	r1, r6, #1
 8006fa8:	4628      	mov	r0, r5
 8006faa:	f000 fd96 	bl	8007ada <__any_on>
 8006fae:	2800      	cmp	r0, #0
 8006fb0:	d1ed      	bne.n	8006f8e <__gethex+0x2a2>
 8006fb2:	4629      	mov	r1, r5
 8006fb4:	9802      	ldr	r0, [sp, #8]
 8006fb6:	f000 f9ec 	bl	8007392 <_Bfree>
 8006fba:	2300      	movs	r3, #0
 8006fbc:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8006fbe:	2750      	movs	r7, #80	; 0x50
 8006fc0:	6013      	str	r3, [r2, #0]
 8006fc2:	e71b      	b.n	8006dfc <__gethex+0x110>
 8006fc4:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8006fc6:	2b00      	cmp	r3, #0
 8006fc8:	d0e1      	beq.n	8006f8e <__gethex+0x2a2>
 8006fca:	e7f2      	b.n	8006fb2 <__gethex+0x2c6>
 8006fcc:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8006fce:	2b00      	cmp	r3, #0
 8006fd0:	d1dd      	bne.n	8006f8e <__gethex+0x2a2>
 8006fd2:	e7ee      	b.n	8006fb2 <__gethex+0x2c6>
 8006fd4:	1e67      	subs	r7, r4, #1
 8006fd6:	f1ba 0f00 	cmp.w	sl, #0
 8006fda:	d132      	bne.n	8007042 <__gethex+0x356>
 8006fdc:	b127      	cbz	r7, 8006fe8 <__gethex+0x2fc>
 8006fde:	4639      	mov	r1, r7
 8006fe0:	4628      	mov	r0, r5
 8006fe2:	f000 fd7a 	bl	8007ada <__any_on>
 8006fe6:	4682      	mov	sl, r0
 8006fe8:	2301      	movs	r3, #1
 8006fea:	117a      	asrs	r2, r7, #5
 8006fec:	f007 071f 	and.w	r7, r7, #31
 8006ff0:	fa03 f707 	lsl.w	r7, r3, r7
 8006ff4:	f859 3022 	ldr.w	r3, [r9, r2, lsl #2]
 8006ff8:	4621      	mov	r1, r4
 8006ffa:	421f      	tst	r7, r3
 8006ffc:	f04f 0702 	mov.w	r7, #2
 8007000:	4628      	mov	r0, r5
 8007002:	bf18      	it	ne
 8007004:	f04a 0a02 	orrne.w	sl, sl, #2
 8007008:	1b36      	subs	r6, r6, r4
 800700a:	f7ff fe1f 	bl	8006c4c <rshift>
 800700e:	f8d8 4004 	ldr.w	r4, [r8, #4]
 8007012:	f1ba 0f00 	cmp.w	sl, #0
 8007016:	d048      	beq.n	80070aa <__gethex+0x3be>
 8007018:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800701c:	2b02      	cmp	r3, #2
 800701e:	d015      	beq.n	800704c <__gethex+0x360>
 8007020:	2b03      	cmp	r3, #3
 8007022:	d017      	beq.n	8007054 <__gethex+0x368>
 8007024:	2b01      	cmp	r3, #1
 8007026:	d109      	bne.n	800703c <__gethex+0x350>
 8007028:	f01a 0f02 	tst.w	sl, #2
 800702c:	d006      	beq.n	800703c <__gethex+0x350>
 800702e:	f8d9 3000 	ldr.w	r3, [r9]
 8007032:	ea4a 0a03 	orr.w	sl, sl, r3
 8007036:	f01a 0f01 	tst.w	sl, #1
 800703a:	d10e      	bne.n	800705a <__gethex+0x36e>
 800703c:	f047 0710 	orr.w	r7, r7, #16
 8007040:	e033      	b.n	80070aa <__gethex+0x3be>
 8007042:	f04f 0a01 	mov.w	sl, #1
 8007046:	e7cf      	b.n	8006fe8 <__gethex+0x2fc>
 8007048:	2701      	movs	r7, #1
 800704a:	e7e2      	b.n	8007012 <__gethex+0x326>
 800704c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800704e:	f1c3 0301 	rsb	r3, r3, #1
 8007052:	9315      	str	r3, [sp, #84]	; 0x54
 8007054:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8007056:	2b00      	cmp	r3, #0
 8007058:	d0f0      	beq.n	800703c <__gethex+0x350>
 800705a:	f04f 0c00 	mov.w	ip, #0
 800705e:	f8d5 9010 	ldr.w	r9, [r5, #16]
 8007062:	f105 0314 	add.w	r3, r5, #20
 8007066:	ea4f 0a89 	mov.w	sl, r9, lsl #2
 800706a:	eb03 010a 	add.w	r1, r3, sl
 800706e:	4618      	mov	r0, r3
 8007070:	f853 2b04 	ldr.w	r2, [r3], #4
 8007074:	f1b2 3fff 	cmp.w	r2, #4294967295
 8007078:	d01c      	beq.n	80070b4 <__gethex+0x3c8>
 800707a:	3201      	adds	r2, #1
 800707c:	6002      	str	r2, [r0, #0]
 800707e:	2f02      	cmp	r7, #2
 8007080:	f105 0314 	add.w	r3, r5, #20
 8007084:	d138      	bne.n	80070f8 <__gethex+0x40c>
 8007086:	f8d8 2000 	ldr.w	r2, [r8]
 800708a:	3a01      	subs	r2, #1
 800708c:	42b2      	cmp	r2, r6
 800708e:	d10a      	bne.n	80070a6 <__gethex+0x3ba>
 8007090:	2201      	movs	r2, #1
 8007092:	1171      	asrs	r1, r6, #5
 8007094:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8007098:	f006 061f 	and.w	r6, r6, #31
 800709c:	fa02 f606 	lsl.w	r6, r2, r6
 80070a0:	421e      	tst	r6, r3
 80070a2:	bf18      	it	ne
 80070a4:	4617      	movne	r7, r2
 80070a6:	f047 0720 	orr.w	r7, r7, #32
 80070aa:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80070ac:	601d      	str	r5, [r3, #0]
 80070ae:	9b06      	ldr	r3, [sp, #24]
 80070b0:	601c      	str	r4, [r3, #0]
 80070b2:	e6a3      	b.n	8006dfc <__gethex+0x110>
 80070b4:	4299      	cmp	r1, r3
 80070b6:	f843 cc04 	str.w	ip, [r3, #-4]
 80070ba:	d8d8      	bhi.n	800706e <__gethex+0x382>
 80070bc:	68ab      	ldr	r3, [r5, #8]
 80070be:	4599      	cmp	r9, r3
 80070c0:	db12      	blt.n	80070e8 <__gethex+0x3fc>
 80070c2:	6869      	ldr	r1, [r5, #4]
 80070c4:	9802      	ldr	r0, [sp, #8]
 80070c6:	3101      	adds	r1, #1
 80070c8:	f000 f92f 	bl	800732a <_Balloc>
 80070cc:	4683      	mov	fp, r0
 80070ce:	692a      	ldr	r2, [r5, #16]
 80070d0:	f105 010c 	add.w	r1, r5, #12
 80070d4:	3202      	adds	r2, #2
 80070d6:	0092      	lsls	r2, r2, #2
 80070d8:	300c      	adds	r0, #12
 80070da:	f000 f91b 	bl	8007314 <memcpy>
 80070de:	4629      	mov	r1, r5
 80070e0:	9802      	ldr	r0, [sp, #8]
 80070e2:	f000 f956 	bl	8007392 <_Bfree>
 80070e6:	465d      	mov	r5, fp
 80070e8:	692b      	ldr	r3, [r5, #16]
 80070ea:	1c5a      	adds	r2, r3, #1
 80070ec:	612a      	str	r2, [r5, #16]
 80070ee:	2201      	movs	r2, #1
 80070f0:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 80070f4:	615a      	str	r2, [r3, #20]
 80070f6:	e7c2      	b.n	800707e <__gethex+0x392>
 80070f8:	692a      	ldr	r2, [r5, #16]
 80070fa:	454a      	cmp	r2, r9
 80070fc:	dd0b      	ble.n	8007116 <__gethex+0x42a>
 80070fe:	2101      	movs	r1, #1
 8007100:	4628      	mov	r0, r5
 8007102:	f7ff fda3 	bl	8006c4c <rshift>
 8007106:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800710a:	3401      	adds	r4, #1
 800710c:	42a3      	cmp	r3, r4
 800710e:	f6ff aed8 	blt.w	8006ec2 <__gethex+0x1d6>
 8007112:	2701      	movs	r7, #1
 8007114:	e7c7      	b.n	80070a6 <__gethex+0x3ba>
 8007116:	f016 061f 	ands.w	r6, r6, #31
 800711a:	d0fa      	beq.n	8007112 <__gethex+0x426>
 800711c:	449a      	add	sl, r3
 800711e:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 8007122:	f000 f9c6 	bl	80074b2 <__hi0bits>
 8007126:	f1c6 0620 	rsb	r6, r6, #32
 800712a:	42b0      	cmp	r0, r6
 800712c:	dbe7      	blt.n	80070fe <__gethex+0x412>
 800712e:	e7f0      	b.n	8007112 <__gethex+0x426>

08007130 <L_shift>:
 8007130:	f1c2 0208 	rsb	r2, r2, #8
 8007134:	0092      	lsls	r2, r2, #2
 8007136:	b570      	push	{r4, r5, r6, lr}
 8007138:	f1c2 0620 	rsb	r6, r2, #32
 800713c:	6843      	ldr	r3, [r0, #4]
 800713e:	6804      	ldr	r4, [r0, #0]
 8007140:	fa03 f506 	lsl.w	r5, r3, r6
 8007144:	432c      	orrs	r4, r5
 8007146:	40d3      	lsrs	r3, r2
 8007148:	6004      	str	r4, [r0, #0]
 800714a:	f840 3f04 	str.w	r3, [r0, #4]!
 800714e:	4288      	cmp	r0, r1
 8007150:	d3f4      	bcc.n	800713c <L_shift+0xc>
 8007152:	bd70      	pop	{r4, r5, r6, pc}

08007154 <__match>:
 8007154:	b530      	push	{r4, r5, lr}
 8007156:	6803      	ldr	r3, [r0, #0]
 8007158:	3301      	adds	r3, #1
 800715a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800715e:	b914      	cbnz	r4, 8007166 <__match+0x12>
 8007160:	6003      	str	r3, [r0, #0]
 8007162:	2001      	movs	r0, #1
 8007164:	bd30      	pop	{r4, r5, pc}
 8007166:	f813 2b01 	ldrb.w	r2, [r3], #1
 800716a:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800716e:	2d19      	cmp	r5, #25
 8007170:	bf98      	it	ls
 8007172:	3220      	addls	r2, #32
 8007174:	42a2      	cmp	r2, r4
 8007176:	d0f0      	beq.n	800715a <__match+0x6>
 8007178:	2000      	movs	r0, #0
 800717a:	e7f3      	b.n	8007164 <__match+0x10>

0800717c <__hexnan>:
 800717c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007180:	2500      	movs	r5, #0
 8007182:	680b      	ldr	r3, [r1, #0]
 8007184:	4682      	mov	sl, r0
 8007186:	115f      	asrs	r7, r3, #5
 8007188:	eb02 0787 	add.w	r7, r2, r7, lsl #2
 800718c:	f013 031f 	ands.w	r3, r3, #31
 8007190:	bf18      	it	ne
 8007192:	3704      	addne	r7, #4
 8007194:	1f3e      	subs	r6, r7, #4
 8007196:	4690      	mov	r8, r2
 8007198:	46b1      	mov	r9, r6
 800719a:	4634      	mov	r4, r6
 800719c:	46ab      	mov	fp, r5
 800719e:	b087      	sub	sp, #28
 80071a0:	6801      	ldr	r1, [r0, #0]
 80071a2:	9301      	str	r3, [sp, #4]
 80071a4:	f847 5c04 	str.w	r5, [r7, #-4]
 80071a8:	9502      	str	r5, [sp, #8]
 80071aa:	784a      	ldrb	r2, [r1, #1]
 80071ac:	1c4b      	adds	r3, r1, #1
 80071ae:	9303      	str	r3, [sp, #12]
 80071b0:	b342      	cbz	r2, 8007204 <__hexnan+0x88>
 80071b2:	4610      	mov	r0, r2
 80071b4:	9105      	str	r1, [sp, #20]
 80071b6:	9204      	str	r2, [sp, #16]
 80071b8:	f7ff fd83 	bl	8006cc2 <__hexdig_fun>
 80071bc:	2800      	cmp	r0, #0
 80071be:	d143      	bne.n	8007248 <__hexnan+0xcc>
 80071c0:	9a04      	ldr	r2, [sp, #16]
 80071c2:	9905      	ldr	r1, [sp, #20]
 80071c4:	2a20      	cmp	r2, #32
 80071c6:	d818      	bhi.n	80071fa <__hexnan+0x7e>
 80071c8:	9b02      	ldr	r3, [sp, #8]
 80071ca:	459b      	cmp	fp, r3
 80071cc:	dd13      	ble.n	80071f6 <__hexnan+0x7a>
 80071ce:	454c      	cmp	r4, r9
 80071d0:	d206      	bcs.n	80071e0 <__hexnan+0x64>
 80071d2:	2d07      	cmp	r5, #7
 80071d4:	dc04      	bgt.n	80071e0 <__hexnan+0x64>
 80071d6:	462a      	mov	r2, r5
 80071d8:	4649      	mov	r1, r9
 80071da:	4620      	mov	r0, r4
 80071dc:	f7ff ffa8 	bl	8007130 <L_shift>
 80071e0:	4544      	cmp	r4, r8
 80071e2:	d944      	bls.n	800726e <__hexnan+0xf2>
 80071e4:	2300      	movs	r3, #0
 80071e6:	f1a4 0904 	sub.w	r9, r4, #4
 80071ea:	f844 3c04 	str.w	r3, [r4, #-4]
 80071ee:	461d      	mov	r5, r3
 80071f0:	464c      	mov	r4, r9
 80071f2:	f8cd b008 	str.w	fp, [sp, #8]
 80071f6:	9903      	ldr	r1, [sp, #12]
 80071f8:	e7d7      	b.n	80071aa <__hexnan+0x2e>
 80071fa:	2a29      	cmp	r2, #41	; 0x29
 80071fc:	d14a      	bne.n	8007294 <__hexnan+0x118>
 80071fe:	3102      	adds	r1, #2
 8007200:	f8ca 1000 	str.w	r1, [sl]
 8007204:	f1bb 0f00 	cmp.w	fp, #0
 8007208:	d044      	beq.n	8007294 <__hexnan+0x118>
 800720a:	454c      	cmp	r4, r9
 800720c:	d206      	bcs.n	800721c <__hexnan+0xa0>
 800720e:	2d07      	cmp	r5, #7
 8007210:	dc04      	bgt.n	800721c <__hexnan+0xa0>
 8007212:	462a      	mov	r2, r5
 8007214:	4649      	mov	r1, r9
 8007216:	4620      	mov	r0, r4
 8007218:	f7ff ff8a 	bl	8007130 <L_shift>
 800721c:	4544      	cmp	r4, r8
 800721e:	d928      	bls.n	8007272 <__hexnan+0xf6>
 8007220:	4643      	mov	r3, r8
 8007222:	f854 2b04 	ldr.w	r2, [r4], #4
 8007226:	42a6      	cmp	r6, r4
 8007228:	f843 2b04 	str.w	r2, [r3], #4
 800722c:	d2f9      	bcs.n	8007222 <__hexnan+0xa6>
 800722e:	2200      	movs	r2, #0
 8007230:	f843 2b04 	str.w	r2, [r3], #4
 8007234:	429e      	cmp	r6, r3
 8007236:	d2fb      	bcs.n	8007230 <__hexnan+0xb4>
 8007238:	6833      	ldr	r3, [r6, #0]
 800723a:	b91b      	cbnz	r3, 8007244 <__hexnan+0xc8>
 800723c:	4546      	cmp	r6, r8
 800723e:	d127      	bne.n	8007290 <__hexnan+0x114>
 8007240:	2301      	movs	r3, #1
 8007242:	6033      	str	r3, [r6, #0]
 8007244:	2005      	movs	r0, #5
 8007246:	e026      	b.n	8007296 <__hexnan+0x11a>
 8007248:	3501      	adds	r5, #1
 800724a:	2d08      	cmp	r5, #8
 800724c:	f10b 0b01 	add.w	fp, fp, #1
 8007250:	dd06      	ble.n	8007260 <__hexnan+0xe4>
 8007252:	4544      	cmp	r4, r8
 8007254:	d9cf      	bls.n	80071f6 <__hexnan+0x7a>
 8007256:	2300      	movs	r3, #0
 8007258:	2501      	movs	r5, #1
 800725a:	f844 3c04 	str.w	r3, [r4, #-4]
 800725e:	3c04      	subs	r4, #4
 8007260:	6822      	ldr	r2, [r4, #0]
 8007262:	f000 000f 	and.w	r0, r0, #15
 8007266:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800726a:	6020      	str	r0, [r4, #0]
 800726c:	e7c3      	b.n	80071f6 <__hexnan+0x7a>
 800726e:	2508      	movs	r5, #8
 8007270:	e7c1      	b.n	80071f6 <__hexnan+0x7a>
 8007272:	9b01      	ldr	r3, [sp, #4]
 8007274:	2b00      	cmp	r3, #0
 8007276:	d0df      	beq.n	8007238 <__hexnan+0xbc>
 8007278:	f04f 32ff 	mov.w	r2, #4294967295
 800727c:	f1c3 0320 	rsb	r3, r3, #32
 8007280:	fa22 f303 	lsr.w	r3, r2, r3
 8007284:	f857 2c04 	ldr.w	r2, [r7, #-4]
 8007288:	401a      	ands	r2, r3
 800728a:	f847 2c04 	str.w	r2, [r7, #-4]
 800728e:	e7d3      	b.n	8007238 <__hexnan+0xbc>
 8007290:	3e04      	subs	r6, #4
 8007292:	e7d1      	b.n	8007238 <__hexnan+0xbc>
 8007294:	2004      	movs	r0, #4
 8007296:	b007      	add	sp, #28
 8007298:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800729c <__locale_ctype_ptr_l>:
 800729c:	f8d0 00ec 	ldr.w	r0, [r0, #236]	; 0xec
 80072a0:	4770      	bx	lr

080072a2 <__localeconv_l>:
 80072a2:	30f0      	adds	r0, #240	; 0xf0
 80072a4:	4770      	bx	lr
	...

080072a8 <_localeconv_r>:
 80072a8:	4b04      	ldr	r3, [pc, #16]	; (80072bc <_localeconv_r+0x14>)
 80072aa:	681b      	ldr	r3, [r3, #0]
 80072ac:	6a18      	ldr	r0, [r3, #32]
 80072ae:	4b04      	ldr	r3, [pc, #16]	; (80072c0 <_localeconv_r+0x18>)
 80072b0:	2800      	cmp	r0, #0
 80072b2:	bf08      	it	eq
 80072b4:	4618      	moveq	r0, r3
 80072b6:	30f0      	adds	r0, #240	; 0xf0
 80072b8:	4770      	bx	lr
 80072ba:	bf00      	nop
 80072bc:	20000014 	.word	0x20000014
 80072c0:	20000078 	.word	0x20000078

080072c4 <malloc>:
 80072c4:	4b02      	ldr	r3, [pc, #8]	; (80072d0 <malloc+0xc>)
 80072c6:	4601      	mov	r1, r0
 80072c8:	6818      	ldr	r0, [r3, #0]
 80072ca:	f000 bc81 	b.w	8007bd0 <_malloc_r>
 80072ce:	bf00      	nop
 80072d0:	20000014 	.word	0x20000014

080072d4 <__ascii_mbtowc>:
 80072d4:	b082      	sub	sp, #8
 80072d6:	b901      	cbnz	r1, 80072da <__ascii_mbtowc+0x6>
 80072d8:	a901      	add	r1, sp, #4
 80072da:	b142      	cbz	r2, 80072ee <__ascii_mbtowc+0x1a>
 80072dc:	b14b      	cbz	r3, 80072f2 <__ascii_mbtowc+0x1e>
 80072de:	7813      	ldrb	r3, [r2, #0]
 80072e0:	600b      	str	r3, [r1, #0]
 80072e2:	7812      	ldrb	r2, [r2, #0]
 80072e4:	1c10      	adds	r0, r2, #0
 80072e6:	bf18      	it	ne
 80072e8:	2001      	movne	r0, #1
 80072ea:	b002      	add	sp, #8
 80072ec:	4770      	bx	lr
 80072ee:	4610      	mov	r0, r2
 80072f0:	e7fb      	b.n	80072ea <__ascii_mbtowc+0x16>
 80072f2:	f06f 0001 	mvn.w	r0, #1
 80072f6:	e7f8      	b.n	80072ea <__ascii_mbtowc+0x16>

080072f8 <memchr>:
 80072f8:	b510      	push	{r4, lr}
 80072fa:	b2c9      	uxtb	r1, r1
 80072fc:	4402      	add	r2, r0
 80072fe:	4290      	cmp	r0, r2
 8007300:	4603      	mov	r3, r0
 8007302:	d101      	bne.n	8007308 <memchr+0x10>
 8007304:	2300      	movs	r3, #0
 8007306:	e003      	b.n	8007310 <memchr+0x18>
 8007308:	781c      	ldrb	r4, [r3, #0]
 800730a:	3001      	adds	r0, #1
 800730c:	428c      	cmp	r4, r1
 800730e:	d1f6      	bne.n	80072fe <memchr+0x6>
 8007310:	4618      	mov	r0, r3
 8007312:	bd10      	pop	{r4, pc}

08007314 <memcpy>:
 8007314:	b510      	push	{r4, lr}
 8007316:	1e43      	subs	r3, r0, #1
 8007318:	440a      	add	r2, r1
 800731a:	4291      	cmp	r1, r2
 800731c:	d100      	bne.n	8007320 <memcpy+0xc>
 800731e:	bd10      	pop	{r4, pc}
 8007320:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007324:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007328:	e7f7      	b.n	800731a <memcpy+0x6>

0800732a <_Balloc>:
 800732a:	b570      	push	{r4, r5, r6, lr}
 800732c:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800732e:	4604      	mov	r4, r0
 8007330:	460e      	mov	r6, r1
 8007332:	b93d      	cbnz	r5, 8007344 <_Balloc+0x1a>
 8007334:	2010      	movs	r0, #16
 8007336:	f7ff ffc5 	bl	80072c4 <malloc>
 800733a:	6260      	str	r0, [r4, #36]	; 0x24
 800733c:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8007340:	6005      	str	r5, [r0, #0]
 8007342:	60c5      	str	r5, [r0, #12]
 8007344:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8007346:	68eb      	ldr	r3, [r5, #12]
 8007348:	b183      	cbz	r3, 800736c <_Balloc+0x42>
 800734a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800734c:	68db      	ldr	r3, [r3, #12]
 800734e:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 8007352:	b9b8      	cbnz	r0, 8007384 <_Balloc+0x5a>
 8007354:	2101      	movs	r1, #1
 8007356:	fa01 f506 	lsl.w	r5, r1, r6
 800735a:	1d6a      	adds	r2, r5, #5
 800735c:	0092      	lsls	r2, r2, #2
 800735e:	4620      	mov	r0, r4
 8007360:	f000 fbdc 	bl	8007b1c <_calloc_r>
 8007364:	b160      	cbz	r0, 8007380 <_Balloc+0x56>
 8007366:	e9c0 6501 	strd	r6, r5, [r0, #4]
 800736a:	e00e      	b.n	800738a <_Balloc+0x60>
 800736c:	2221      	movs	r2, #33	; 0x21
 800736e:	2104      	movs	r1, #4
 8007370:	4620      	mov	r0, r4
 8007372:	f000 fbd3 	bl	8007b1c <_calloc_r>
 8007376:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007378:	60e8      	str	r0, [r5, #12]
 800737a:	68db      	ldr	r3, [r3, #12]
 800737c:	2b00      	cmp	r3, #0
 800737e:	d1e4      	bne.n	800734a <_Balloc+0x20>
 8007380:	2000      	movs	r0, #0
 8007382:	bd70      	pop	{r4, r5, r6, pc}
 8007384:	6802      	ldr	r2, [r0, #0]
 8007386:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 800738a:	2300      	movs	r3, #0
 800738c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8007390:	e7f7      	b.n	8007382 <_Balloc+0x58>

08007392 <_Bfree>:
 8007392:	b570      	push	{r4, r5, r6, lr}
 8007394:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8007396:	4606      	mov	r6, r0
 8007398:	460d      	mov	r5, r1
 800739a:	b93c      	cbnz	r4, 80073ac <_Bfree+0x1a>
 800739c:	2010      	movs	r0, #16
 800739e:	f7ff ff91 	bl	80072c4 <malloc>
 80073a2:	6270      	str	r0, [r6, #36]	; 0x24
 80073a4:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80073a8:	6004      	str	r4, [r0, #0]
 80073aa:	60c4      	str	r4, [r0, #12]
 80073ac:	b13d      	cbz	r5, 80073be <_Bfree+0x2c>
 80073ae:	6a73      	ldr	r3, [r6, #36]	; 0x24
 80073b0:	686a      	ldr	r2, [r5, #4]
 80073b2:	68db      	ldr	r3, [r3, #12]
 80073b4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80073b8:	6029      	str	r1, [r5, #0]
 80073ba:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 80073be:	bd70      	pop	{r4, r5, r6, pc}

080073c0 <__multadd>:
 80073c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80073c4:	461f      	mov	r7, r3
 80073c6:	4606      	mov	r6, r0
 80073c8:	460c      	mov	r4, r1
 80073ca:	2300      	movs	r3, #0
 80073cc:	690d      	ldr	r5, [r1, #16]
 80073ce:	f101 0c14 	add.w	ip, r1, #20
 80073d2:	f8dc 0000 	ldr.w	r0, [ip]
 80073d6:	3301      	adds	r3, #1
 80073d8:	b281      	uxth	r1, r0
 80073da:	fb02 7101 	mla	r1, r2, r1, r7
 80073de:	0c00      	lsrs	r0, r0, #16
 80073e0:	0c0f      	lsrs	r7, r1, #16
 80073e2:	fb02 7000 	mla	r0, r2, r0, r7
 80073e6:	b289      	uxth	r1, r1
 80073e8:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 80073ec:	429d      	cmp	r5, r3
 80073ee:	ea4f 4710 	mov.w	r7, r0, lsr #16
 80073f2:	f84c 1b04 	str.w	r1, [ip], #4
 80073f6:	dcec      	bgt.n	80073d2 <__multadd+0x12>
 80073f8:	b1d7      	cbz	r7, 8007430 <__multadd+0x70>
 80073fa:	68a3      	ldr	r3, [r4, #8]
 80073fc:	42ab      	cmp	r3, r5
 80073fe:	dc12      	bgt.n	8007426 <__multadd+0x66>
 8007400:	6861      	ldr	r1, [r4, #4]
 8007402:	4630      	mov	r0, r6
 8007404:	3101      	adds	r1, #1
 8007406:	f7ff ff90 	bl	800732a <_Balloc>
 800740a:	4680      	mov	r8, r0
 800740c:	6922      	ldr	r2, [r4, #16]
 800740e:	f104 010c 	add.w	r1, r4, #12
 8007412:	3202      	adds	r2, #2
 8007414:	0092      	lsls	r2, r2, #2
 8007416:	300c      	adds	r0, #12
 8007418:	f7ff ff7c 	bl	8007314 <memcpy>
 800741c:	4621      	mov	r1, r4
 800741e:	4630      	mov	r0, r6
 8007420:	f7ff ffb7 	bl	8007392 <_Bfree>
 8007424:	4644      	mov	r4, r8
 8007426:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800742a:	3501      	adds	r5, #1
 800742c:	615f      	str	r7, [r3, #20]
 800742e:	6125      	str	r5, [r4, #16]
 8007430:	4620      	mov	r0, r4
 8007432:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08007436 <__s2b>:
 8007436:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800743a:	4615      	mov	r5, r2
 800743c:	2209      	movs	r2, #9
 800743e:	461f      	mov	r7, r3
 8007440:	3308      	adds	r3, #8
 8007442:	460c      	mov	r4, r1
 8007444:	fb93 f3f2 	sdiv	r3, r3, r2
 8007448:	4606      	mov	r6, r0
 800744a:	2201      	movs	r2, #1
 800744c:	2100      	movs	r1, #0
 800744e:	429a      	cmp	r2, r3
 8007450:	db20      	blt.n	8007494 <__s2b+0x5e>
 8007452:	4630      	mov	r0, r6
 8007454:	f7ff ff69 	bl	800732a <_Balloc>
 8007458:	9b08      	ldr	r3, [sp, #32]
 800745a:	2d09      	cmp	r5, #9
 800745c:	6143      	str	r3, [r0, #20]
 800745e:	f04f 0301 	mov.w	r3, #1
 8007462:	6103      	str	r3, [r0, #16]
 8007464:	dd19      	ble.n	800749a <__s2b+0x64>
 8007466:	f104 0809 	add.w	r8, r4, #9
 800746a:	46c1      	mov	r9, r8
 800746c:	442c      	add	r4, r5
 800746e:	f819 3b01 	ldrb.w	r3, [r9], #1
 8007472:	4601      	mov	r1, r0
 8007474:	3b30      	subs	r3, #48	; 0x30
 8007476:	220a      	movs	r2, #10
 8007478:	4630      	mov	r0, r6
 800747a:	f7ff ffa1 	bl	80073c0 <__multadd>
 800747e:	45a1      	cmp	r9, r4
 8007480:	d1f5      	bne.n	800746e <__s2b+0x38>
 8007482:	eb08 0405 	add.w	r4, r8, r5
 8007486:	3c08      	subs	r4, #8
 8007488:	1b2d      	subs	r5, r5, r4
 800748a:	1963      	adds	r3, r4, r5
 800748c:	42bb      	cmp	r3, r7
 800748e:	db07      	blt.n	80074a0 <__s2b+0x6a>
 8007490:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007494:	0052      	lsls	r2, r2, #1
 8007496:	3101      	adds	r1, #1
 8007498:	e7d9      	b.n	800744e <__s2b+0x18>
 800749a:	340a      	adds	r4, #10
 800749c:	2509      	movs	r5, #9
 800749e:	e7f3      	b.n	8007488 <__s2b+0x52>
 80074a0:	f814 3b01 	ldrb.w	r3, [r4], #1
 80074a4:	4601      	mov	r1, r0
 80074a6:	3b30      	subs	r3, #48	; 0x30
 80074a8:	220a      	movs	r2, #10
 80074aa:	4630      	mov	r0, r6
 80074ac:	f7ff ff88 	bl	80073c0 <__multadd>
 80074b0:	e7eb      	b.n	800748a <__s2b+0x54>

080074b2 <__hi0bits>:
 80074b2:	0c02      	lsrs	r2, r0, #16
 80074b4:	0412      	lsls	r2, r2, #16
 80074b6:	4603      	mov	r3, r0
 80074b8:	b9b2      	cbnz	r2, 80074e8 <__hi0bits+0x36>
 80074ba:	0403      	lsls	r3, r0, #16
 80074bc:	2010      	movs	r0, #16
 80074be:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 80074c2:	bf04      	itt	eq
 80074c4:	021b      	lsleq	r3, r3, #8
 80074c6:	3008      	addeq	r0, #8
 80074c8:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 80074cc:	bf04      	itt	eq
 80074ce:	011b      	lsleq	r3, r3, #4
 80074d0:	3004      	addeq	r0, #4
 80074d2:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 80074d6:	bf04      	itt	eq
 80074d8:	009b      	lsleq	r3, r3, #2
 80074da:	3002      	addeq	r0, #2
 80074dc:	2b00      	cmp	r3, #0
 80074de:	db06      	blt.n	80074ee <__hi0bits+0x3c>
 80074e0:	005b      	lsls	r3, r3, #1
 80074e2:	d503      	bpl.n	80074ec <__hi0bits+0x3a>
 80074e4:	3001      	adds	r0, #1
 80074e6:	4770      	bx	lr
 80074e8:	2000      	movs	r0, #0
 80074ea:	e7e8      	b.n	80074be <__hi0bits+0xc>
 80074ec:	2020      	movs	r0, #32
 80074ee:	4770      	bx	lr

080074f0 <__lo0bits>:
 80074f0:	6803      	ldr	r3, [r0, #0]
 80074f2:	4601      	mov	r1, r0
 80074f4:	f013 0207 	ands.w	r2, r3, #7
 80074f8:	d00b      	beq.n	8007512 <__lo0bits+0x22>
 80074fa:	07da      	lsls	r2, r3, #31
 80074fc:	d423      	bmi.n	8007546 <__lo0bits+0x56>
 80074fe:	0798      	lsls	r0, r3, #30
 8007500:	bf49      	itett	mi
 8007502:	085b      	lsrmi	r3, r3, #1
 8007504:	089b      	lsrpl	r3, r3, #2
 8007506:	2001      	movmi	r0, #1
 8007508:	600b      	strmi	r3, [r1, #0]
 800750a:	bf5c      	itt	pl
 800750c:	600b      	strpl	r3, [r1, #0]
 800750e:	2002      	movpl	r0, #2
 8007510:	4770      	bx	lr
 8007512:	b298      	uxth	r0, r3
 8007514:	b9a8      	cbnz	r0, 8007542 <__lo0bits+0x52>
 8007516:	2010      	movs	r0, #16
 8007518:	0c1b      	lsrs	r3, r3, #16
 800751a:	f013 0fff 	tst.w	r3, #255	; 0xff
 800751e:	bf04      	itt	eq
 8007520:	0a1b      	lsreq	r3, r3, #8
 8007522:	3008      	addeq	r0, #8
 8007524:	071a      	lsls	r2, r3, #28
 8007526:	bf04      	itt	eq
 8007528:	091b      	lsreq	r3, r3, #4
 800752a:	3004      	addeq	r0, #4
 800752c:	079a      	lsls	r2, r3, #30
 800752e:	bf04      	itt	eq
 8007530:	089b      	lsreq	r3, r3, #2
 8007532:	3002      	addeq	r0, #2
 8007534:	07da      	lsls	r2, r3, #31
 8007536:	d402      	bmi.n	800753e <__lo0bits+0x4e>
 8007538:	085b      	lsrs	r3, r3, #1
 800753a:	d006      	beq.n	800754a <__lo0bits+0x5a>
 800753c:	3001      	adds	r0, #1
 800753e:	600b      	str	r3, [r1, #0]
 8007540:	4770      	bx	lr
 8007542:	4610      	mov	r0, r2
 8007544:	e7e9      	b.n	800751a <__lo0bits+0x2a>
 8007546:	2000      	movs	r0, #0
 8007548:	4770      	bx	lr
 800754a:	2020      	movs	r0, #32
 800754c:	4770      	bx	lr

0800754e <__i2b>:
 800754e:	b510      	push	{r4, lr}
 8007550:	460c      	mov	r4, r1
 8007552:	2101      	movs	r1, #1
 8007554:	f7ff fee9 	bl	800732a <_Balloc>
 8007558:	2201      	movs	r2, #1
 800755a:	6144      	str	r4, [r0, #20]
 800755c:	6102      	str	r2, [r0, #16]
 800755e:	bd10      	pop	{r4, pc}

08007560 <__multiply>:
 8007560:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007564:	4614      	mov	r4, r2
 8007566:	690a      	ldr	r2, [r1, #16]
 8007568:	6923      	ldr	r3, [r4, #16]
 800756a:	4688      	mov	r8, r1
 800756c:	429a      	cmp	r2, r3
 800756e:	bfbe      	ittt	lt
 8007570:	460b      	movlt	r3, r1
 8007572:	46a0      	movlt	r8, r4
 8007574:	461c      	movlt	r4, r3
 8007576:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800757a:	f8d4 9010 	ldr.w	r9, [r4, #16]
 800757e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8007582:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8007586:	eb07 0609 	add.w	r6, r7, r9
 800758a:	42b3      	cmp	r3, r6
 800758c:	bfb8      	it	lt
 800758e:	3101      	addlt	r1, #1
 8007590:	f7ff fecb 	bl	800732a <_Balloc>
 8007594:	f100 0514 	add.w	r5, r0, #20
 8007598:	462b      	mov	r3, r5
 800759a:	2200      	movs	r2, #0
 800759c:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 80075a0:	4573      	cmp	r3, lr
 80075a2:	d316      	bcc.n	80075d2 <__multiply+0x72>
 80075a4:	f104 0214 	add.w	r2, r4, #20
 80075a8:	f108 0114 	add.w	r1, r8, #20
 80075ac:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 80075b0:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 80075b4:	9300      	str	r3, [sp, #0]
 80075b6:	9b00      	ldr	r3, [sp, #0]
 80075b8:	9201      	str	r2, [sp, #4]
 80075ba:	4293      	cmp	r3, r2
 80075bc:	d80c      	bhi.n	80075d8 <__multiply+0x78>
 80075be:	2e00      	cmp	r6, #0
 80075c0:	dd03      	ble.n	80075ca <__multiply+0x6a>
 80075c2:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 80075c6:	2b00      	cmp	r3, #0
 80075c8:	d05d      	beq.n	8007686 <__multiply+0x126>
 80075ca:	6106      	str	r6, [r0, #16]
 80075cc:	b003      	add	sp, #12
 80075ce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80075d2:	f843 2b04 	str.w	r2, [r3], #4
 80075d6:	e7e3      	b.n	80075a0 <__multiply+0x40>
 80075d8:	f8b2 b000 	ldrh.w	fp, [r2]
 80075dc:	f1bb 0f00 	cmp.w	fp, #0
 80075e0:	d023      	beq.n	800762a <__multiply+0xca>
 80075e2:	4689      	mov	r9, r1
 80075e4:	46ac      	mov	ip, r5
 80075e6:	f04f 0800 	mov.w	r8, #0
 80075ea:	f859 4b04 	ldr.w	r4, [r9], #4
 80075ee:	f8dc a000 	ldr.w	sl, [ip]
 80075f2:	b2a3      	uxth	r3, r4
 80075f4:	fa1f fa8a 	uxth.w	sl, sl
 80075f8:	fb0b a303 	mla	r3, fp, r3, sl
 80075fc:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8007600:	f8dc 4000 	ldr.w	r4, [ip]
 8007604:	4443      	add	r3, r8
 8007606:	ea4f 4814 	mov.w	r8, r4, lsr #16
 800760a:	fb0b 840a 	mla	r4, fp, sl, r8
 800760e:	46e2      	mov	sl, ip
 8007610:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 8007614:	b29b      	uxth	r3, r3
 8007616:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800761a:	454f      	cmp	r7, r9
 800761c:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8007620:	f84a 3b04 	str.w	r3, [sl], #4
 8007624:	d82b      	bhi.n	800767e <__multiply+0x11e>
 8007626:	f8cc 8004 	str.w	r8, [ip, #4]
 800762a:	9b01      	ldr	r3, [sp, #4]
 800762c:	3204      	adds	r2, #4
 800762e:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 8007632:	f1ba 0f00 	cmp.w	sl, #0
 8007636:	d020      	beq.n	800767a <__multiply+0x11a>
 8007638:	4689      	mov	r9, r1
 800763a:	46a8      	mov	r8, r5
 800763c:	f04f 0b00 	mov.w	fp, #0
 8007640:	682b      	ldr	r3, [r5, #0]
 8007642:	f8b9 c000 	ldrh.w	ip, [r9]
 8007646:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 800764a:	b29b      	uxth	r3, r3
 800764c:	fb0a 440c 	mla	r4, sl, ip, r4
 8007650:	46c4      	mov	ip, r8
 8007652:	445c      	add	r4, fp
 8007654:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8007658:	f84c 3b04 	str.w	r3, [ip], #4
 800765c:	f859 3b04 	ldr.w	r3, [r9], #4
 8007660:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 8007664:	0c1b      	lsrs	r3, r3, #16
 8007666:	fb0a b303 	mla	r3, sl, r3, fp
 800766a:	454f      	cmp	r7, r9
 800766c:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 8007670:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 8007674:	d805      	bhi.n	8007682 <__multiply+0x122>
 8007676:	f8c8 3004 	str.w	r3, [r8, #4]
 800767a:	3504      	adds	r5, #4
 800767c:	e79b      	b.n	80075b6 <__multiply+0x56>
 800767e:	46d4      	mov	ip, sl
 8007680:	e7b3      	b.n	80075ea <__multiply+0x8a>
 8007682:	46e0      	mov	r8, ip
 8007684:	e7dd      	b.n	8007642 <__multiply+0xe2>
 8007686:	3e01      	subs	r6, #1
 8007688:	e799      	b.n	80075be <__multiply+0x5e>
	...

0800768c <__pow5mult>:
 800768c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007690:	4615      	mov	r5, r2
 8007692:	f012 0203 	ands.w	r2, r2, #3
 8007696:	4606      	mov	r6, r0
 8007698:	460f      	mov	r7, r1
 800769a:	d007      	beq.n	80076ac <__pow5mult+0x20>
 800769c:	4c21      	ldr	r4, [pc, #132]	; (8007724 <__pow5mult+0x98>)
 800769e:	3a01      	subs	r2, #1
 80076a0:	2300      	movs	r3, #0
 80076a2:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80076a6:	f7ff fe8b 	bl	80073c0 <__multadd>
 80076aa:	4607      	mov	r7, r0
 80076ac:	10ad      	asrs	r5, r5, #2
 80076ae:	d035      	beq.n	800771c <__pow5mult+0x90>
 80076b0:	6a74      	ldr	r4, [r6, #36]	; 0x24
 80076b2:	b93c      	cbnz	r4, 80076c4 <__pow5mult+0x38>
 80076b4:	2010      	movs	r0, #16
 80076b6:	f7ff fe05 	bl	80072c4 <malloc>
 80076ba:	6270      	str	r0, [r6, #36]	; 0x24
 80076bc:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80076c0:	6004      	str	r4, [r0, #0]
 80076c2:	60c4      	str	r4, [r0, #12]
 80076c4:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 80076c8:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80076cc:	b94c      	cbnz	r4, 80076e2 <__pow5mult+0x56>
 80076ce:	f240 2171 	movw	r1, #625	; 0x271
 80076d2:	4630      	mov	r0, r6
 80076d4:	f7ff ff3b 	bl	800754e <__i2b>
 80076d8:	2300      	movs	r3, #0
 80076da:	4604      	mov	r4, r0
 80076dc:	f8c8 0008 	str.w	r0, [r8, #8]
 80076e0:	6003      	str	r3, [r0, #0]
 80076e2:	f04f 0800 	mov.w	r8, #0
 80076e6:	07eb      	lsls	r3, r5, #31
 80076e8:	d50a      	bpl.n	8007700 <__pow5mult+0x74>
 80076ea:	4639      	mov	r1, r7
 80076ec:	4622      	mov	r2, r4
 80076ee:	4630      	mov	r0, r6
 80076f0:	f7ff ff36 	bl	8007560 <__multiply>
 80076f4:	4681      	mov	r9, r0
 80076f6:	4639      	mov	r1, r7
 80076f8:	4630      	mov	r0, r6
 80076fa:	f7ff fe4a 	bl	8007392 <_Bfree>
 80076fe:	464f      	mov	r7, r9
 8007700:	106d      	asrs	r5, r5, #1
 8007702:	d00b      	beq.n	800771c <__pow5mult+0x90>
 8007704:	6820      	ldr	r0, [r4, #0]
 8007706:	b938      	cbnz	r0, 8007718 <__pow5mult+0x8c>
 8007708:	4622      	mov	r2, r4
 800770a:	4621      	mov	r1, r4
 800770c:	4630      	mov	r0, r6
 800770e:	f7ff ff27 	bl	8007560 <__multiply>
 8007712:	6020      	str	r0, [r4, #0]
 8007714:	f8c0 8000 	str.w	r8, [r0]
 8007718:	4604      	mov	r4, r0
 800771a:	e7e4      	b.n	80076e6 <__pow5mult+0x5a>
 800771c:	4638      	mov	r0, r7
 800771e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007722:	bf00      	nop
 8007724:	08008a08 	.word	0x08008a08

08007728 <__lshift>:
 8007728:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800772c:	460c      	mov	r4, r1
 800772e:	4607      	mov	r7, r0
 8007730:	4616      	mov	r6, r2
 8007732:	6923      	ldr	r3, [r4, #16]
 8007734:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8007738:	eb0a 0903 	add.w	r9, sl, r3
 800773c:	6849      	ldr	r1, [r1, #4]
 800773e:	68a3      	ldr	r3, [r4, #8]
 8007740:	f109 0501 	add.w	r5, r9, #1
 8007744:	42ab      	cmp	r3, r5
 8007746:	db32      	blt.n	80077ae <__lshift+0x86>
 8007748:	4638      	mov	r0, r7
 800774a:	f7ff fdee 	bl	800732a <_Balloc>
 800774e:	2300      	movs	r3, #0
 8007750:	4680      	mov	r8, r0
 8007752:	461a      	mov	r2, r3
 8007754:	f100 0114 	add.w	r1, r0, #20
 8007758:	4553      	cmp	r3, sl
 800775a:	db2b      	blt.n	80077b4 <__lshift+0x8c>
 800775c:	6920      	ldr	r0, [r4, #16]
 800775e:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8007762:	f104 0314 	add.w	r3, r4, #20
 8007766:	f016 021f 	ands.w	r2, r6, #31
 800776a:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800776e:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8007772:	d025      	beq.n	80077c0 <__lshift+0x98>
 8007774:	2000      	movs	r0, #0
 8007776:	f1c2 0e20 	rsb	lr, r2, #32
 800777a:	468a      	mov	sl, r1
 800777c:	681e      	ldr	r6, [r3, #0]
 800777e:	4096      	lsls	r6, r2
 8007780:	4330      	orrs	r0, r6
 8007782:	f84a 0b04 	str.w	r0, [sl], #4
 8007786:	f853 0b04 	ldr.w	r0, [r3], #4
 800778a:	459c      	cmp	ip, r3
 800778c:	fa20 f00e 	lsr.w	r0, r0, lr
 8007790:	d814      	bhi.n	80077bc <__lshift+0x94>
 8007792:	6048      	str	r0, [r1, #4]
 8007794:	b108      	cbz	r0, 800779a <__lshift+0x72>
 8007796:	f109 0502 	add.w	r5, r9, #2
 800779a:	3d01      	subs	r5, #1
 800779c:	4638      	mov	r0, r7
 800779e:	f8c8 5010 	str.w	r5, [r8, #16]
 80077a2:	4621      	mov	r1, r4
 80077a4:	f7ff fdf5 	bl	8007392 <_Bfree>
 80077a8:	4640      	mov	r0, r8
 80077aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80077ae:	3101      	adds	r1, #1
 80077b0:	005b      	lsls	r3, r3, #1
 80077b2:	e7c7      	b.n	8007744 <__lshift+0x1c>
 80077b4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 80077b8:	3301      	adds	r3, #1
 80077ba:	e7cd      	b.n	8007758 <__lshift+0x30>
 80077bc:	4651      	mov	r1, sl
 80077be:	e7dc      	b.n	800777a <__lshift+0x52>
 80077c0:	3904      	subs	r1, #4
 80077c2:	f853 2b04 	ldr.w	r2, [r3], #4
 80077c6:	459c      	cmp	ip, r3
 80077c8:	f841 2f04 	str.w	r2, [r1, #4]!
 80077cc:	d8f9      	bhi.n	80077c2 <__lshift+0x9a>
 80077ce:	e7e4      	b.n	800779a <__lshift+0x72>

080077d0 <__mcmp>:
 80077d0:	6903      	ldr	r3, [r0, #16]
 80077d2:	690a      	ldr	r2, [r1, #16]
 80077d4:	b530      	push	{r4, r5, lr}
 80077d6:	1a9b      	subs	r3, r3, r2
 80077d8:	d10c      	bne.n	80077f4 <__mcmp+0x24>
 80077da:	0092      	lsls	r2, r2, #2
 80077dc:	3014      	adds	r0, #20
 80077de:	3114      	adds	r1, #20
 80077e0:	1884      	adds	r4, r0, r2
 80077e2:	4411      	add	r1, r2
 80077e4:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 80077e8:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 80077ec:	4295      	cmp	r5, r2
 80077ee:	d003      	beq.n	80077f8 <__mcmp+0x28>
 80077f0:	d305      	bcc.n	80077fe <__mcmp+0x2e>
 80077f2:	2301      	movs	r3, #1
 80077f4:	4618      	mov	r0, r3
 80077f6:	bd30      	pop	{r4, r5, pc}
 80077f8:	42a0      	cmp	r0, r4
 80077fa:	d3f3      	bcc.n	80077e4 <__mcmp+0x14>
 80077fc:	e7fa      	b.n	80077f4 <__mcmp+0x24>
 80077fe:	f04f 33ff 	mov.w	r3, #4294967295
 8007802:	e7f7      	b.n	80077f4 <__mcmp+0x24>

08007804 <__mdiff>:
 8007804:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007808:	460d      	mov	r5, r1
 800780a:	4607      	mov	r7, r0
 800780c:	4611      	mov	r1, r2
 800780e:	4628      	mov	r0, r5
 8007810:	4614      	mov	r4, r2
 8007812:	f7ff ffdd 	bl	80077d0 <__mcmp>
 8007816:	1e06      	subs	r6, r0, #0
 8007818:	d108      	bne.n	800782c <__mdiff+0x28>
 800781a:	4631      	mov	r1, r6
 800781c:	4638      	mov	r0, r7
 800781e:	f7ff fd84 	bl	800732a <_Balloc>
 8007822:	2301      	movs	r3, #1
 8007824:	e9c0 3604 	strd	r3, r6, [r0, #16]
 8007828:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800782c:	bfa4      	itt	ge
 800782e:	4623      	movge	r3, r4
 8007830:	462c      	movge	r4, r5
 8007832:	4638      	mov	r0, r7
 8007834:	6861      	ldr	r1, [r4, #4]
 8007836:	bfa6      	itte	ge
 8007838:	461d      	movge	r5, r3
 800783a:	2600      	movge	r6, #0
 800783c:	2601      	movlt	r6, #1
 800783e:	f7ff fd74 	bl	800732a <_Balloc>
 8007842:	f04f 0e00 	mov.w	lr, #0
 8007846:	60c6      	str	r6, [r0, #12]
 8007848:	692b      	ldr	r3, [r5, #16]
 800784a:	6926      	ldr	r6, [r4, #16]
 800784c:	f104 0214 	add.w	r2, r4, #20
 8007850:	f105 0914 	add.w	r9, r5, #20
 8007854:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 8007858:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 800785c:	f100 0114 	add.w	r1, r0, #20
 8007860:	f852 ab04 	ldr.w	sl, [r2], #4
 8007864:	f859 5b04 	ldr.w	r5, [r9], #4
 8007868:	fa1f f38a 	uxth.w	r3, sl
 800786c:	4473      	add	r3, lr
 800786e:	b2ac      	uxth	r4, r5
 8007870:	1b1b      	subs	r3, r3, r4
 8007872:	0c2c      	lsrs	r4, r5, #16
 8007874:	ebc4 441a 	rsb	r4, r4, sl, lsr #16
 8007878:	eb04 4423 	add.w	r4, r4, r3, asr #16
 800787c:	b29b      	uxth	r3, r3
 800787e:	ea4f 4e24 	mov.w	lr, r4, asr #16
 8007882:	45c8      	cmp	r8, r9
 8007884:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8007888:	4694      	mov	ip, r2
 800788a:	f841 4b04 	str.w	r4, [r1], #4
 800788e:	d8e7      	bhi.n	8007860 <__mdiff+0x5c>
 8007890:	45bc      	cmp	ip, r7
 8007892:	d304      	bcc.n	800789e <__mdiff+0x9a>
 8007894:	f851 3d04 	ldr.w	r3, [r1, #-4]!
 8007898:	b183      	cbz	r3, 80078bc <__mdiff+0xb8>
 800789a:	6106      	str	r6, [r0, #16]
 800789c:	e7c4      	b.n	8007828 <__mdiff+0x24>
 800789e:	f85c 4b04 	ldr.w	r4, [ip], #4
 80078a2:	b2a2      	uxth	r2, r4
 80078a4:	4472      	add	r2, lr
 80078a6:	1413      	asrs	r3, r2, #16
 80078a8:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 80078ac:	b292      	uxth	r2, r2
 80078ae:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 80078b2:	ea4f 4e23 	mov.w	lr, r3, asr #16
 80078b6:	f841 2b04 	str.w	r2, [r1], #4
 80078ba:	e7e9      	b.n	8007890 <__mdiff+0x8c>
 80078bc:	3e01      	subs	r6, #1
 80078be:	e7e9      	b.n	8007894 <__mdiff+0x90>

080078c0 <__ulp>:
 80078c0:	4b10      	ldr	r3, [pc, #64]	; (8007904 <__ulp+0x44>)
 80078c2:	400b      	ands	r3, r1
 80078c4:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 80078c8:	2b00      	cmp	r3, #0
 80078ca:	dd02      	ble.n	80078d2 <__ulp+0x12>
 80078cc:	2000      	movs	r0, #0
 80078ce:	4619      	mov	r1, r3
 80078d0:	4770      	bx	lr
 80078d2:	425b      	negs	r3, r3
 80078d4:	151b      	asrs	r3, r3, #20
 80078d6:	2b13      	cmp	r3, #19
 80078d8:	f04f 0000 	mov.w	r0, #0
 80078dc:	f04f 0100 	mov.w	r1, #0
 80078e0:	dc04      	bgt.n	80078ec <__ulp+0x2c>
 80078e2:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 80078e6:	fa42 f103 	asr.w	r1, r2, r3
 80078ea:	4770      	bx	lr
 80078ec:	2201      	movs	r2, #1
 80078ee:	3b14      	subs	r3, #20
 80078f0:	2b1e      	cmp	r3, #30
 80078f2:	bfce      	itee	gt
 80078f4:	4613      	movgt	r3, r2
 80078f6:	f1c3 031f 	rsble	r3, r3, #31
 80078fa:	fa02 f303 	lslle.w	r3, r2, r3
 80078fe:	4618      	mov	r0, r3
 8007900:	4770      	bx	lr
 8007902:	bf00      	nop
 8007904:	7ff00000 	.word	0x7ff00000

08007908 <__b2d>:
 8007908:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800790c:	6907      	ldr	r7, [r0, #16]
 800790e:	f100 0914 	add.w	r9, r0, #20
 8007912:	eb09 0787 	add.w	r7, r9, r7, lsl #2
 8007916:	f857 6c04 	ldr.w	r6, [r7, #-4]
 800791a:	f1a7 0804 	sub.w	r8, r7, #4
 800791e:	4630      	mov	r0, r6
 8007920:	f7ff fdc7 	bl	80074b2 <__hi0bits>
 8007924:	f1c0 0320 	rsb	r3, r0, #32
 8007928:	280a      	cmp	r0, #10
 800792a:	600b      	str	r3, [r1, #0]
 800792c:	491e      	ldr	r1, [pc, #120]	; (80079a8 <__b2d+0xa0>)
 800792e:	dc17      	bgt.n	8007960 <__b2d+0x58>
 8007930:	45c1      	cmp	r9, r8
 8007932:	bf28      	it	cs
 8007934:	2200      	movcs	r2, #0
 8007936:	f1c0 0c0b 	rsb	ip, r0, #11
 800793a:	fa26 f30c 	lsr.w	r3, r6, ip
 800793e:	bf38      	it	cc
 8007940:	f857 2c08 	ldrcc.w	r2, [r7, #-8]
 8007944:	ea43 0501 	orr.w	r5, r3, r1
 8007948:	f100 0315 	add.w	r3, r0, #21
 800794c:	fa06 f303 	lsl.w	r3, r6, r3
 8007950:	fa22 f20c 	lsr.w	r2, r2, ip
 8007954:	ea43 0402 	orr.w	r4, r3, r2
 8007958:	4620      	mov	r0, r4
 800795a:	4629      	mov	r1, r5
 800795c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007960:	45c1      	cmp	r9, r8
 8007962:	bf3a      	itte	cc
 8007964:	f1a7 0808 	subcc.w	r8, r7, #8
 8007968:	f857 2c08 	ldrcc.w	r2, [r7, #-8]
 800796c:	2200      	movcs	r2, #0
 800796e:	f1b0 030b 	subs.w	r3, r0, #11
 8007972:	d015      	beq.n	80079a0 <__b2d+0x98>
 8007974:	409e      	lsls	r6, r3
 8007976:	f1c3 0720 	rsb	r7, r3, #32
 800797a:	f046 567f 	orr.w	r6, r6, #1069547520	; 0x3fc00000
 800797e:	fa22 f107 	lsr.w	r1, r2, r7
 8007982:	45c8      	cmp	r8, r9
 8007984:	f446 1640 	orr.w	r6, r6, #3145728	; 0x300000
 8007988:	ea46 0501 	orr.w	r5, r6, r1
 800798c:	bf94      	ite	ls
 800798e:	2100      	movls	r1, #0
 8007990:	f858 1c04 	ldrhi.w	r1, [r8, #-4]
 8007994:	fa02 f003 	lsl.w	r0, r2, r3
 8007998:	40f9      	lsrs	r1, r7
 800799a:	ea40 0401 	orr.w	r4, r0, r1
 800799e:	e7db      	b.n	8007958 <__b2d+0x50>
 80079a0:	ea46 0501 	orr.w	r5, r6, r1
 80079a4:	4614      	mov	r4, r2
 80079a6:	e7d7      	b.n	8007958 <__b2d+0x50>
 80079a8:	3ff00000 	.word	0x3ff00000

080079ac <__d2b>:
 80079ac:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 80079b0:	461c      	mov	r4, r3
 80079b2:	e9dd 6508 	ldrd	r6, r5, [sp, #32]
 80079b6:	2101      	movs	r1, #1
 80079b8:	4690      	mov	r8, r2
 80079ba:	f7ff fcb6 	bl	800732a <_Balloc>
 80079be:	f3c4 0213 	ubfx	r2, r4, #0, #20
 80079c2:	f3c4 540a 	ubfx	r4, r4, #20, #11
 80079c6:	4607      	mov	r7, r0
 80079c8:	bb34      	cbnz	r4, 8007a18 <__d2b+0x6c>
 80079ca:	9201      	str	r2, [sp, #4]
 80079cc:	f1b8 0200 	subs.w	r2, r8, #0
 80079d0:	d027      	beq.n	8007a22 <__d2b+0x76>
 80079d2:	a802      	add	r0, sp, #8
 80079d4:	f840 2d08 	str.w	r2, [r0, #-8]!
 80079d8:	f7ff fd8a 	bl	80074f0 <__lo0bits>
 80079dc:	9900      	ldr	r1, [sp, #0]
 80079de:	b1f0      	cbz	r0, 8007a1e <__d2b+0x72>
 80079e0:	9a01      	ldr	r2, [sp, #4]
 80079e2:	f1c0 0320 	rsb	r3, r0, #32
 80079e6:	fa02 f303 	lsl.w	r3, r2, r3
 80079ea:	430b      	orrs	r3, r1
 80079ec:	40c2      	lsrs	r2, r0
 80079ee:	617b      	str	r3, [r7, #20]
 80079f0:	9201      	str	r2, [sp, #4]
 80079f2:	9b01      	ldr	r3, [sp, #4]
 80079f4:	2b00      	cmp	r3, #0
 80079f6:	bf14      	ite	ne
 80079f8:	2102      	movne	r1, #2
 80079fa:	2101      	moveq	r1, #1
 80079fc:	61bb      	str	r3, [r7, #24]
 80079fe:	6139      	str	r1, [r7, #16]
 8007a00:	b1c4      	cbz	r4, 8007a34 <__d2b+0x88>
 8007a02:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 8007a06:	4404      	add	r4, r0
 8007a08:	6034      	str	r4, [r6, #0]
 8007a0a:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8007a0e:	6028      	str	r0, [r5, #0]
 8007a10:	4638      	mov	r0, r7
 8007a12:	b002      	add	sp, #8
 8007a14:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007a18:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8007a1c:	e7d5      	b.n	80079ca <__d2b+0x1e>
 8007a1e:	6179      	str	r1, [r7, #20]
 8007a20:	e7e7      	b.n	80079f2 <__d2b+0x46>
 8007a22:	a801      	add	r0, sp, #4
 8007a24:	f7ff fd64 	bl	80074f0 <__lo0bits>
 8007a28:	2101      	movs	r1, #1
 8007a2a:	9b01      	ldr	r3, [sp, #4]
 8007a2c:	6139      	str	r1, [r7, #16]
 8007a2e:	617b      	str	r3, [r7, #20]
 8007a30:	3020      	adds	r0, #32
 8007a32:	e7e5      	b.n	8007a00 <__d2b+0x54>
 8007a34:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8007a38:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 8007a3c:	6030      	str	r0, [r6, #0]
 8007a3e:	6918      	ldr	r0, [r3, #16]
 8007a40:	f7ff fd37 	bl	80074b2 <__hi0bits>
 8007a44:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 8007a48:	e7e1      	b.n	8007a0e <__d2b+0x62>

08007a4a <__ratio>:
 8007a4a:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007a4e:	4688      	mov	r8, r1
 8007a50:	4669      	mov	r1, sp
 8007a52:	4681      	mov	r9, r0
 8007a54:	f7ff ff58 	bl	8007908 <__b2d>
 8007a58:	468b      	mov	fp, r1
 8007a5a:	4606      	mov	r6, r0
 8007a5c:	460f      	mov	r7, r1
 8007a5e:	4640      	mov	r0, r8
 8007a60:	a901      	add	r1, sp, #4
 8007a62:	f7ff ff51 	bl	8007908 <__b2d>
 8007a66:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8007a6a:	f8d8 2010 	ldr.w	r2, [r8, #16]
 8007a6e:	460d      	mov	r5, r1
 8007a70:	eba3 0c02 	sub.w	ip, r3, r2
 8007a74:	e9dd 3200 	ldrd	r3, r2, [sp]
 8007a78:	1a9b      	subs	r3, r3, r2
 8007a7a:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 8007a7e:	2b00      	cmp	r3, #0
 8007a80:	bfd5      	itete	le
 8007a82:	460a      	movle	r2, r1
 8007a84:	463a      	movgt	r2, r7
 8007a86:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8007a8a:	eb02 5b03 	addgt.w	fp, r2, r3, lsl #20
 8007a8e:	bfd8      	it	le
 8007a90:	eb02 5503 	addle.w	r5, r2, r3, lsl #20
 8007a94:	462b      	mov	r3, r5
 8007a96:	4602      	mov	r2, r0
 8007a98:	4659      	mov	r1, fp
 8007a9a:	4630      	mov	r0, r6
 8007a9c:	f7f8 fe46 	bl	800072c <__aeabi_ddiv>
 8007aa0:	b003      	add	sp, #12
 8007aa2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08007aa6 <__copybits>:
 8007aa6:	3901      	subs	r1, #1
 8007aa8:	b510      	push	{r4, lr}
 8007aaa:	1149      	asrs	r1, r1, #5
 8007aac:	6914      	ldr	r4, [r2, #16]
 8007aae:	3101      	adds	r1, #1
 8007ab0:	f102 0314 	add.w	r3, r2, #20
 8007ab4:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8007ab8:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8007abc:	42a3      	cmp	r3, r4
 8007abe:	4602      	mov	r2, r0
 8007ac0:	d303      	bcc.n	8007aca <__copybits+0x24>
 8007ac2:	2300      	movs	r3, #0
 8007ac4:	428a      	cmp	r2, r1
 8007ac6:	d305      	bcc.n	8007ad4 <__copybits+0x2e>
 8007ac8:	bd10      	pop	{r4, pc}
 8007aca:	f853 2b04 	ldr.w	r2, [r3], #4
 8007ace:	f840 2b04 	str.w	r2, [r0], #4
 8007ad2:	e7f3      	b.n	8007abc <__copybits+0x16>
 8007ad4:	f842 3b04 	str.w	r3, [r2], #4
 8007ad8:	e7f4      	b.n	8007ac4 <__copybits+0x1e>

08007ada <__any_on>:
 8007ada:	f100 0214 	add.w	r2, r0, #20
 8007ade:	6900      	ldr	r0, [r0, #16]
 8007ae0:	114b      	asrs	r3, r1, #5
 8007ae2:	4298      	cmp	r0, r3
 8007ae4:	b510      	push	{r4, lr}
 8007ae6:	db11      	blt.n	8007b0c <__any_on+0x32>
 8007ae8:	dd0a      	ble.n	8007b00 <__any_on+0x26>
 8007aea:	f011 011f 	ands.w	r1, r1, #31
 8007aee:	d007      	beq.n	8007b00 <__any_on+0x26>
 8007af0:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8007af4:	fa24 f001 	lsr.w	r0, r4, r1
 8007af8:	fa00 f101 	lsl.w	r1, r0, r1
 8007afc:	428c      	cmp	r4, r1
 8007afe:	d10b      	bne.n	8007b18 <__any_on+0x3e>
 8007b00:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8007b04:	4293      	cmp	r3, r2
 8007b06:	d803      	bhi.n	8007b10 <__any_on+0x36>
 8007b08:	2000      	movs	r0, #0
 8007b0a:	bd10      	pop	{r4, pc}
 8007b0c:	4603      	mov	r3, r0
 8007b0e:	e7f7      	b.n	8007b00 <__any_on+0x26>
 8007b10:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8007b14:	2900      	cmp	r1, #0
 8007b16:	d0f5      	beq.n	8007b04 <__any_on+0x2a>
 8007b18:	2001      	movs	r0, #1
 8007b1a:	e7f6      	b.n	8007b0a <__any_on+0x30>

08007b1c <_calloc_r>:
 8007b1c:	b538      	push	{r3, r4, r5, lr}
 8007b1e:	fb02 f401 	mul.w	r4, r2, r1
 8007b22:	4621      	mov	r1, r4
 8007b24:	f000 f854 	bl	8007bd0 <_malloc_r>
 8007b28:	4605      	mov	r5, r0
 8007b2a:	b118      	cbz	r0, 8007b34 <_calloc_r+0x18>
 8007b2c:	4622      	mov	r2, r4
 8007b2e:	2100      	movs	r1, #0
 8007b30:	f7fc fc4a 	bl	80043c8 <memset>
 8007b34:	4628      	mov	r0, r5
 8007b36:	bd38      	pop	{r3, r4, r5, pc}

08007b38 <_free_r>:
 8007b38:	b538      	push	{r3, r4, r5, lr}
 8007b3a:	4605      	mov	r5, r0
 8007b3c:	2900      	cmp	r1, #0
 8007b3e:	d043      	beq.n	8007bc8 <_free_r+0x90>
 8007b40:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007b44:	1f0c      	subs	r4, r1, #4
 8007b46:	2b00      	cmp	r3, #0
 8007b48:	bfb8      	it	lt
 8007b4a:	18e4      	addlt	r4, r4, r3
 8007b4c:	f000 fdbf 	bl	80086ce <__malloc_lock>
 8007b50:	4a1e      	ldr	r2, [pc, #120]	; (8007bcc <_free_r+0x94>)
 8007b52:	6813      	ldr	r3, [r2, #0]
 8007b54:	4610      	mov	r0, r2
 8007b56:	b933      	cbnz	r3, 8007b66 <_free_r+0x2e>
 8007b58:	6063      	str	r3, [r4, #4]
 8007b5a:	6014      	str	r4, [r2, #0]
 8007b5c:	4628      	mov	r0, r5
 8007b5e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007b62:	f000 bdb5 	b.w	80086d0 <__malloc_unlock>
 8007b66:	42a3      	cmp	r3, r4
 8007b68:	d90b      	bls.n	8007b82 <_free_r+0x4a>
 8007b6a:	6821      	ldr	r1, [r4, #0]
 8007b6c:	1862      	adds	r2, r4, r1
 8007b6e:	4293      	cmp	r3, r2
 8007b70:	bf01      	itttt	eq
 8007b72:	681a      	ldreq	r2, [r3, #0]
 8007b74:	685b      	ldreq	r3, [r3, #4]
 8007b76:	1852      	addeq	r2, r2, r1
 8007b78:	6022      	streq	r2, [r4, #0]
 8007b7a:	6063      	str	r3, [r4, #4]
 8007b7c:	6004      	str	r4, [r0, #0]
 8007b7e:	e7ed      	b.n	8007b5c <_free_r+0x24>
 8007b80:	4613      	mov	r3, r2
 8007b82:	685a      	ldr	r2, [r3, #4]
 8007b84:	b10a      	cbz	r2, 8007b8a <_free_r+0x52>
 8007b86:	42a2      	cmp	r2, r4
 8007b88:	d9fa      	bls.n	8007b80 <_free_r+0x48>
 8007b8a:	6819      	ldr	r1, [r3, #0]
 8007b8c:	1858      	adds	r0, r3, r1
 8007b8e:	42a0      	cmp	r0, r4
 8007b90:	d10b      	bne.n	8007baa <_free_r+0x72>
 8007b92:	6820      	ldr	r0, [r4, #0]
 8007b94:	4401      	add	r1, r0
 8007b96:	1858      	adds	r0, r3, r1
 8007b98:	4282      	cmp	r2, r0
 8007b9a:	6019      	str	r1, [r3, #0]
 8007b9c:	d1de      	bne.n	8007b5c <_free_r+0x24>
 8007b9e:	6810      	ldr	r0, [r2, #0]
 8007ba0:	6852      	ldr	r2, [r2, #4]
 8007ba2:	4401      	add	r1, r0
 8007ba4:	6019      	str	r1, [r3, #0]
 8007ba6:	605a      	str	r2, [r3, #4]
 8007ba8:	e7d8      	b.n	8007b5c <_free_r+0x24>
 8007baa:	d902      	bls.n	8007bb2 <_free_r+0x7a>
 8007bac:	230c      	movs	r3, #12
 8007bae:	602b      	str	r3, [r5, #0]
 8007bb0:	e7d4      	b.n	8007b5c <_free_r+0x24>
 8007bb2:	6820      	ldr	r0, [r4, #0]
 8007bb4:	1821      	adds	r1, r4, r0
 8007bb6:	428a      	cmp	r2, r1
 8007bb8:	bf01      	itttt	eq
 8007bba:	6811      	ldreq	r1, [r2, #0]
 8007bbc:	6852      	ldreq	r2, [r2, #4]
 8007bbe:	1809      	addeq	r1, r1, r0
 8007bc0:	6021      	streq	r1, [r4, #0]
 8007bc2:	6062      	str	r2, [r4, #4]
 8007bc4:	605c      	str	r4, [r3, #4]
 8007bc6:	e7c9      	b.n	8007b5c <_free_r+0x24>
 8007bc8:	bd38      	pop	{r3, r4, r5, pc}
 8007bca:	bf00      	nop
 8007bcc:	20000210 	.word	0x20000210

08007bd0 <_malloc_r>:
 8007bd0:	b570      	push	{r4, r5, r6, lr}
 8007bd2:	1ccd      	adds	r5, r1, #3
 8007bd4:	f025 0503 	bic.w	r5, r5, #3
 8007bd8:	3508      	adds	r5, #8
 8007bda:	2d0c      	cmp	r5, #12
 8007bdc:	bf38      	it	cc
 8007bde:	250c      	movcc	r5, #12
 8007be0:	2d00      	cmp	r5, #0
 8007be2:	4606      	mov	r6, r0
 8007be4:	db01      	blt.n	8007bea <_malloc_r+0x1a>
 8007be6:	42a9      	cmp	r1, r5
 8007be8:	d903      	bls.n	8007bf2 <_malloc_r+0x22>
 8007bea:	230c      	movs	r3, #12
 8007bec:	6033      	str	r3, [r6, #0]
 8007bee:	2000      	movs	r0, #0
 8007bf0:	bd70      	pop	{r4, r5, r6, pc}
 8007bf2:	f000 fd6c 	bl	80086ce <__malloc_lock>
 8007bf6:	4a21      	ldr	r2, [pc, #132]	; (8007c7c <_malloc_r+0xac>)
 8007bf8:	6814      	ldr	r4, [r2, #0]
 8007bfa:	4621      	mov	r1, r4
 8007bfc:	b991      	cbnz	r1, 8007c24 <_malloc_r+0x54>
 8007bfe:	4c20      	ldr	r4, [pc, #128]	; (8007c80 <_malloc_r+0xb0>)
 8007c00:	6823      	ldr	r3, [r4, #0]
 8007c02:	b91b      	cbnz	r3, 8007c0c <_malloc_r+0x3c>
 8007c04:	4630      	mov	r0, r6
 8007c06:	f000 facd 	bl	80081a4 <_sbrk_r>
 8007c0a:	6020      	str	r0, [r4, #0]
 8007c0c:	4629      	mov	r1, r5
 8007c0e:	4630      	mov	r0, r6
 8007c10:	f000 fac8 	bl	80081a4 <_sbrk_r>
 8007c14:	1c43      	adds	r3, r0, #1
 8007c16:	d124      	bne.n	8007c62 <_malloc_r+0x92>
 8007c18:	230c      	movs	r3, #12
 8007c1a:	4630      	mov	r0, r6
 8007c1c:	6033      	str	r3, [r6, #0]
 8007c1e:	f000 fd57 	bl	80086d0 <__malloc_unlock>
 8007c22:	e7e4      	b.n	8007bee <_malloc_r+0x1e>
 8007c24:	680b      	ldr	r3, [r1, #0]
 8007c26:	1b5b      	subs	r3, r3, r5
 8007c28:	d418      	bmi.n	8007c5c <_malloc_r+0x8c>
 8007c2a:	2b0b      	cmp	r3, #11
 8007c2c:	d90f      	bls.n	8007c4e <_malloc_r+0x7e>
 8007c2e:	600b      	str	r3, [r1, #0]
 8007c30:	18cc      	adds	r4, r1, r3
 8007c32:	50cd      	str	r5, [r1, r3]
 8007c34:	4630      	mov	r0, r6
 8007c36:	f000 fd4b 	bl	80086d0 <__malloc_unlock>
 8007c3a:	f104 000b 	add.w	r0, r4, #11
 8007c3e:	1d23      	adds	r3, r4, #4
 8007c40:	f020 0007 	bic.w	r0, r0, #7
 8007c44:	1ac3      	subs	r3, r0, r3
 8007c46:	d0d3      	beq.n	8007bf0 <_malloc_r+0x20>
 8007c48:	425a      	negs	r2, r3
 8007c4a:	50e2      	str	r2, [r4, r3]
 8007c4c:	e7d0      	b.n	8007bf0 <_malloc_r+0x20>
 8007c4e:	684b      	ldr	r3, [r1, #4]
 8007c50:	428c      	cmp	r4, r1
 8007c52:	bf16      	itet	ne
 8007c54:	6063      	strne	r3, [r4, #4]
 8007c56:	6013      	streq	r3, [r2, #0]
 8007c58:	460c      	movne	r4, r1
 8007c5a:	e7eb      	b.n	8007c34 <_malloc_r+0x64>
 8007c5c:	460c      	mov	r4, r1
 8007c5e:	6849      	ldr	r1, [r1, #4]
 8007c60:	e7cc      	b.n	8007bfc <_malloc_r+0x2c>
 8007c62:	1cc4      	adds	r4, r0, #3
 8007c64:	f024 0403 	bic.w	r4, r4, #3
 8007c68:	42a0      	cmp	r0, r4
 8007c6a:	d005      	beq.n	8007c78 <_malloc_r+0xa8>
 8007c6c:	1a21      	subs	r1, r4, r0
 8007c6e:	4630      	mov	r0, r6
 8007c70:	f000 fa98 	bl	80081a4 <_sbrk_r>
 8007c74:	3001      	adds	r0, #1
 8007c76:	d0cf      	beq.n	8007c18 <_malloc_r+0x48>
 8007c78:	6025      	str	r5, [r4, #0]
 8007c7a:	e7db      	b.n	8007c34 <_malloc_r+0x64>
 8007c7c:	20000210 	.word	0x20000210
 8007c80:	20000214 	.word	0x20000214

08007c84 <__ssputs_r>:
 8007c84:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007c88:	688e      	ldr	r6, [r1, #8]
 8007c8a:	4682      	mov	sl, r0
 8007c8c:	429e      	cmp	r6, r3
 8007c8e:	460c      	mov	r4, r1
 8007c90:	4690      	mov	r8, r2
 8007c92:	4699      	mov	r9, r3
 8007c94:	d837      	bhi.n	8007d06 <__ssputs_r+0x82>
 8007c96:	898a      	ldrh	r2, [r1, #12]
 8007c98:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8007c9c:	d031      	beq.n	8007d02 <__ssputs_r+0x7e>
 8007c9e:	2302      	movs	r3, #2
 8007ca0:	6825      	ldr	r5, [r4, #0]
 8007ca2:	6909      	ldr	r1, [r1, #16]
 8007ca4:	1a6f      	subs	r7, r5, r1
 8007ca6:	6965      	ldr	r5, [r4, #20]
 8007ca8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8007cac:	fb95 f5f3 	sdiv	r5, r5, r3
 8007cb0:	f109 0301 	add.w	r3, r9, #1
 8007cb4:	443b      	add	r3, r7
 8007cb6:	429d      	cmp	r5, r3
 8007cb8:	bf38      	it	cc
 8007cba:	461d      	movcc	r5, r3
 8007cbc:	0553      	lsls	r3, r2, #21
 8007cbe:	d530      	bpl.n	8007d22 <__ssputs_r+0x9e>
 8007cc0:	4629      	mov	r1, r5
 8007cc2:	f7ff ff85 	bl	8007bd0 <_malloc_r>
 8007cc6:	4606      	mov	r6, r0
 8007cc8:	b950      	cbnz	r0, 8007ce0 <__ssputs_r+0x5c>
 8007cca:	230c      	movs	r3, #12
 8007ccc:	f04f 30ff 	mov.w	r0, #4294967295
 8007cd0:	f8ca 3000 	str.w	r3, [sl]
 8007cd4:	89a3      	ldrh	r3, [r4, #12]
 8007cd6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007cda:	81a3      	strh	r3, [r4, #12]
 8007cdc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007ce0:	463a      	mov	r2, r7
 8007ce2:	6921      	ldr	r1, [r4, #16]
 8007ce4:	f7ff fb16 	bl	8007314 <memcpy>
 8007ce8:	89a3      	ldrh	r3, [r4, #12]
 8007cea:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8007cee:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007cf2:	81a3      	strh	r3, [r4, #12]
 8007cf4:	6126      	str	r6, [r4, #16]
 8007cf6:	443e      	add	r6, r7
 8007cf8:	6026      	str	r6, [r4, #0]
 8007cfa:	464e      	mov	r6, r9
 8007cfc:	6165      	str	r5, [r4, #20]
 8007cfe:	1bed      	subs	r5, r5, r7
 8007d00:	60a5      	str	r5, [r4, #8]
 8007d02:	454e      	cmp	r6, r9
 8007d04:	d900      	bls.n	8007d08 <__ssputs_r+0x84>
 8007d06:	464e      	mov	r6, r9
 8007d08:	4632      	mov	r2, r6
 8007d0a:	4641      	mov	r1, r8
 8007d0c:	6820      	ldr	r0, [r4, #0]
 8007d0e:	f000 fcc5 	bl	800869c <memmove>
 8007d12:	68a3      	ldr	r3, [r4, #8]
 8007d14:	2000      	movs	r0, #0
 8007d16:	1b9b      	subs	r3, r3, r6
 8007d18:	60a3      	str	r3, [r4, #8]
 8007d1a:	6823      	ldr	r3, [r4, #0]
 8007d1c:	441e      	add	r6, r3
 8007d1e:	6026      	str	r6, [r4, #0]
 8007d20:	e7dc      	b.n	8007cdc <__ssputs_r+0x58>
 8007d22:	462a      	mov	r2, r5
 8007d24:	f000 fcd5 	bl	80086d2 <_realloc_r>
 8007d28:	4606      	mov	r6, r0
 8007d2a:	2800      	cmp	r0, #0
 8007d2c:	d1e2      	bne.n	8007cf4 <__ssputs_r+0x70>
 8007d2e:	6921      	ldr	r1, [r4, #16]
 8007d30:	4650      	mov	r0, sl
 8007d32:	f7ff ff01 	bl	8007b38 <_free_r>
 8007d36:	e7c8      	b.n	8007cca <__ssputs_r+0x46>

08007d38 <_svfiprintf_r>:
 8007d38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007d3c:	461d      	mov	r5, r3
 8007d3e:	898b      	ldrh	r3, [r1, #12]
 8007d40:	b09d      	sub	sp, #116	; 0x74
 8007d42:	061f      	lsls	r7, r3, #24
 8007d44:	4680      	mov	r8, r0
 8007d46:	460c      	mov	r4, r1
 8007d48:	4616      	mov	r6, r2
 8007d4a:	d50f      	bpl.n	8007d6c <_svfiprintf_r+0x34>
 8007d4c:	690b      	ldr	r3, [r1, #16]
 8007d4e:	b96b      	cbnz	r3, 8007d6c <_svfiprintf_r+0x34>
 8007d50:	2140      	movs	r1, #64	; 0x40
 8007d52:	f7ff ff3d 	bl	8007bd0 <_malloc_r>
 8007d56:	6020      	str	r0, [r4, #0]
 8007d58:	6120      	str	r0, [r4, #16]
 8007d5a:	b928      	cbnz	r0, 8007d68 <_svfiprintf_r+0x30>
 8007d5c:	230c      	movs	r3, #12
 8007d5e:	f8c8 3000 	str.w	r3, [r8]
 8007d62:	f04f 30ff 	mov.w	r0, #4294967295
 8007d66:	e0c8      	b.n	8007efa <_svfiprintf_r+0x1c2>
 8007d68:	2340      	movs	r3, #64	; 0x40
 8007d6a:	6163      	str	r3, [r4, #20]
 8007d6c:	2300      	movs	r3, #0
 8007d6e:	9309      	str	r3, [sp, #36]	; 0x24
 8007d70:	2320      	movs	r3, #32
 8007d72:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007d76:	2330      	movs	r3, #48	; 0x30
 8007d78:	f04f 0b01 	mov.w	fp, #1
 8007d7c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007d80:	9503      	str	r5, [sp, #12]
 8007d82:	4637      	mov	r7, r6
 8007d84:	463d      	mov	r5, r7
 8007d86:	f815 3b01 	ldrb.w	r3, [r5], #1
 8007d8a:	b10b      	cbz	r3, 8007d90 <_svfiprintf_r+0x58>
 8007d8c:	2b25      	cmp	r3, #37	; 0x25
 8007d8e:	d13e      	bne.n	8007e0e <_svfiprintf_r+0xd6>
 8007d90:	ebb7 0a06 	subs.w	sl, r7, r6
 8007d94:	d00b      	beq.n	8007dae <_svfiprintf_r+0x76>
 8007d96:	4653      	mov	r3, sl
 8007d98:	4632      	mov	r2, r6
 8007d9a:	4621      	mov	r1, r4
 8007d9c:	4640      	mov	r0, r8
 8007d9e:	f7ff ff71 	bl	8007c84 <__ssputs_r>
 8007da2:	3001      	adds	r0, #1
 8007da4:	f000 80a4 	beq.w	8007ef0 <_svfiprintf_r+0x1b8>
 8007da8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007daa:	4453      	add	r3, sl
 8007dac:	9309      	str	r3, [sp, #36]	; 0x24
 8007dae:	783b      	ldrb	r3, [r7, #0]
 8007db0:	2b00      	cmp	r3, #0
 8007db2:	f000 809d 	beq.w	8007ef0 <_svfiprintf_r+0x1b8>
 8007db6:	2300      	movs	r3, #0
 8007db8:	f04f 32ff 	mov.w	r2, #4294967295
 8007dbc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007dc0:	9304      	str	r3, [sp, #16]
 8007dc2:	9307      	str	r3, [sp, #28]
 8007dc4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007dc8:	931a      	str	r3, [sp, #104]	; 0x68
 8007dca:	462f      	mov	r7, r5
 8007dcc:	2205      	movs	r2, #5
 8007dce:	f817 1b01 	ldrb.w	r1, [r7], #1
 8007dd2:	4850      	ldr	r0, [pc, #320]	; (8007f14 <_svfiprintf_r+0x1dc>)
 8007dd4:	f7ff fa90 	bl	80072f8 <memchr>
 8007dd8:	9b04      	ldr	r3, [sp, #16]
 8007dda:	b9d0      	cbnz	r0, 8007e12 <_svfiprintf_r+0xda>
 8007ddc:	06d9      	lsls	r1, r3, #27
 8007dde:	bf44      	itt	mi
 8007de0:	2220      	movmi	r2, #32
 8007de2:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8007de6:	071a      	lsls	r2, r3, #28
 8007de8:	bf44      	itt	mi
 8007dea:	222b      	movmi	r2, #43	; 0x2b
 8007dec:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8007df0:	782a      	ldrb	r2, [r5, #0]
 8007df2:	2a2a      	cmp	r2, #42	; 0x2a
 8007df4:	d015      	beq.n	8007e22 <_svfiprintf_r+0xea>
 8007df6:	462f      	mov	r7, r5
 8007df8:	2000      	movs	r0, #0
 8007dfa:	250a      	movs	r5, #10
 8007dfc:	9a07      	ldr	r2, [sp, #28]
 8007dfe:	4639      	mov	r1, r7
 8007e00:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007e04:	3b30      	subs	r3, #48	; 0x30
 8007e06:	2b09      	cmp	r3, #9
 8007e08:	d94d      	bls.n	8007ea6 <_svfiprintf_r+0x16e>
 8007e0a:	b1b8      	cbz	r0, 8007e3c <_svfiprintf_r+0x104>
 8007e0c:	e00f      	b.n	8007e2e <_svfiprintf_r+0xf6>
 8007e0e:	462f      	mov	r7, r5
 8007e10:	e7b8      	b.n	8007d84 <_svfiprintf_r+0x4c>
 8007e12:	4a40      	ldr	r2, [pc, #256]	; (8007f14 <_svfiprintf_r+0x1dc>)
 8007e14:	463d      	mov	r5, r7
 8007e16:	1a80      	subs	r0, r0, r2
 8007e18:	fa0b f000 	lsl.w	r0, fp, r0
 8007e1c:	4318      	orrs	r0, r3
 8007e1e:	9004      	str	r0, [sp, #16]
 8007e20:	e7d3      	b.n	8007dca <_svfiprintf_r+0x92>
 8007e22:	9a03      	ldr	r2, [sp, #12]
 8007e24:	1d11      	adds	r1, r2, #4
 8007e26:	6812      	ldr	r2, [r2, #0]
 8007e28:	9103      	str	r1, [sp, #12]
 8007e2a:	2a00      	cmp	r2, #0
 8007e2c:	db01      	blt.n	8007e32 <_svfiprintf_r+0xfa>
 8007e2e:	9207      	str	r2, [sp, #28]
 8007e30:	e004      	b.n	8007e3c <_svfiprintf_r+0x104>
 8007e32:	4252      	negs	r2, r2
 8007e34:	f043 0302 	orr.w	r3, r3, #2
 8007e38:	9207      	str	r2, [sp, #28]
 8007e3a:	9304      	str	r3, [sp, #16]
 8007e3c:	783b      	ldrb	r3, [r7, #0]
 8007e3e:	2b2e      	cmp	r3, #46	; 0x2e
 8007e40:	d10c      	bne.n	8007e5c <_svfiprintf_r+0x124>
 8007e42:	787b      	ldrb	r3, [r7, #1]
 8007e44:	2b2a      	cmp	r3, #42	; 0x2a
 8007e46:	d133      	bne.n	8007eb0 <_svfiprintf_r+0x178>
 8007e48:	9b03      	ldr	r3, [sp, #12]
 8007e4a:	3702      	adds	r7, #2
 8007e4c:	1d1a      	adds	r2, r3, #4
 8007e4e:	681b      	ldr	r3, [r3, #0]
 8007e50:	9203      	str	r2, [sp, #12]
 8007e52:	2b00      	cmp	r3, #0
 8007e54:	bfb8      	it	lt
 8007e56:	f04f 33ff 	movlt.w	r3, #4294967295
 8007e5a:	9305      	str	r3, [sp, #20]
 8007e5c:	4d2e      	ldr	r5, [pc, #184]	; (8007f18 <_svfiprintf_r+0x1e0>)
 8007e5e:	2203      	movs	r2, #3
 8007e60:	7839      	ldrb	r1, [r7, #0]
 8007e62:	4628      	mov	r0, r5
 8007e64:	f7ff fa48 	bl	80072f8 <memchr>
 8007e68:	b138      	cbz	r0, 8007e7a <_svfiprintf_r+0x142>
 8007e6a:	2340      	movs	r3, #64	; 0x40
 8007e6c:	1b40      	subs	r0, r0, r5
 8007e6e:	fa03 f000 	lsl.w	r0, r3, r0
 8007e72:	9b04      	ldr	r3, [sp, #16]
 8007e74:	3701      	adds	r7, #1
 8007e76:	4303      	orrs	r3, r0
 8007e78:	9304      	str	r3, [sp, #16]
 8007e7a:	7839      	ldrb	r1, [r7, #0]
 8007e7c:	2206      	movs	r2, #6
 8007e7e:	4827      	ldr	r0, [pc, #156]	; (8007f1c <_svfiprintf_r+0x1e4>)
 8007e80:	1c7e      	adds	r6, r7, #1
 8007e82:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007e86:	f7ff fa37 	bl	80072f8 <memchr>
 8007e8a:	2800      	cmp	r0, #0
 8007e8c:	d038      	beq.n	8007f00 <_svfiprintf_r+0x1c8>
 8007e8e:	4b24      	ldr	r3, [pc, #144]	; (8007f20 <_svfiprintf_r+0x1e8>)
 8007e90:	bb13      	cbnz	r3, 8007ed8 <_svfiprintf_r+0x1a0>
 8007e92:	9b03      	ldr	r3, [sp, #12]
 8007e94:	3307      	adds	r3, #7
 8007e96:	f023 0307 	bic.w	r3, r3, #7
 8007e9a:	3308      	adds	r3, #8
 8007e9c:	9303      	str	r3, [sp, #12]
 8007e9e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007ea0:	444b      	add	r3, r9
 8007ea2:	9309      	str	r3, [sp, #36]	; 0x24
 8007ea4:	e76d      	b.n	8007d82 <_svfiprintf_r+0x4a>
 8007ea6:	fb05 3202 	mla	r2, r5, r2, r3
 8007eaa:	2001      	movs	r0, #1
 8007eac:	460f      	mov	r7, r1
 8007eae:	e7a6      	b.n	8007dfe <_svfiprintf_r+0xc6>
 8007eb0:	2300      	movs	r3, #0
 8007eb2:	250a      	movs	r5, #10
 8007eb4:	4619      	mov	r1, r3
 8007eb6:	3701      	adds	r7, #1
 8007eb8:	9305      	str	r3, [sp, #20]
 8007eba:	4638      	mov	r0, r7
 8007ebc:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007ec0:	3a30      	subs	r2, #48	; 0x30
 8007ec2:	2a09      	cmp	r2, #9
 8007ec4:	d903      	bls.n	8007ece <_svfiprintf_r+0x196>
 8007ec6:	2b00      	cmp	r3, #0
 8007ec8:	d0c8      	beq.n	8007e5c <_svfiprintf_r+0x124>
 8007eca:	9105      	str	r1, [sp, #20]
 8007ecc:	e7c6      	b.n	8007e5c <_svfiprintf_r+0x124>
 8007ece:	fb05 2101 	mla	r1, r5, r1, r2
 8007ed2:	2301      	movs	r3, #1
 8007ed4:	4607      	mov	r7, r0
 8007ed6:	e7f0      	b.n	8007eba <_svfiprintf_r+0x182>
 8007ed8:	ab03      	add	r3, sp, #12
 8007eda:	9300      	str	r3, [sp, #0]
 8007edc:	4622      	mov	r2, r4
 8007ede:	4b11      	ldr	r3, [pc, #68]	; (8007f24 <_svfiprintf_r+0x1ec>)
 8007ee0:	a904      	add	r1, sp, #16
 8007ee2:	4640      	mov	r0, r8
 8007ee4:	f7fc fb0a 	bl	80044fc <_printf_float>
 8007ee8:	f1b0 3fff 	cmp.w	r0, #4294967295
 8007eec:	4681      	mov	r9, r0
 8007eee:	d1d6      	bne.n	8007e9e <_svfiprintf_r+0x166>
 8007ef0:	89a3      	ldrh	r3, [r4, #12]
 8007ef2:	065b      	lsls	r3, r3, #25
 8007ef4:	f53f af35 	bmi.w	8007d62 <_svfiprintf_r+0x2a>
 8007ef8:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007efa:	b01d      	add	sp, #116	; 0x74
 8007efc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007f00:	ab03      	add	r3, sp, #12
 8007f02:	9300      	str	r3, [sp, #0]
 8007f04:	4622      	mov	r2, r4
 8007f06:	4b07      	ldr	r3, [pc, #28]	; (8007f24 <_svfiprintf_r+0x1ec>)
 8007f08:	a904      	add	r1, sp, #16
 8007f0a:	4640      	mov	r0, r8
 8007f0c:	f7fc fda2 	bl	8004a54 <_printf_i>
 8007f10:	e7ea      	b.n	8007ee8 <_svfiprintf_r+0x1b0>
 8007f12:	bf00      	nop
 8007f14:	08008a14 	.word	0x08008a14
 8007f18:	08008a1a 	.word	0x08008a1a
 8007f1c:	08008a1e 	.word	0x08008a1e
 8007f20:	080044fd 	.word	0x080044fd
 8007f24:	08007c85 	.word	0x08007c85

08007f28 <__sfputc_r>:
 8007f28:	6893      	ldr	r3, [r2, #8]
 8007f2a:	b410      	push	{r4}
 8007f2c:	3b01      	subs	r3, #1
 8007f2e:	2b00      	cmp	r3, #0
 8007f30:	6093      	str	r3, [r2, #8]
 8007f32:	da07      	bge.n	8007f44 <__sfputc_r+0x1c>
 8007f34:	6994      	ldr	r4, [r2, #24]
 8007f36:	42a3      	cmp	r3, r4
 8007f38:	db01      	blt.n	8007f3e <__sfputc_r+0x16>
 8007f3a:	290a      	cmp	r1, #10
 8007f3c:	d102      	bne.n	8007f44 <__sfputc_r+0x1c>
 8007f3e:	bc10      	pop	{r4}
 8007f40:	f000 b996 	b.w	8008270 <__swbuf_r>
 8007f44:	6813      	ldr	r3, [r2, #0]
 8007f46:	1c58      	adds	r0, r3, #1
 8007f48:	6010      	str	r0, [r2, #0]
 8007f4a:	7019      	strb	r1, [r3, #0]
 8007f4c:	4608      	mov	r0, r1
 8007f4e:	bc10      	pop	{r4}
 8007f50:	4770      	bx	lr

08007f52 <__sfputs_r>:
 8007f52:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007f54:	4606      	mov	r6, r0
 8007f56:	460f      	mov	r7, r1
 8007f58:	4614      	mov	r4, r2
 8007f5a:	18d5      	adds	r5, r2, r3
 8007f5c:	42ac      	cmp	r4, r5
 8007f5e:	d101      	bne.n	8007f64 <__sfputs_r+0x12>
 8007f60:	2000      	movs	r0, #0
 8007f62:	e007      	b.n	8007f74 <__sfputs_r+0x22>
 8007f64:	463a      	mov	r2, r7
 8007f66:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007f6a:	4630      	mov	r0, r6
 8007f6c:	f7ff ffdc 	bl	8007f28 <__sfputc_r>
 8007f70:	1c43      	adds	r3, r0, #1
 8007f72:	d1f3      	bne.n	8007f5c <__sfputs_r+0xa>
 8007f74:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08007f78 <_vfiprintf_r>:
 8007f78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007f7c:	460c      	mov	r4, r1
 8007f7e:	b09d      	sub	sp, #116	; 0x74
 8007f80:	4617      	mov	r7, r2
 8007f82:	461d      	mov	r5, r3
 8007f84:	4606      	mov	r6, r0
 8007f86:	b118      	cbz	r0, 8007f90 <_vfiprintf_r+0x18>
 8007f88:	6983      	ldr	r3, [r0, #24]
 8007f8a:	b90b      	cbnz	r3, 8007f90 <_vfiprintf_r+0x18>
 8007f8c:	f7fe fdd4 	bl	8006b38 <__sinit>
 8007f90:	4b7c      	ldr	r3, [pc, #496]	; (8008184 <_vfiprintf_r+0x20c>)
 8007f92:	429c      	cmp	r4, r3
 8007f94:	d158      	bne.n	8008048 <_vfiprintf_r+0xd0>
 8007f96:	6874      	ldr	r4, [r6, #4]
 8007f98:	89a3      	ldrh	r3, [r4, #12]
 8007f9a:	0718      	lsls	r0, r3, #28
 8007f9c:	d55e      	bpl.n	800805c <_vfiprintf_r+0xe4>
 8007f9e:	6923      	ldr	r3, [r4, #16]
 8007fa0:	2b00      	cmp	r3, #0
 8007fa2:	d05b      	beq.n	800805c <_vfiprintf_r+0xe4>
 8007fa4:	2300      	movs	r3, #0
 8007fa6:	9309      	str	r3, [sp, #36]	; 0x24
 8007fa8:	2320      	movs	r3, #32
 8007faa:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007fae:	2330      	movs	r3, #48	; 0x30
 8007fb0:	f04f 0b01 	mov.w	fp, #1
 8007fb4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007fb8:	9503      	str	r5, [sp, #12]
 8007fba:	46b8      	mov	r8, r7
 8007fbc:	4645      	mov	r5, r8
 8007fbe:	f815 3b01 	ldrb.w	r3, [r5], #1
 8007fc2:	b10b      	cbz	r3, 8007fc8 <_vfiprintf_r+0x50>
 8007fc4:	2b25      	cmp	r3, #37	; 0x25
 8007fc6:	d154      	bne.n	8008072 <_vfiprintf_r+0xfa>
 8007fc8:	ebb8 0a07 	subs.w	sl, r8, r7
 8007fcc:	d00b      	beq.n	8007fe6 <_vfiprintf_r+0x6e>
 8007fce:	4653      	mov	r3, sl
 8007fd0:	463a      	mov	r2, r7
 8007fd2:	4621      	mov	r1, r4
 8007fd4:	4630      	mov	r0, r6
 8007fd6:	f7ff ffbc 	bl	8007f52 <__sfputs_r>
 8007fda:	3001      	adds	r0, #1
 8007fdc:	f000 80c2 	beq.w	8008164 <_vfiprintf_r+0x1ec>
 8007fe0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007fe2:	4453      	add	r3, sl
 8007fe4:	9309      	str	r3, [sp, #36]	; 0x24
 8007fe6:	f898 3000 	ldrb.w	r3, [r8]
 8007fea:	2b00      	cmp	r3, #0
 8007fec:	f000 80ba 	beq.w	8008164 <_vfiprintf_r+0x1ec>
 8007ff0:	2300      	movs	r3, #0
 8007ff2:	f04f 32ff 	mov.w	r2, #4294967295
 8007ff6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007ffa:	9304      	str	r3, [sp, #16]
 8007ffc:	9307      	str	r3, [sp, #28]
 8007ffe:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008002:	931a      	str	r3, [sp, #104]	; 0x68
 8008004:	46a8      	mov	r8, r5
 8008006:	2205      	movs	r2, #5
 8008008:	f818 1b01 	ldrb.w	r1, [r8], #1
 800800c:	485e      	ldr	r0, [pc, #376]	; (8008188 <_vfiprintf_r+0x210>)
 800800e:	f7ff f973 	bl	80072f8 <memchr>
 8008012:	9b04      	ldr	r3, [sp, #16]
 8008014:	bb78      	cbnz	r0, 8008076 <_vfiprintf_r+0xfe>
 8008016:	06d9      	lsls	r1, r3, #27
 8008018:	bf44      	itt	mi
 800801a:	2220      	movmi	r2, #32
 800801c:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8008020:	071a      	lsls	r2, r3, #28
 8008022:	bf44      	itt	mi
 8008024:	222b      	movmi	r2, #43	; 0x2b
 8008026:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800802a:	782a      	ldrb	r2, [r5, #0]
 800802c:	2a2a      	cmp	r2, #42	; 0x2a
 800802e:	d02a      	beq.n	8008086 <_vfiprintf_r+0x10e>
 8008030:	46a8      	mov	r8, r5
 8008032:	2000      	movs	r0, #0
 8008034:	250a      	movs	r5, #10
 8008036:	9a07      	ldr	r2, [sp, #28]
 8008038:	4641      	mov	r1, r8
 800803a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800803e:	3b30      	subs	r3, #48	; 0x30
 8008040:	2b09      	cmp	r3, #9
 8008042:	d969      	bls.n	8008118 <_vfiprintf_r+0x1a0>
 8008044:	b360      	cbz	r0, 80080a0 <_vfiprintf_r+0x128>
 8008046:	e024      	b.n	8008092 <_vfiprintf_r+0x11a>
 8008048:	4b50      	ldr	r3, [pc, #320]	; (800818c <_vfiprintf_r+0x214>)
 800804a:	429c      	cmp	r4, r3
 800804c:	d101      	bne.n	8008052 <_vfiprintf_r+0xda>
 800804e:	68b4      	ldr	r4, [r6, #8]
 8008050:	e7a2      	b.n	8007f98 <_vfiprintf_r+0x20>
 8008052:	4b4f      	ldr	r3, [pc, #316]	; (8008190 <_vfiprintf_r+0x218>)
 8008054:	429c      	cmp	r4, r3
 8008056:	bf08      	it	eq
 8008058:	68f4      	ldreq	r4, [r6, #12]
 800805a:	e79d      	b.n	8007f98 <_vfiprintf_r+0x20>
 800805c:	4621      	mov	r1, r4
 800805e:	4630      	mov	r0, r6
 8008060:	f000 f978 	bl	8008354 <__swsetup_r>
 8008064:	2800      	cmp	r0, #0
 8008066:	d09d      	beq.n	8007fa4 <_vfiprintf_r+0x2c>
 8008068:	f04f 30ff 	mov.w	r0, #4294967295
 800806c:	b01d      	add	sp, #116	; 0x74
 800806e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008072:	46a8      	mov	r8, r5
 8008074:	e7a2      	b.n	8007fbc <_vfiprintf_r+0x44>
 8008076:	4a44      	ldr	r2, [pc, #272]	; (8008188 <_vfiprintf_r+0x210>)
 8008078:	4645      	mov	r5, r8
 800807a:	1a80      	subs	r0, r0, r2
 800807c:	fa0b f000 	lsl.w	r0, fp, r0
 8008080:	4318      	orrs	r0, r3
 8008082:	9004      	str	r0, [sp, #16]
 8008084:	e7be      	b.n	8008004 <_vfiprintf_r+0x8c>
 8008086:	9a03      	ldr	r2, [sp, #12]
 8008088:	1d11      	adds	r1, r2, #4
 800808a:	6812      	ldr	r2, [r2, #0]
 800808c:	9103      	str	r1, [sp, #12]
 800808e:	2a00      	cmp	r2, #0
 8008090:	db01      	blt.n	8008096 <_vfiprintf_r+0x11e>
 8008092:	9207      	str	r2, [sp, #28]
 8008094:	e004      	b.n	80080a0 <_vfiprintf_r+0x128>
 8008096:	4252      	negs	r2, r2
 8008098:	f043 0302 	orr.w	r3, r3, #2
 800809c:	9207      	str	r2, [sp, #28]
 800809e:	9304      	str	r3, [sp, #16]
 80080a0:	f898 3000 	ldrb.w	r3, [r8]
 80080a4:	2b2e      	cmp	r3, #46	; 0x2e
 80080a6:	d10e      	bne.n	80080c6 <_vfiprintf_r+0x14e>
 80080a8:	f898 3001 	ldrb.w	r3, [r8, #1]
 80080ac:	2b2a      	cmp	r3, #42	; 0x2a
 80080ae:	d138      	bne.n	8008122 <_vfiprintf_r+0x1aa>
 80080b0:	9b03      	ldr	r3, [sp, #12]
 80080b2:	f108 0802 	add.w	r8, r8, #2
 80080b6:	1d1a      	adds	r2, r3, #4
 80080b8:	681b      	ldr	r3, [r3, #0]
 80080ba:	9203      	str	r2, [sp, #12]
 80080bc:	2b00      	cmp	r3, #0
 80080be:	bfb8      	it	lt
 80080c0:	f04f 33ff 	movlt.w	r3, #4294967295
 80080c4:	9305      	str	r3, [sp, #20]
 80080c6:	4d33      	ldr	r5, [pc, #204]	; (8008194 <_vfiprintf_r+0x21c>)
 80080c8:	2203      	movs	r2, #3
 80080ca:	f898 1000 	ldrb.w	r1, [r8]
 80080ce:	4628      	mov	r0, r5
 80080d0:	f7ff f912 	bl	80072f8 <memchr>
 80080d4:	b140      	cbz	r0, 80080e8 <_vfiprintf_r+0x170>
 80080d6:	2340      	movs	r3, #64	; 0x40
 80080d8:	1b40      	subs	r0, r0, r5
 80080da:	fa03 f000 	lsl.w	r0, r3, r0
 80080de:	9b04      	ldr	r3, [sp, #16]
 80080e0:	f108 0801 	add.w	r8, r8, #1
 80080e4:	4303      	orrs	r3, r0
 80080e6:	9304      	str	r3, [sp, #16]
 80080e8:	f898 1000 	ldrb.w	r1, [r8]
 80080ec:	2206      	movs	r2, #6
 80080ee:	482a      	ldr	r0, [pc, #168]	; (8008198 <_vfiprintf_r+0x220>)
 80080f0:	f108 0701 	add.w	r7, r8, #1
 80080f4:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80080f8:	f7ff f8fe 	bl	80072f8 <memchr>
 80080fc:	2800      	cmp	r0, #0
 80080fe:	d037      	beq.n	8008170 <_vfiprintf_r+0x1f8>
 8008100:	4b26      	ldr	r3, [pc, #152]	; (800819c <_vfiprintf_r+0x224>)
 8008102:	bb1b      	cbnz	r3, 800814c <_vfiprintf_r+0x1d4>
 8008104:	9b03      	ldr	r3, [sp, #12]
 8008106:	3307      	adds	r3, #7
 8008108:	f023 0307 	bic.w	r3, r3, #7
 800810c:	3308      	adds	r3, #8
 800810e:	9303      	str	r3, [sp, #12]
 8008110:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008112:	444b      	add	r3, r9
 8008114:	9309      	str	r3, [sp, #36]	; 0x24
 8008116:	e750      	b.n	8007fba <_vfiprintf_r+0x42>
 8008118:	fb05 3202 	mla	r2, r5, r2, r3
 800811c:	2001      	movs	r0, #1
 800811e:	4688      	mov	r8, r1
 8008120:	e78a      	b.n	8008038 <_vfiprintf_r+0xc0>
 8008122:	2300      	movs	r3, #0
 8008124:	250a      	movs	r5, #10
 8008126:	4619      	mov	r1, r3
 8008128:	f108 0801 	add.w	r8, r8, #1
 800812c:	9305      	str	r3, [sp, #20]
 800812e:	4640      	mov	r0, r8
 8008130:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008134:	3a30      	subs	r2, #48	; 0x30
 8008136:	2a09      	cmp	r2, #9
 8008138:	d903      	bls.n	8008142 <_vfiprintf_r+0x1ca>
 800813a:	2b00      	cmp	r3, #0
 800813c:	d0c3      	beq.n	80080c6 <_vfiprintf_r+0x14e>
 800813e:	9105      	str	r1, [sp, #20]
 8008140:	e7c1      	b.n	80080c6 <_vfiprintf_r+0x14e>
 8008142:	fb05 2101 	mla	r1, r5, r1, r2
 8008146:	2301      	movs	r3, #1
 8008148:	4680      	mov	r8, r0
 800814a:	e7f0      	b.n	800812e <_vfiprintf_r+0x1b6>
 800814c:	ab03      	add	r3, sp, #12
 800814e:	9300      	str	r3, [sp, #0]
 8008150:	4622      	mov	r2, r4
 8008152:	4b13      	ldr	r3, [pc, #76]	; (80081a0 <_vfiprintf_r+0x228>)
 8008154:	a904      	add	r1, sp, #16
 8008156:	4630      	mov	r0, r6
 8008158:	f7fc f9d0 	bl	80044fc <_printf_float>
 800815c:	f1b0 3fff 	cmp.w	r0, #4294967295
 8008160:	4681      	mov	r9, r0
 8008162:	d1d5      	bne.n	8008110 <_vfiprintf_r+0x198>
 8008164:	89a3      	ldrh	r3, [r4, #12]
 8008166:	065b      	lsls	r3, r3, #25
 8008168:	f53f af7e 	bmi.w	8008068 <_vfiprintf_r+0xf0>
 800816c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800816e:	e77d      	b.n	800806c <_vfiprintf_r+0xf4>
 8008170:	ab03      	add	r3, sp, #12
 8008172:	9300      	str	r3, [sp, #0]
 8008174:	4622      	mov	r2, r4
 8008176:	4b0a      	ldr	r3, [pc, #40]	; (80081a0 <_vfiprintf_r+0x228>)
 8008178:	a904      	add	r1, sp, #16
 800817a:	4630      	mov	r0, r6
 800817c:	f7fc fc6a 	bl	8004a54 <_printf_i>
 8008180:	e7ec      	b.n	800815c <_vfiprintf_r+0x1e4>
 8008182:	bf00      	nop
 8008184:	080088c8 	.word	0x080088c8
 8008188:	08008a14 	.word	0x08008a14
 800818c:	080088e8 	.word	0x080088e8
 8008190:	080088a8 	.word	0x080088a8
 8008194:	08008a1a 	.word	0x08008a1a
 8008198:	08008a1e 	.word	0x08008a1e
 800819c:	080044fd 	.word	0x080044fd
 80081a0:	08007f53 	.word	0x08007f53

080081a4 <_sbrk_r>:
 80081a4:	b538      	push	{r3, r4, r5, lr}
 80081a6:	2300      	movs	r3, #0
 80081a8:	4c05      	ldr	r4, [pc, #20]	; (80081c0 <_sbrk_r+0x1c>)
 80081aa:	4605      	mov	r5, r0
 80081ac:	4608      	mov	r0, r1
 80081ae:	6023      	str	r3, [r4, #0]
 80081b0:	f7f9 fcc4 	bl	8001b3c <_sbrk>
 80081b4:	1c43      	adds	r3, r0, #1
 80081b6:	d102      	bne.n	80081be <_sbrk_r+0x1a>
 80081b8:	6823      	ldr	r3, [r4, #0]
 80081ba:	b103      	cbz	r3, 80081be <_sbrk_r+0x1a>
 80081bc:	602b      	str	r3, [r5, #0]
 80081be:	bd38      	pop	{r3, r4, r5, pc}
 80081c0:	200002cc 	.word	0x200002cc

080081c4 <__sread>:
 80081c4:	b510      	push	{r4, lr}
 80081c6:	460c      	mov	r4, r1
 80081c8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80081cc:	f000 faa8 	bl	8008720 <_read_r>
 80081d0:	2800      	cmp	r0, #0
 80081d2:	bfab      	itete	ge
 80081d4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80081d6:	89a3      	ldrhlt	r3, [r4, #12]
 80081d8:	181b      	addge	r3, r3, r0
 80081da:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80081de:	bfac      	ite	ge
 80081e0:	6563      	strge	r3, [r4, #84]	; 0x54
 80081e2:	81a3      	strhlt	r3, [r4, #12]
 80081e4:	bd10      	pop	{r4, pc}

080081e6 <__swrite>:
 80081e6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80081ea:	461f      	mov	r7, r3
 80081ec:	898b      	ldrh	r3, [r1, #12]
 80081ee:	4605      	mov	r5, r0
 80081f0:	05db      	lsls	r3, r3, #23
 80081f2:	460c      	mov	r4, r1
 80081f4:	4616      	mov	r6, r2
 80081f6:	d505      	bpl.n	8008204 <__swrite+0x1e>
 80081f8:	2302      	movs	r3, #2
 80081fa:	2200      	movs	r2, #0
 80081fc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008200:	f000 f9d6 	bl	80085b0 <_lseek_r>
 8008204:	89a3      	ldrh	r3, [r4, #12]
 8008206:	4632      	mov	r2, r6
 8008208:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800820c:	81a3      	strh	r3, [r4, #12]
 800820e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008212:	463b      	mov	r3, r7
 8008214:	4628      	mov	r0, r5
 8008216:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800821a:	f000 b889 	b.w	8008330 <_write_r>

0800821e <__sseek>:
 800821e:	b510      	push	{r4, lr}
 8008220:	460c      	mov	r4, r1
 8008222:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008226:	f000 f9c3 	bl	80085b0 <_lseek_r>
 800822a:	1c43      	adds	r3, r0, #1
 800822c:	89a3      	ldrh	r3, [r4, #12]
 800822e:	bf15      	itete	ne
 8008230:	6560      	strne	r0, [r4, #84]	; 0x54
 8008232:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8008236:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800823a:	81a3      	strheq	r3, [r4, #12]
 800823c:	bf18      	it	ne
 800823e:	81a3      	strhne	r3, [r4, #12]
 8008240:	bd10      	pop	{r4, pc}

08008242 <__sclose>:
 8008242:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008246:	f000 b8f3 	b.w	8008430 <_close_r>

0800824a <strncmp>:
 800824a:	b510      	push	{r4, lr}
 800824c:	b16a      	cbz	r2, 800826a <strncmp+0x20>
 800824e:	3901      	subs	r1, #1
 8008250:	1884      	adds	r4, r0, r2
 8008252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8008256:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800825a:	4293      	cmp	r3, r2
 800825c:	d103      	bne.n	8008266 <strncmp+0x1c>
 800825e:	42a0      	cmp	r0, r4
 8008260:	d001      	beq.n	8008266 <strncmp+0x1c>
 8008262:	2b00      	cmp	r3, #0
 8008264:	d1f5      	bne.n	8008252 <strncmp+0x8>
 8008266:	1a98      	subs	r0, r3, r2
 8008268:	bd10      	pop	{r4, pc}
 800826a:	4610      	mov	r0, r2
 800826c:	e7fc      	b.n	8008268 <strncmp+0x1e>
	...

08008270 <__swbuf_r>:
 8008270:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008272:	460e      	mov	r6, r1
 8008274:	4614      	mov	r4, r2
 8008276:	4605      	mov	r5, r0
 8008278:	b118      	cbz	r0, 8008282 <__swbuf_r+0x12>
 800827a:	6983      	ldr	r3, [r0, #24]
 800827c:	b90b      	cbnz	r3, 8008282 <__swbuf_r+0x12>
 800827e:	f7fe fc5b 	bl	8006b38 <__sinit>
 8008282:	4b21      	ldr	r3, [pc, #132]	; (8008308 <__swbuf_r+0x98>)
 8008284:	429c      	cmp	r4, r3
 8008286:	d12a      	bne.n	80082de <__swbuf_r+0x6e>
 8008288:	686c      	ldr	r4, [r5, #4]
 800828a:	69a3      	ldr	r3, [r4, #24]
 800828c:	60a3      	str	r3, [r4, #8]
 800828e:	89a3      	ldrh	r3, [r4, #12]
 8008290:	071a      	lsls	r2, r3, #28
 8008292:	d52e      	bpl.n	80082f2 <__swbuf_r+0x82>
 8008294:	6923      	ldr	r3, [r4, #16]
 8008296:	b363      	cbz	r3, 80082f2 <__swbuf_r+0x82>
 8008298:	6923      	ldr	r3, [r4, #16]
 800829a:	6820      	ldr	r0, [r4, #0]
 800829c:	b2f6      	uxtb	r6, r6
 800829e:	1ac0      	subs	r0, r0, r3
 80082a0:	6963      	ldr	r3, [r4, #20]
 80082a2:	4637      	mov	r7, r6
 80082a4:	4283      	cmp	r3, r0
 80082a6:	dc04      	bgt.n	80082b2 <__swbuf_r+0x42>
 80082a8:	4621      	mov	r1, r4
 80082aa:	4628      	mov	r0, r5
 80082ac:	f000 f956 	bl	800855c <_fflush_r>
 80082b0:	bb28      	cbnz	r0, 80082fe <__swbuf_r+0x8e>
 80082b2:	68a3      	ldr	r3, [r4, #8]
 80082b4:	3001      	adds	r0, #1
 80082b6:	3b01      	subs	r3, #1
 80082b8:	60a3      	str	r3, [r4, #8]
 80082ba:	6823      	ldr	r3, [r4, #0]
 80082bc:	1c5a      	adds	r2, r3, #1
 80082be:	6022      	str	r2, [r4, #0]
 80082c0:	701e      	strb	r6, [r3, #0]
 80082c2:	6963      	ldr	r3, [r4, #20]
 80082c4:	4283      	cmp	r3, r0
 80082c6:	d004      	beq.n	80082d2 <__swbuf_r+0x62>
 80082c8:	89a3      	ldrh	r3, [r4, #12]
 80082ca:	07db      	lsls	r3, r3, #31
 80082cc:	d519      	bpl.n	8008302 <__swbuf_r+0x92>
 80082ce:	2e0a      	cmp	r6, #10
 80082d0:	d117      	bne.n	8008302 <__swbuf_r+0x92>
 80082d2:	4621      	mov	r1, r4
 80082d4:	4628      	mov	r0, r5
 80082d6:	f000 f941 	bl	800855c <_fflush_r>
 80082da:	b190      	cbz	r0, 8008302 <__swbuf_r+0x92>
 80082dc:	e00f      	b.n	80082fe <__swbuf_r+0x8e>
 80082de:	4b0b      	ldr	r3, [pc, #44]	; (800830c <__swbuf_r+0x9c>)
 80082e0:	429c      	cmp	r4, r3
 80082e2:	d101      	bne.n	80082e8 <__swbuf_r+0x78>
 80082e4:	68ac      	ldr	r4, [r5, #8]
 80082e6:	e7d0      	b.n	800828a <__swbuf_r+0x1a>
 80082e8:	4b09      	ldr	r3, [pc, #36]	; (8008310 <__swbuf_r+0xa0>)
 80082ea:	429c      	cmp	r4, r3
 80082ec:	bf08      	it	eq
 80082ee:	68ec      	ldreq	r4, [r5, #12]
 80082f0:	e7cb      	b.n	800828a <__swbuf_r+0x1a>
 80082f2:	4621      	mov	r1, r4
 80082f4:	4628      	mov	r0, r5
 80082f6:	f000 f82d 	bl	8008354 <__swsetup_r>
 80082fa:	2800      	cmp	r0, #0
 80082fc:	d0cc      	beq.n	8008298 <__swbuf_r+0x28>
 80082fe:	f04f 37ff 	mov.w	r7, #4294967295
 8008302:	4638      	mov	r0, r7
 8008304:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008306:	bf00      	nop
 8008308:	080088c8 	.word	0x080088c8
 800830c:	080088e8 	.word	0x080088e8
 8008310:	080088a8 	.word	0x080088a8

08008314 <__ascii_wctomb>:
 8008314:	b149      	cbz	r1, 800832a <__ascii_wctomb+0x16>
 8008316:	2aff      	cmp	r2, #255	; 0xff
 8008318:	bf8b      	itete	hi
 800831a:	238a      	movhi	r3, #138	; 0x8a
 800831c:	700a      	strbls	r2, [r1, #0]
 800831e:	6003      	strhi	r3, [r0, #0]
 8008320:	2001      	movls	r0, #1
 8008322:	bf88      	it	hi
 8008324:	f04f 30ff 	movhi.w	r0, #4294967295
 8008328:	4770      	bx	lr
 800832a:	4608      	mov	r0, r1
 800832c:	4770      	bx	lr
	...

08008330 <_write_r>:
 8008330:	b538      	push	{r3, r4, r5, lr}
 8008332:	4605      	mov	r5, r0
 8008334:	4608      	mov	r0, r1
 8008336:	4611      	mov	r1, r2
 8008338:	2200      	movs	r2, #0
 800833a:	4c05      	ldr	r4, [pc, #20]	; (8008350 <_write_r+0x20>)
 800833c:	6022      	str	r2, [r4, #0]
 800833e:	461a      	mov	r2, r3
 8008340:	f7f9 fbaf 	bl	8001aa2 <_write>
 8008344:	1c43      	adds	r3, r0, #1
 8008346:	d102      	bne.n	800834e <_write_r+0x1e>
 8008348:	6823      	ldr	r3, [r4, #0]
 800834a:	b103      	cbz	r3, 800834e <_write_r+0x1e>
 800834c:	602b      	str	r3, [r5, #0]
 800834e:	bd38      	pop	{r3, r4, r5, pc}
 8008350:	200002cc 	.word	0x200002cc

08008354 <__swsetup_r>:
 8008354:	4b32      	ldr	r3, [pc, #200]	; (8008420 <__swsetup_r+0xcc>)
 8008356:	b570      	push	{r4, r5, r6, lr}
 8008358:	681d      	ldr	r5, [r3, #0]
 800835a:	4606      	mov	r6, r0
 800835c:	460c      	mov	r4, r1
 800835e:	b125      	cbz	r5, 800836a <__swsetup_r+0x16>
 8008360:	69ab      	ldr	r3, [r5, #24]
 8008362:	b913      	cbnz	r3, 800836a <__swsetup_r+0x16>
 8008364:	4628      	mov	r0, r5
 8008366:	f7fe fbe7 	bl	8006b38 <__sinit>
 800836a:	4b2e      	ldr	r3, [pc, #184]	; (8008424 <__swsetup_r+0xd0>)
 800836c:	429c      	cmp	r4, r3
 800836e:	d10f      	bne.n	8008390 <__swsetup_r+0x3c>
 8008370:	686c      	ldr	r4, [r5, #4]
 8008372:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008376:	b29a      	uxth	r2, r3
 8008378:	0715      	lsls	r5, r2, #28
 800837a:	d42c      	bmi.n	80083d6 <__swsetup_r+0x82>
 800837c:	06d0      	lsls	r0, r2, #27
 800837e:	d411      	bmi.n	80083a4 <__swsetup_r+0x50>
 8008380:	2209      	movs	r2, #9
 8008382:	6032      	str	r2, [r6, #0]
 8008384:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008388:	81a3      	strh	r3, [r4, #12]
 800838a:	f04f 30ff 	mov.w	r0, #4294967295
 800838e:	e03e      	b.n	800840e <__swsetup_r+0xba>
 8008390:	4b25      	ldr	r3, [pc, #148]	; (8008428 <__swsetup_r+0xd4>)
 8008392:	429c      	cmp	r4, r3
 8008394:	d101      	bne.n	800839a <__swsetup_r+0x46>
 8008396:	68ac      	ldr	r4, [r5, #8]
 8008398:	e7eb      	b.n	8008372 <__swsetup_r+0x1e>
 800839a:	4b24      	ldr	r3, [pc, #144]	; (800842c <__swsetup_r+0xd8>)
 800839c:	429c      	cmp	r4, r3
 800839e:	bf08      	it	eq
 80083a0:	68ec      	ldreq	r4, [r5, #12]
 80083a2:	e7e6      	b.n	8008372 <__swsetup_r+0x1e>
 80083a4:	0751      	lsls	r1, r2, #29
 80083a6:	d512      	bpl.n	80083ce <__swsetup_r+0x7a>
 80083a8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80083aa:	b141      	cbz	r1, 80083be <__swsetup_r+0x6a>
 80083ac:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80083b0:	4299      	cmp	r1, r3
 80083b2:	d002      	beq.n	80083ba <__swsetup_r+0x66>
 80083b4:	4630      	mov	r0, r6
 80083b6:	f7ff fbbf 	bl	8007b38 <_free_r>
 80083ba:	2300      	movs	r3, #0
 80083bc:	6363      	str	r3, [r4, #52]	; 0x34
 80083be:	89a3      	ldrh	r3, [r4, #12]
 80083c0:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80083c4:	81a3      	strh	r3, [r4, #12]
 80083c6:	2300      	movs	r3, #0
 80083c8:	6063      	str	r3, [r4, #4]
 80083ca:	6923      	ldr	r3, [r4, #16]
 80083cc:	6023      	str	r3, [r4, #0]
 80083ce:	89a3      	ldrh	r3, [r4, #12]
 80083d0:	f043 0308 	orr.w	r3, r3, #8
 80083d4:	81a3      	strh	r3, [r4, #12]
 80083d6:	6923      	ldr	r3, [r4, #16]
 80083d8:	b94b      	cbnz	r3, 80083ee <__swsetup_r+0x9a>
 80083da:	89a3      	ldrh	r3, [r4, #12]
 80083dc:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80083e0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80083e4:	d003      	beq.n	80083ee <__swsetup_r+0x9a>
 80083e6:	4621      	mov	r1, r4
 80083e8:	4630      	mov	r0, r6
 80083ea:	f000 f917 	bl	800861c <__smakebuf_r>
 80083ee:	89a2      	ldrh	r2, [r4, #12]
 80083f0:	f012 0301 	ands.w	r3, r2, #1
 80083f4:	d00c      	beq.n	8008410 <__swsetup_r+0xbc>
 80083f6:	2300      	movs	r3, #0
 80083f8:	60a3      	str	r3, [r4, #8]
 80083fa:	6963      	ldr	r3, [r4, #20]
 80083fc:	425b      	negs	r3, r3
 80083fe:	61a3      	str	r3, [r4, #24]
 8008400:	6923      	ldr	r3, [r4, #16]
 8008402:	b953      	cbnz	r3, 800841a <__swsetup_r+0xc6>
 8008404:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008408:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 800840c:	d1ba      	bne.n	8008384 <__swsetup_r+0x30>
 800840e:	bd70      	pop	{r4, r5, r6, pc}
 8008410:	0792      	lsls	r2, r2, #30
 8008412:	bf58      	it	pl
 8008414:	6963      	ldrpl	r3, [r4, #20]
 8008416:	60a3      	str	r3, [r4, #8]
 8008418:	e7f2      	b.n	8008400 <__swsetup_r+0xac>
 800841a:	2000      	movs	r0, #0
 800841c:	e7f7      	b.n	800840e <__swsetup_r+0xba>
 800841e:	bf00      	nop
 8008420:	20000014 	.word	0x20000014
 8008424:	080088c8 	.word	0x080088c8
 8008428:	080088e8 	.word	0x080088e8
 800842c:	080088a8 	.word	0x080088a8

08008430 <_close_r>:
 8008430:	b538      	push	{r3, r4, r5, lr}
 8008432:	2300      	movs	r3, #0
 8008434:	4c05      	ldr	r4, [pc, #20]	; (800844c <_close_r+0x1c>)
 8008436:	4605      	mov	r5, r0
 8008438:	4608      	mov	r0, r1
 800843a:	6023      	str	r3, [r4, #0]
 800843c:	f7f9 fb4d 	bl	8001ada <_close>
 8008440:	1c43      	adds	r3, r0, #1
 8008442:	d102      	bne.n	800844a <_close_r+0x1a>
 8008444:	6823      	ldr	r3, [r4, #0]
 8008446:	b103      	cbz	r3, 800844a <_close_r+0x1a>
 8008448:	602b      	str	r3, [r5, #0]
 800844a:	bd38      	pop	{r3, r4, r5, pc}
 800844c:	200002cc 	.word	0x200002cc

08008450 <__sflush_r>:
 8008450:	898a      	ldrh	r2, [r1, #12]
 8008452:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008456:	4605      	mov	r5, r0
 8008458:	0710      	lsls	r0, r2, #28
 800845a:	460c      	mov	r4, r1
 800845c:	d458      	bmi.n	8008510 <__sflush_r+0xc0>
 800845e:	684b      	ldr	r3, [r1, #4]
 8008460:	2b00      	cmp	r3, #0
 8008462:	dc05      	bgt.n	8008470 <__sflush_r+0x20>
 8008464:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8008466:	2b00      	cmp	r3, #0
 8008468:	dc02      	bgt.n	8008470 <__sflush_r+0x20>
 800846a:	2000      	movs	r0, #0
 800846c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008470:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008472:	2e00      	cmp	r6, #0
 8008474:	d0f9      	beq.n	800846a <__sflush_r+0x1a>
 8008476:	2300      	movs	r3, #0
 8008478:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800847c:	682f      	ldr	r7, [r5, #0]
 800847e:	6a21      	ldr	r1, [r4, #32]
 8008480:	602b      	str	r3, [r5, #0]
 8008482:	d032      	beq.n	80084ea <__sflush_r+0x9a>
 8008484:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8008486:	89a3      	ldrh	r3, [r4, #12]
 8008488:	075a      	lsls	r2, r3, #29
 800848a:	d505      	bpl.n	8008498 <__sflush_r+0x48>
 800848c:	6863      	ldr	r3, [r4, #4]
 800848e:	1ac0      	subs	r0, r0, r3
 8008490:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8008492:	b10b      	cbz	r3, 8008498 <__sflush_r+0x48>
 8008494:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8008496:	1ac0      	subs	r0, r0, r3
 8008498:	2300      	movs	r3, #0
 800849a:	4602      	mov	r2, r0
 800849c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800849e:	6a21      	ldr	r1, [r4, #32]
 80084a0:	4628      	mov	r0, r5
 80084a2:	47b0      	blx	r6
 80084a4:	1c43      	adds	r3, r0, #1
 80084a6:	89a3      	ldrh	r3, [r4, #12]
 80084a8:	d106      	bne.n	80084b8 <__sflush_r+0x68>
 80084aa:	6829      	ldr	r1, [r5, #0]
 80084ac:	291d      	cmp	r1, #29
 80084ae:	d848      	bhi.n	8008542 <__sflush_r+0xf2>
 80084b0:	4a29      	ldr	r2, [pc, #164]	; (8008558 <__sflush_r+0x108>)
 80084b2:	40ca      	lsrs	r2, r1
 80084b4:	07d6      	lsls	r6, r2, #31
 80084b6:	d544      	bpl.n	8008542 <__sflush_r+0xf2>
 80084b8:	2200      	movs	r2, #0
 80084ba:	6062      	str	r2, [r4, #4]
 80084bc:	6922      	ldr	r2, [r4, #16]
 80084be:	04d9      	lsls	r1, r3, #19
 80084c0:	6022      	str	r2, [r4, #0]
 80084c2:	d504      	bpl.n	80084ce <__sflush_r+0x7e>
 80084c4:	1c42      	adds	r2, r0, #1
 80084c6:	d101      	bne.n	80084cc <__sflush_r+0x7c>
 80084c8:	682b      	ldr	r3, [r5, #0]
 80084ca:	b903      	cbnz	r3, 80084ce <__sflush_r+0x7e>
 80084cc:	6560      	str	r0, [r4, #84]	; 0x54
 80084ce:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80084d0:	602f      	str	r7, [r5, #0]
 80084d2:	2900      	cmp	r1, #0
 80084d4:	d0c9      	beq.n	800846a <__sflush_r+0x1a>
 80084d6:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80084da:	4299      	cmp	r1, r3
 80084dc:	d002      	beq.n	80084e4 <__sflush_r+0x94>
 80084de:	4628      	mov	r0, r5
 80084e0:	f7ff fb2a 	bl	8007b38 <_free_r>
 80084e4:	2000      	movs	r0, #0
 80084e6:	6360      	str	r0, [r4, #52]	; 0x34
 80084e8:	e7c0      	b.n	800846c <__sflush_r+0x1c>
 80084ea:	2301      	movs	r3, #1
 80084ec:	4628      	mov	r0, r5
 80084ee:	47b0      	blx	r6
 80084f0:	1c41      	adds	r1, r0, #1
 80084f2:	d1c8      	bne.n	8008486 <__sflush_r+0x36>
 80084f4:	682b      	ldr	r3, [r5, #0]
 80084f6:	2b00      	cmp	r3, #0
 80084f8:	d0c5      	beq.n	8008486 <__sflush_r+0x36>
 80084fa:	2b1d      	cmp	r3, #29
 80084fc:	d001      	beq.n	8008502 <__sflush_r+0xb2>
 80084fe:	2b16      	cmp	r3, #22
 8008500:	d101      	bne.n	8008506 <__sflush_r+0xb6>
 8008502:	602f      	str	r7, [r5, #0]
 8008504:	e7b1      	b.n	800846a <__sflush_r+0x1a>
 8008506:	89a3      	ldrh	r3, [r4, #12]
 8008508:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800850c:	81a3      	strh	r3, [r4, #12]
 800850e:	e7ad      	b.n	800846c <__sflush_r+0x1c>
 8008510:	690f      	ldr	r7, [r1, #16]
 8008512:	2f00      	cmp	r7, #0
 8008514:	d0a9      	beq.n	800846a <__sflush_r+0x1a>
 8008516:	0793      	lsls	r3, r2, #30
 8008518:	bf18      	it	ne
 800851a:	2300      	movne	r3, #0
 800851c:	680e      	ldr	r6, [r1, #0]
 800851e:	bf08      	it	eq
 8008520:	694b      	ldreq	r3, [r1, #20]
 8008522:	eba6 0807 	sub.w	r8, r6, r7
 8008526:	600f      	str	r7, [r1, #0]
 8008528:	608b      	str	r3, [r1, #8]
 800852a:	f1b8 0f00 	cmp.w	r8, #0
 800852e:	dd9c      	ble.n	800846a <__sflush_r+0x1a>
 8008530:	4643      	mov	r3, r8
 8008532:	463a      	mov	r2, r7
 8008534:	6a21      	ldr	r1, [r4, #32]
 8008536:	4628      	mov	r0, r5
 8008538:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800853a:	47b0      	blx	r6
 800853c:	2800      	cmp	r0, #0
 800853e:	dc06      	bgt.n	800854e <__sflush_r+0xfe>
 8008540:	89a3      	ldrh	r3, [r4, #12]
 8008542:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008546:	81a3      	strh	r3, [r4, #12]
 8008548:	f04f 30ff 	mov.w	r0, #4294967295
 800854c:	e78e      	b.n	800846c <__sflush_r+0x1c>
 800854e:	4407      	add	r7, r0
 8008550:	eba8 0800 	sub.w	r8, r8, r0
 8008554:	e7e9      	b.n	800852a <__sflush_r+0xda>
 8008556:	bf00      	nop
 8008558:	20400001 	.word	0x20400001

0800855c <_fflush_r>:
 800855c:	b538      	push	{r3, r4, r5, lr}
 800855e:	690b      	ldr	r3, [r1, #16]
 8008560:	4605      	mov	r5, r0
 8008562:	460c      	mov	r4, r1
 8008564:	b1db      	cbz	r3, 800859e <_fflush_r+0x42>
 8008566:	b118      	cbz	r0, 8008570 <_fflush_r+0x14>
 8008568:	6983      	ldr	r3, [r0, #24]
 800856a:	b90b      	cbnz	r3, 8008570 <_fflush_r+0x14>
 800856c:	f7fe fae4 	bl	8006b38 <__sinit>
 8008570:	4b0c      	ldr	r3, [pc, #48]	; (80085a4 <_fflush_r+0x48>)
 8008572:	429c      	cmp	r4, r3
 8008574:	d109      	bne.n	800858a <_fflush_r+0x2e>
 8008576:	686c      	ldr	r4, [r5, #4]
 8008578:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800857c:	b17b      	cbz	r3, 800859e <_fflush_r+0x42>
 800857e:	4621      	mov	r1, r4
 8008580:	4628      	mov	r0, r5
 8008582:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008586:	f7ff bf63 	b.w	8008450 <__sflush_r>
 800858a:	4b07      	ldr	r3, [pc, #28]	; (80085a8 <_fflush_r+0x4c>)
 800858c:	429c      	cmp	r4, r3
 800858e:	d101      	bne.n	8008594 <_fflush_r+0x38>
 8008590:	68ac      	ldr	r4, [r5, #8]
 8008592:	e7f1      	b.n	8008578 <_fflush_r+0x1c>
 8008594:	4b05      	ldr	r3, [pc, #20]	; (80085ac <_fflush_r+0x50>)
 8008596:	429c      	cmp	r4, r3
 8008598:	bf08      	it	eq
 800859a:	68ec      	ldreq	r4, [r5, #12]
 800859c:	e7ec      	b.n	8008578 <_fflush_r+0x1c>
 800859e:	2000      	movs	r0, #0
 80085a0:	bd38      	pop	{r3, r4, r5, pc}
 80085a2:	bf00      	nop
 80085a4:	080088c8 	.word	0x080088c8
 80085a8:	080088e8 	.word	0x080088e8
 80085ac:	080088a8 	.word	0x080088a8

080085b0 <_lseek_r>:
 80085b0:	b538      	push	{r3, r4, r5, lr}
 80085b2:	4605      	mov	r5, r0
 80085b4:	4608      	mov	r0, r1
 80085b6:	4611      	mov	r1, r2
 80085b8:	2200      	movs	r2, #0
 80085ba:	4c05      	ldr	r4, [pc, #20]	; (80085d0 <_lseek_r+0x20>)
 80085bc:	6022      	str	r2, [r4, #0]
 80085be:	461a      	mov	r2, r3
 80085c0:	f7f9 faaf 	bl	8001b22 <_lseek>
 80085c4:	1c43      	adds	r3, r0, #1
 80085c6:	d102      	bne.n	80085ce <_lseek_r+0x1e>
 80085c8:	6823      	ldr	r3, [r4, #0]
 80085ca:	b103      	cbz	r3, 80085ce <_lseek_r+0x1e>
 80085cc:	602b      	str	r3, [r5, #0]
 80085ce:	bd38      	pop	{r3, r4, r5, pc}
 80085d0:	200002cc 	.word	0x200002cc

080085d4 <__swhatbuf_r>:
 80085d4:	b570      	push	{r4, r5, r6, lr}
 80085d6:	460e      	mov	r6, r1
 80085d8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80085dc:	b096      	sub	sp, #88	; 0x58
 80085de:	2900      	cmp	r1, #0
 80085e0:	4614      	mov	r4, r2
 80085e2:	461d      	mov	r5, r3
 80085e4:	da07      	bge.n	80085f6 <__swhatbuf_r+0x22>
 80085e6:	2300      	movs	r3, #0
 80085e8:	602b      	str	r3, [r5, #0]
 80085ea:	89b3      	ldrh	r3, [r6, #12]
 80085ec:	061a      	lsls	r2, r3, #24
 80085ee:	d410      	bmi.n	8008612 <__swhatbuf_r+0x3e>
 80085f0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80085f4:	e00e      	b.n	8008614 <__swhatbuf_r+0x40>
 80085f6:	466a      	mov	r2, sp
 80085f8:	f000 f8a4 	bl	8008744 <_fstat_r>
 80085fc:	2800      	cmp	r0, #0
 80085fe:	dbf2      	blt.n	80085e6 <__swhatbuf_r+0x12>
 8008600:	9a01      	ldr	r2, [sp, #4]
 8008602:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8008606:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800860a:	425a      	negs	r2, r3
 800860c:	415a      	adcs	r2, r3
 800860e:	602a      	str	r2, [r5, #0]
 8008610:	e7ee      	b.n	80085f0 <__swhatbuf_r+0x1c>
 8008612:	2340      	movs	r3, #64	; 0x40
 8008614:	2000      	movs	r0, #0
 8008616:	6023      	str	r3, [r4, #0]
 8008618:	b016      	add	sp, #88	; 0x58
 800861a:	bd70      	pop	{r4, r5, r6, pc}

0800861c <__smakebuf_r>:
 800861c:	898b      	ldrh	r3, [r1, #12]
 800861e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8008620:	079d      	lsls	r5, r3, #30
 8008622:	4606      	mov	r6, r0
 8008624:	460c      	mov	r4, r1
 8008626:	d507      	bpl.n	8008638 <__smakebuf_r+0x1c>
 8008628:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800862c:	6023      	str	r3, [r4, #0]
 800862e:	6123      	str	r3, [r4, #16]
 8008630:	2301      	movs	r3, #1
 8008632:	6163      	str	r3, [r4, #20]
 8008634:	b002      	add	sp, #8
 8008636:	bd70      	pop	{r4, r5, r6, pc}
 8008638:	ab01      	add	r3, sp, #4
 800863a:	466a      	mov	r2, sp
 800863c:	f7ff ffca 	bl	80085d4 <__swhatbuf_r>
 8008640:	9900      	ldr	r1, [sp, #0]
 8008642:	4605      	mov	r5, r0
 8008644:	4630      	mov	r0, r6
 8008646:	f7ff fac3 	bl	8007bd0 <_malloc_r>
 800864a:	b948      	cbnz	r0, 8008660 <__smakebuf_r+0x44>
 800864c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008650:	059a      	lsls	r2, r3, #22
 8008652:	d4ef      	bmi.n	8008634 <__smakebuf_r+0x18>
 8008654:	f023 0303 	bic.w	r3, r3, #3
 8008658:	f043 0302 	orr.w	r3, r3, #2
 800865c:	81a3      	strh	r3, [r4, #12]
 800865e:	e7e3      	b.n	8008628 <__smakebuf_r+0xc>
 8008660:	4b0d      	ldr	r3, [pc, #52]	; (8008698 <__smakebuf_r+0x7c>)
 8008662:	62b3      	str	r3, [r6, #40]	; 0x28
 8008664:	89a3      	ldrh	r3, [r4, #12]
 8008666:	6020      	str	r0, [r4, #0]
 8008668:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800866c:	81a3      	strh	r3, [r4, #12]
 800866e:	9b00      	ldr	r3, [sp, #0]
 8008670:	6120      	str	r0, [r4, #16]
 8008672:	6163      	str	r3, [r4, #20]
 8008674:	9b01      	ldr	r3, [sp, #4]
 8008676:	b15b      	cbz	r3, 8008690 <__smakebuf_r+0x74>
 8008678:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800867c:	4630      	mov	r0, r6
 800867e:	f000 f873 	bl	8008768 <_isatty_r>
 8008682:	b128      	cbz	r0, 8008690 <__smakebuf_r+0x74>
 8008684:	89a3      	ldrh	r3, [r4, #12]
 8008686:	f023 0303 	bic.w	r3, r3, #3
 800868a:	f043 0301 	orr.w	r3, r3, #1
 800868e:	81a3      	strh	r3, [r4, #12]
 8008690:	89a3      	ldrh	r3, [r4, #12]
 8008692:	431d      	orrs	r5, r3
 8008694:	81a5      	strh	r5, [r4, #12]
 8008696:	e7cd      	b.n	8008634 <__smakebuf_r+0x18>
 8008698:	08006b01 	.word	0x08006b01

0800869c <memmove>:
 800869c:	4288      	cmp	r0, r1
 800869e:	b510      	push	{r4, lr}
 80086a0:	eb01 0302 	add.w	r3, r1, r2
 80086a4:	d807      	bhi.n	80086b6 <memmove+0x1a>
 80086a6:	1e42      	subs	r2, r0, #1
 80086a8:	4299      	cmp	r1, r3
 80086aa:	d00a      	beq.n	80086c2 <memmove+0x26>
 80086ac:	f811 4b01 	ldrb.w	r4, [r1], #1
 80086b0:	f802 4f01 	strb.w	r4, [r2, #1]!
 80086b4:	e7f8      	b.n	80086a8 <memmove+0xc>
 80086b6:	4283      	cmp	r3, r0
 80086b8:	d9f5      	bls.n	80086a6 <memmove+0xa>
 80086ba:	1881      	adds	r1, r0, r2
 80086bc:	1ad2      	subs	r2, r2, r3
 80086be:	42d3      	cmn	r3, r2
 80086c0:	d100      	bne.n	80086c4 <memmove+0x28>
 80086c2:	bd10      	pop	{r4, pc}
 80086c4:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80086c8:	f801 4d01 	strb.w	r4, [r1, #-1]!
 80086cc:	e7f7      	b.n	80086be <memmove+0x22>

080086ce <__malloc_lock>:
 80086ce:	4770      	bx	lr

080086d0 <__malloc_unlock>:
 80086d0:	4770      	bx	lr

080086d2 <_realloc_r>:
 80086d2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80086d4:	4607      	mov	r7, r0
 80086d6:	4614      	mov	r4, r2
 80086d8:	460e      	mov	r6, r1
 80086da:	b921      	cbnz	r1, 80086e6 <_realloc_r+0x14>
 80086dc:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80086e0:	4611      	mov	r1, r2
 80086e2:	f7ff ba75 	b.w	8007bd0 <_malloc_r>
 80086e6:	b922      	cbnz	r2, 80086f2 <_realloc_r+0x20>
 80086e8:	f7ff fa26 	bl	8007b38 <_free_r>
 80086ec:	4625      	mov	r5, r4
 80086ee:	4628      	mov	r0, r5
 80086f0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80086f2:	f000 f849 	bl	8008788 <_malloc_usable_size_r>
 80086f6:	42a0      	cmp	r0, r4
 80086f8:	d20f      	bcs.n	800871a <_realloc_r+0x48>
 80086fa:	4621      	mov	r1, r4
 80086fc:	4638      	mov	r0, r7
 80086fe:	f7ff fa67 	bl	8007bd0 <_malloc_r>
 8008702:	4605      	mov	r5, r0
 8008704:	2800      	cmp	r0, #0
 8008706:	d0f2      	beq.n	80086ee <_realloc_r+0x1c>
 8008708:	4631      	mov	r1, r6
 800870a:	4622      	mov	r2, r4
 800870c:	f7fe fe02 	bl	8007314 <memcpy>
 8008710:	4631      	mov	r1, r6
 8008712:	4638      	mov	r0, r7
 8008714:	f7ff fa10 	bl	8007b38 <_free_r>
 8008718:	e7e9      	b.n	80086ee <_realloc_r+0x1c>
 800871a:	4635      	mov	r5, r6
 800871c:	e7e7      	b.n	80086ee <_realloc_r+0x1c>
	...

08008720 <_read_r>:
 8008720:	b538      	push	{r3, r4, r5, lr}
 8008722:	4605      	mov	r5, r0
 8008724:	4608      	mov	r0, r1
 8008726:	4611      	mov	r1, r2
 8008728:	2200      	movs	r2, #0
 800872a:	4c05      	ldr	r4, [pc, #20]	; (8008740 <_read_r+0x20>)
 800872c:	6022      	str	r2, [r4, #0]
 800872e:	461a      	mov	r2, r3
 8008730:	f7f9 f99a 	bl	8001a68 <_read>
 8008734:	1c43      	adds	r3, r0, #1
 8008736:	d102      	bne.n	800873e <_read_r+0x1e>
 8008738:	6823      	ldr	r3, [r4, #0]
 800873a:	b103      	cbz	r3, 800873e <_read_r+0x1e>
 800873c:	602b      	str	r3, [r5, #0]
 800873e:	bd38      	pop	{r3, r4, r5, pc}
 8008740:	200002cc 	.word	0x200002cc

08008744 <_fstat_r>:
 8008744:	b538      	push	{r3, r4, r5, lr}
 8008746:	2300      	movs	r3, #0
 8008748:	4c06      	ldr	r4, [pc, #24]	; (8008764 <_fstat_r+0x20>)
 800874a:	4605      	mov	r5, r0
 800874c:	4608      	mov	r0, r1
 800874e:	4611      	mov	r1, r2
 8008750:	6023      	str	r3, [r4, #0]
 8008752:	f7f9 f9cd 	bl	8001af0 <_fstat>
 8008756:	1c43      	adds	r3, r0, #1
 8008758:	d102      	bne.n	8008760 <_fstat_r+0x1c>
 800875a:	6823      	ldr	r3, [r4, #0]
 800875c:	b103      	cbz	r3, 8008760 <_fstat_r+0x1c>
 800875e:	602b      	str	r3, [r5, #0]
 8008760:	bd38      	pop	{r3, r4, r5, pc}
 8008762:	bf00      	nop
 8008764:	200002cc 	.word	0x200002cc

08008768 <_isatty_r>:
 8008768:	b538      	push	{r3, r4, r5, lr}
 800876a:	2300      	movs	r3, #0
 800876c:	4c05      	ldr	r4, [pc, #20]	; (8008784 <_isatty_r+0x1c>)
 800876e:	4605      	mov	r5, r0
 8008770:	4608      	mov	r0, r1
 8008772:	6023      	str	r3, [r4, #0]
 8008774:	f7f9 f9cb 	bl	8001b0e <_isatty>
 8008778:	1c43      	adds	r3, r0, #1
 800877a:	d102      	bne.n	8008782 <_isatty_r+0x1a>
 800877c:	6823      	ldr	r3, [r4, #0]
 800877e:	b103      	cbz	r3, 8008782 <_isatty_r+0x1a>
 8008780:	602b      	str	r3, [r5, #0]
 8008782:	bd38      	pop	{r3, r4, r5, pc}
 8008784:	200002cc 	.word	0x200002cc

08008788 <_malloc_usable_size_r>:
 8008788:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800878c:	1f18      	subs	r0, r3, #4
 800878e:	2b00      	cmp	r3, #0
 8008790:	bfbc      	itt	lt
 8008792:	580b      	ldrlt	r3, [r1, r0]
 8008794:	18c0      	addlt	r0, r0, r3
 8008796:	4770      	bx	lr

08008798 <_init>:
 8008798:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800879a:	bf00      	nop
 800879c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800879e:	bc08      	pop	{r3}
 80087a0:	469e      	mov	lr, r3
 80087a2:	4770      	bx	lr

080087a4 <_fini>:
 80087a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80087a6:	bf00      	nop
 80087a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80087aa:	bc08      	pop	{r3}
 80087ac:	469e      	mov	lr, r3
 80087ae:	4770      	bx	lr
